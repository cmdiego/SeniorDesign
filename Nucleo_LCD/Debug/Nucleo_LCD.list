
Nucleo_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004508  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004770  08004770  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000078  080047f0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080047f0  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4e7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e73  00000000  00000000  0002d58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002f408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023259  00000000  00000000  00030b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da95  00000000  00000000  00053d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbae6  00000000  00000000  000617ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d2d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  0013d328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080046c0 	.word	0x080046c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080046c0 	.word	0x080046c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bd2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bde:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000be6:	f023 0301 	bic.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000bfe:	bf00      	nop
  __NOP();
 8000c00:	bf00      	nop
  __NOP();
 8000c02:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e000      	b.n	8000c12 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000c10:	2301      	movs	r3, #1
  }
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000edf0 	.word	0xe000edf0
 8000c20:	e0001000 	.word	0xe0001000

08000c24 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <DWT_Delay_us+0x40>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c32:	f002 f8af 	bl	8002d94 <HAL_RCC_GetHCLKFreq>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <DWT_Delay_us+0x44>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0c9b      	lsrs	r3, r3, #18
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000c48:	bf00      	nop
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <DWT_Delay_us+0x40>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f8      	bcc.n	8000c4a <DWT_Delay_us+0x26>
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e0001000 	.word	0xe0001000
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <lcd16x2_enablePulse+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <lcd16x2_enablePulse+0x38>)
 8000c76:	8811      	ldrh	r1, [r2, #0]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 ff8a 	bl	8002b94 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000c80:	2014      	movs	r0, #20
 8000c82:	f7ff ffcf 	bl	8000c24 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <lcd16x2_enablePulse+0x34>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <lcd16x2_enablePulse+0x38>)
 8000c8c:	8811      	ldrh	r1, [r2, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 ff7f 	bl	8002b94 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000c96:	203c      	movs	r0, #60	; 0x3c
 8000c98:	f7ff ffc4 	bl	8000c24 <DWT_Delay_us>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000094 	.word	0x20000094
 8000ca4:	2000009a 	.word	0x2000009a

08000ca8 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <lcd16x2_rs+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <lcd16x2_rs+0x28>)
 8000cb8:	8811      	ldrh	r1, [r2, #0]
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 ff69 	bl	8002b94 <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000094 	.word	0x20000094
 8000cd0:	20000098 	.word	0x20000098

08000cd4 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <lcd16x2_write+0x198>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d05a      	beq.n	8000daa <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cf4:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <lcd16x2_write+0x19c>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <lcd16x2_write+0x1a0>)
 8000cfa:	8819      	ldrh	r1, [r3, #0]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	f001 ff45 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <lcd16x2_write+0x1a4>)
 8000d10:	8819      	ldrh	r1, [r3, #0]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f001 ff3a 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d20:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <lcd16x2_write+0x1a8>)
 8000d26:	8819      	ldrh	r1, [r3, #0]
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f001 ff2f 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <lcd16x2_write+0x1ac>)
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f001 ff24 	bl	8002b94 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000d52:	8819      	ldrh	r1, [r3, #0]
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f001 ff19 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000d68:	8819      	ldrh	r1, [r3, #0]
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	f001 ff0e 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d78:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f001 ff03 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000d94:	8819      	ldrh	r1, [r3, #0]
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f001 fef8 	bl	8002b94 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000da4:	f7ff ff62 	bl	8000c6c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000da8:	e05b      	b.n	8000e62 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000db0:	8819      	ldrh	r1, [r3, #0]
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f001 feea 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000dc6:	8819      	ldrh	r1, [r3, #0]
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f001 fedf 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f001 fed4 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000df2:	8819      	ldrh	r1, [r3, #0]
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f001 fec9 	bl	8002b94 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e02:	f7ff ff33 	bl	8000c6c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000e0c:	8819      	ldrh	r1, [r3, #0]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	f001 febc 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000e22:	8819      	ldrh	r1, [r3, #0]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f001 feb1 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000e38:	8819      	ldrh	r1, [r3, #0]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	f001 fea6 	bl	8002b94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000e4e:	8819      	ldrh	r1, [r3, #0]
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f001 fe9b 	bl	8002b94 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e5e:	f7ff ff05 	bl	8000c6c <lcd16x2_enablePulse>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	2000009c 	.word	0x2000009c
 8000e74:	200000a0 	.word	0x200000a0
 8000e78:	200000a2 	.word	0x200000a2
 8000e7c:	200000a4 	.word	0x200000a4
 8000e80:	200000a6 	.word	0x200000a6
 8000e84:	200000a8 	.word	0x200000a8
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	200000ae 	.word	0x200000ae
 8000e90:	200000b0 	.word	0x200000b0
 8000e94:	200000b2 	.word	0x200000b2

08000e98 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff00 	bl	8000ca8 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff12 	bl	8000cd4 <lcd16x2_write>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff fef0 	bl	8000ca8 <lcd16x2_rs>
  lcd16x2_write(data);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff02 	bl	8000cd4 <lcd16x2_write>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fedc 	bl	8000ca8 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <lcd16x2_write4+0x80>)
 8000ef6:	8819      	ldrh	r1, [r3, #0]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	f001 fe47 	bl	8002b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <lcd16x2_write4+0x84>)
 8000f0c:	8819      	ldrh	r1, [r3, #0]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f001 fe3c 	bl	8002b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <lcd16x2_write4+0x88>)
 8000f22:	8819      	ldrh	r1, [r3, #0]
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f001 fe31 	bl	8002b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <lcd16x2_write4+0x8c>)
 8000f38:	8819      	ldrh	r1, [r3, #0]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f001 fe26 	bl	8002b94 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000f48:	f7ff fe90 	bl	8000c6c <lcd16x2_enablePulse>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000a8 	.word	0x200000a8
 8000f58:	200000ac 	.word	0x200000ac
 8000f5c:	200000ae 	.word	0x200000ae
 8000f60:	200000b0 	.word	0x200000b0
 8000f64:	200000b2 	.word	0x200000b2

08000f68 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	817b      	strh	r3, [r7, #10]
 8000f76:	4613      	mov	r3, r2
 8000f78:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000f7a:	f7ff fe23 	bl	8000bc4 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <lcd16x2_init_4bits+0xa8>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <lcd16x2_init_4bits+0xac>)
 8000f86:	897b      	ldrh	r3, [r7, #10]
 8000f88:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <lcd16x2_init_4bits+0xb0>)
 8000f8c:	893b      	ldrh	r3, [r7, #8]
 8000f8e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <lcd16x2_init_4bits+0xb4>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <lcd16x2_init_4bits+0xb8>)
 8000f98:	8b3b      	ldrh	r3, [r7, #24]
 8000f9a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <lcd16x2_init_4bits+0xbc>)
 8000f9e:	8bbb      	ldrh	r3, [r7, #28]
 8000fa0:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <lcd16x2_init_4bits+0xc0>)
 8000fa4:	8c3b      	ldrh	r3, [r7, #32]
 8000fa6:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000fa8:	4a20      	ldr	r2, [pc, #128]	; (800102c <lcd16x2_init_4bits+0xc4>)
 8000faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fac:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <lcd16x2_init_4bits+0xc8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <lcd16x2_init_4bits+0xcc>)
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000fba:	2014      	movs	r0, #20
 8000fbc:	f000 ff44 	bl	8001e48 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff ff89 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f000 ff3e 	bl	8001e48 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff ff83 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 ff38 	bl	8001e48 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f7ff ff7d 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 ff32 	bl	8001e48 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff ff77 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 ff2c 	bl	8001e48 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f7ff ff51 	bl	8000e98 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f7ff ff4e 	bl	8000e98 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ff4b 	bl	8000e98 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 ff20 	bl	8001e48 <HAL_Delay>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000094 	.word	0x20000094
 8001014:	20000098 	.word	0x20000098
 8001018:	2000009a 	.word	0x2000009a
 800101c:	200000a8 	.word	0x200000a8
 8001020:	200000ac 	.word	0x200000ac
 8001024:	200000ae 	.word	0x200000ae
 8001028:	200000b0 	.word	0x200000b0
 800102c:	200000b2 	.word	0x200000b2
 8001030:	20000000 	.word	0x20000000
 8001034:	20000002 	.word	0x20000002

08001038 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff19 	bl	8000e98 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001066:	e007      	b.n	8001078 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800106e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff10 	bl	8000e98 <lcd16x2_writeCommand>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ffd6 	bl	8001038 <lcd16x2_setCursor>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001094:	2100      	movs	r1, #0
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ffce 	bl	8001038 <lcd16x2_setCursor>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if(state)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f043 0303 	orr.w	r3, r3, #3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010bc:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fee8 	bl	8000e98 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80010c8:	e00b      	b.n	80010e2 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010d6:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fedb 	bl	8000e98 <lcd16x2_writeCommand>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000001 	.word	0x20000001

080010f0 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff fecf 	bl	8000e98 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 fea4 	bl	8001e48 <HAL_Delay>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001104:	b40f      	push	{r0, r1, r2, r3}
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b089      	sub	sp, #36	; 0x24
 800110a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800110c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001110:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800111a:	4618      	mov	r0, r3
 800111c:	f002 feb8 	bl	8003e90 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	77fb      	strb	r3, [r7, #31]
 8001124:	e00b      	b.n	800113e <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	f107 0220 	add.w	r2, r7, #32
 800112c:	4413      	add	r3, r2
 800112e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fec0 	bl	8000eb8 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	3301      	adds	r3, #1
 800113c:	77fb      	strb	r3, [r7, #31]
 800113e:	7ffc      	ldrb	r4, [r7, #31]
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f863 	bl	8000210 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	429c      	cmp	r4, r3
 800114e:	d202      	bcs.n	8001156 <lcd16x2_printf+0x52>
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d9e7      	bls.n	8001126 <lcd16x2_printf+0x22>
  }
}
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001160:	b004      	add	sp, #16
 8001162:	4770      	bx	lr

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fdfc 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f832 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f9e8 	bl	8001544 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001174:	f000 f89c 	bl	80012b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001178:	f000 f8ec 	bl	8001354 <MX_ADC2_Init>
  MX_ADC3_Init();
 800117c:	f000 f93c 	bl	80013f8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001180:	f000 f98c 	bl	800149c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // ENCODER INTERRUPT
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001184:	213c      	movs	r1, #60	; 0x3c
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <main+0x5c>)
 8001188:	f002 fb06 	bl	8003798 <HAL_TIM_Encoder_Start_IT>

  // LCD STARTUP
  Lcd_Start_Up();
 800118c:	f000 fad8 	bl	8001740 <Lcd_Start_Up>
  // Start all 3 onboard ADCs
  HAL_ADC_Start(&hadc1);
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <main+0x60>)
 8001192:	f000 fec1 	bl	8001f18 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <main+0x64>)
 8001198:	f000 febe 	bl	8001f18 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <main+0x68>)
 800119e:	f000 febb 	bl	8001f18 <HAL_ADC_Start>
  HAL_Delay(1500);
 80011a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011a6:	f000 fe4f 	bl	8001e48 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Get_Pot_Params();
 80011aa:	f000 fb05 	bl	80017b8 <Get_Pot_Params>

	  if (clear_flag)
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <main+0x6c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <main+0x56>
		  lcd16x2_clear();
 80011b6:	f7ff ff9b 	bl	80010f0 <lcd16x2_clear>

	  Update_Lcd();
 80011ba:	f000 fa65 	bl	8001688 <Update_Lcd>
	  Get_Pot_Params();
 80011be:	e7f4      	b.n	80011aa <main+0x46>
 80011c0:	200001bc 	.word	0x200001bc
 80011c4:	2000012c 	.word	0x2000012c
 80011c8:	200000cc 	.word	0x200000cc
 80011cc:	20000174 	.word	0x20000174
 80011d0:	200000be 	.word	0x200000be

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2234      	movs	r2, #52	; 0x34
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fe36 	bl	8003e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <SystemClock_Config+0xd4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <SystemClock_Config+0xd4>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <SystemClock_Config+0xd4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001214:	2300      	movs	r3, #0
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <SystemClock_Config+0xd8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <SystemClock_Config+0xd8>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <SystemClock_Config+0xd8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123c:	2310      	movs	r3, #16
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2302      	movs	r3, #2
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001248:	2310      	movs	r3, #16
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800124c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001250:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001252:	2304      	movs	r3, #4
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4618      	mov	r0, r3
 8001264:	f001 ff54 	bl	8003110 <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800126e:	f000 fbb1 	bl	80019d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2302      	movs	r3, #2
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fc9a 	bl	8002bc8 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800129a:	f000 fb9b 	bl	80019d4 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_ADC1_Init+0x98>)
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <MX_ADC1_Init+0x9c>)
 80012c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_ADC1_Init+0x98>)
 80012ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_ADC1_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_ADC1_Init+0x98>)
 80012de:	2201      	movs	r2, #1
 80012e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_ADC1_Init+0x98>)
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <MX_ADC1_Init+0xa0>)
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_ADC1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_ADC1_Init+0x98>)
 80012fe:	2201      	movs	r2, #1
 8001300:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_ADC1_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_ADC1_Init+0x98>)
 8001312:	f000 fdbd 	bl	8001e90 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 fb5a 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001328:	2304      	movs	r3, #4
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_ADC1_Init+0x98>)
 8001332:	f000 ff5b 	bl	80021ec <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800133c:	f000 fb4a 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000012c 	.word	0x2000012c
 800134c:	40012000 	.word	0x40012000
 8001350:	0f000001 	.word	0x0f000001

08001354 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_ADC2_Init+0x98>)
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <MX_ADC2_Init+0x9c>)
 800136a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_ADC2_Init+0x98>)
 800136e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001372:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_ADC2_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_ADC2_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_ADC2_Init+0x98>)
 8001382:	2201      	movs	r2, #1
 8001384:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_ADC2_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_ADC2_Init+0x98>)
 8001390:	2200      	movs	r2, #0
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_ADC2_Init+0x98>)
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <MX_ADC2_Init+0xa0>)
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_ADC2_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_ADC2_Init+0x98>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_ADC2_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_ADC2_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_ADC2_Init+0x98>)
 80013b6:	f000 fd6b 	bl	8001e90 <HAL_ADC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80013c0:	f000 fb08 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80013cc:	2304      	movs	r3, #4
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_ADC2_Init+0x98>)
 80013d6:	f000 ff09 	bl	80021ec <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80013e0:	f000 faf8 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000cc 	.word	0x200000cc
 80013f0:	40012100 	.word	0x40012100
 80013f4:	0f000001 	.word	0x0f000001

080013f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_ADC3_Init+0x98>)
 800140c:	4a21      	ldr	r2, [pc, #132]	; (8001494 <MX_ADC3_Init+0x9c>)
 800140e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_ADC3_Init+0x98>)
 8001412:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001416:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_ADC3_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_ADC3_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_ADC3_Init+0x98>)
 8001426:	2201      	movs	r2, #1
 8001428:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_ADC3_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_ADC3_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_ADC3_Init+0x98>)
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <MX_ADC3_Init+0xa0>)
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_ADC3_Init+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_ADC3_Init+0x98>)
 8001446:	2201      	movs	r2, #1
 8001448:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_ADC3_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_ADC3_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_ADC3_Init+0x98>)
 800145a:	f000 fd19 	bl	8001e90 <HAL_ADC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001464:	f000 fab6 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001468:	230d      	movs	r3, #13
 800146a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001470:	2304      	movs	r3, #4
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_ADC3_Init+0x98>)
 800147a:	f000 feb7 	bl	80021ec <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001484:	f000 faa6 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000174 	.word	0x20000174
 8001494:	40012200 	.word	0x40012200
 8001498:	0f000001 	.word	0x0f000001

0800149c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fcd2 	bl	8003e54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <MX_TIM2_Init+0xa4>)
 80014ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_TIM2_Init+0xa4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_TIM2_Init+0xa4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_TIM2_Init+0xa4>)
 80014ce:	f04f 32ff 	mov.w	r2, #4294967295
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM2_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e0:	2303      	movs	r3, #3
 80014e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014e8:	2301      	movs	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_TIM2_Init+0xa4>)
 800150c:	f002 f89e 	bl	800364c <HAL_TIM_Encoder_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001516:	f000 fa5d 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_TIM2_Init+0xa4>)
 8001528:	f002 fbda 	bl	8003ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001532:	f000 fa4f 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001bc 	.word	0x200001bc

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b46      	ldr	r3, [pc, #280]	; (8001678 <MX_GPIO_Init+0x134>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a45      	ldr	r2, [pc, #276]	; (8001678 <MX_GPIO_Init+0x134>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b43      	ldr	r3, [pc, #268]	; (8001678 <MX_GPIO_Init+0x134>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <MX_GPIO_Init+0x134>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <MX_GPIO_Init+0x134>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <MX_GPIO_Init+0x134>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <MX_GPIO_Init+0x134>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a37      	ldr	r2, [pc, #220]	; (8001678 <MX_GPIO_Init+0x134>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <MX_GPIO_Init+0x134>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <MX_GPIO_Init+0x134>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <MX_GPIO_Init+0x134>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <MX_GPIO_Init+0x134>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|UD7_Pin|UD6_Pin|UD4_Pin
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80015d0:	482a      	ldr	r0, [pc, #168]	; (800167c <MX_GPIO_Init+0x138>)
 80015d2:	f001 fadf 	bl	8002b94 <HAL_GPIO_WritePin>
                          |UD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UE_Pin|URW_Pin|URS_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_GPIO_Init+0x13c>)
 80015de:	f001 fad9 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4822      	ldr	r0, [pc, #136]	; (8001684 <MX_GPIO_Init+0x140>)
 80015fa:	f001 f937 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015fe:	2320      	movs	r3, #32
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4819      	ldr	r0, [pc, #100]	; (800167c <MX_GPIO_Init+0x138>)
 8001616:	f001 f929 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : UD7_Pin UD6_Pin UD4_Pin UD5_Pin */
  GPIO_InitStruct.Pin = UD7_Pin|UD6_Pin|UD4_Pin|UD5_Pin;
 800161a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001628:	2301      	movs	r3, #1
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4812      	ldr	r0, [pc, #72]	; (800167c <MX_GPIO_Init+0x138>)
 8001634:	f001 f91a 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : UE_Pin URW_Pin URS_Pin */
  GPIO_InitStruct.Pin = UE_Pin|URW_Pin|URS_Pin;
 8001638:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001646:	2301      	movs	r3, #1
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	480b      	ldr	r0, [pc, #44]	; (8001680 <MX_GPIO_Init+0x13c>)
 8001652:	f001 f90b 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_C_Pin */
  GPIO_InitStruct.Pin = ENCODER_C_Pin;
 8001656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_C_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_GPIO_Init+0x140>)
 800166c:	f001 f8fe 	bl	800286c <HAL_GPIO_Init>

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800

08001688 <Update_Lcd>:

/* USER CODE BEGIN 4 */

void Update_Lcd() {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	clear_flag = false;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <Update_Lcd+0x30>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
	// check for updates of user input
	switch(position) {
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <Update_Lcd+0x34>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <Update_Lcd+0x1a>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d004      	beq.n	80016aa <Update_Lcd+0x22>
//  lcd16x2_printf("%02d", scaledValuePA);
//  lcd16x2_printf(" B:");
//  lcd16x2_printf("%02d", scaledValuePB);
//  lcd16x2_printf(" C:");
//  lcd16x2_printf("%02d", scaledValuePC);
}
 80016a0:	e007      	b.n	80016b2 <Update_Lcd+0x2a>
		Display_Effect("Distortion");
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <Update_Lcd+0x38>)
 80016a4:	f000 f810 	bl	80016c8 <Display_Effect>
		break;
 80016a8:	e003      	b.n	80016b2 <Update_Lcd+0x2a>
		Display_Effect("Delay");
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <Update_Lcd+0x3c>)
 80016ac:	f000 f80c 	bl	80016c8 <Display_Effect>
		break;
 80016b0:	bf00      	nop
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000be 	.word	0x200000be
 80016bc:	200000bc 	.word	0x200000bc
 80016c0:	080046d8 	.word	0x080046d8
 80016c4:	080046e4 	.word	0x080046e4

080016c8 <Display_Effect>:

void Display_Effect(char * name)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	lcd16x2_1stLine();
 80016d0:	f7ff fcd6 	bl	8001080 <lcd16x2_1stLine>
	lcd16x2_printf("  %s", name);
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4812      	ldr	r0, [pc, #72]	; (8001720 <Display_Effect+0x58>)
 80016d8:	f7ff fd14 	bl	8001104 <lcd16x2_printf>
	lcd16x2_2ndLine();
 80016dc:	f7ff fcd8 	bl	8001090 <lcd16x2_2ndLine>
	lcd16x2_printf(" A:");
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <Display_Effect+0x5c>)
 80016e2:	f7ff fd0f 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf("%02d", scaledValuePA);
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <Display_Effect+0x60>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	480f      	ldr	r0, [pc, #60]	; (800172c <Display_Effect+0x64>)
 80016ee:	f7ff fd09 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf(" B:");
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <Display_Effect+0x68>)
 80016f4:	f7ff fd06 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf("%02d", scaledValuePB);
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <Display_Effect+0x6c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <Display_Effect+0x64>)
 8001700:	f7ff fd00 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf(" C:");
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <Display_Effect+0x70>)
 8001706:	f7ff fcfd 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf("%02d", scaledValuePC);
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <Display_Effect+0x74>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <Display_Effect+0x64>)
 8001712:	f7ff fcf7 	bl	8001104 <lcd16x2_printf>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	080046ec 	.word	0x080046ec
 8001724:	080046f4 	.word	0x080046f4
 8001728:	20000124 	.word	0x20000124
 800172c:	080046f8 	.word	0x080046f8
 8001730:	08004700 	.word	0x08004700
 8001734:	20000128 	.word	0x20000128
 8001738:	08004704 	.word	0x08004704
 800173c:	20000120 	.word	0x20000120

08001740 <Lcd_Start_Up>:

void Lcd_Start_Up() {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af04      	add	r7, sp, #16

	lcd16x2_init_4bits(URS_GPIO_Port, URS_Pin, UE_Pin, UD4_GPIO_Port, UD4_Pin, UD5_Pin, UD6_Pin, UD7_Pin);
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	9303      	str	r3, [sp, #12]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <Lcd_Start_Up+0x68>)
 800175c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001760:	2120      	movs	r1, #32
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <Lcd_Start_Up+0x6c>)
 8001764:	f7ff fc00 	bl	8000f68 <lcd16x2_init_4bits>
	lcd16x2_setCursor(0, 0);
 8001768:	2100      	movs	r1, #0
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fc64 	bl	8001038 <lcd16x2_setCursor>
	lcd16x2_cursorShow(0);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fc95 	bl	80010a0 <lcd16x2_cursorShow>
	HAL_Delay(500);
 8001776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800177a:	f000 fb65 	bl	8001e48 <HAL_Delay>
	lcd16x2_clear();
 800177e:	f7ff fcb7 	bl	80010f0 <lcd16x2_clear>
	lcd16x2_printf("     ADEPT");
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <Lcd_Start_Up+0x70>)
 8001784:	f7ff fcbe 	bl	8001104 <lcd16x2_printf>
	HAL_Delay(1500);
 8001788:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800178c:	f000 fb5c 	bl	8001e48 <HAL_Delay>
	lcd16x2_clear();
 8001790:	f7ff fcae 	bl	80010f0 <lcd16x2_clear>
	lcd16x2_setCursor(1, 0);
 8001794:	2100      	movs	r1, #0
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fc4e 	bl	8001038 <lcd16x2_setCursor>
	lcd16x2_printf("    FX System");
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <Lcd_Start_Up+0x74>)
 800179e:	f7ff fcb1 	bl	8001104 <lcd16x2_printf>
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	08004708 	.word	0x08004708
 80017b4:	08004714 	.word	0x08004714

080017b8 <Get_Pot_Params>:

void Get_Pot_Params() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	// Poll ADC1 for PotA
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80017bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c0:	4839      	ldr	r0, [pc, #228]	; (80018a8 <Get_Pot_Params+0xf0>)
 80017c2:	f000 fc7b 	bl	80020bc <HAL_ADC_PollForConversion>
	// Store value reading for PotA
	potValues[0] = HAL_ADC_GetValue(&hadc1);
 80017c6:	4838      	ldr	r0, [pc, #224]	; (80018a8 <Get_Pot_Params+0xf0>)
 80017c8:	f000 fd03 	bl	80021d2 <HAL_ADC_GetValue>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a37      	ldr	r2, [pc, #220]	; (80018ac <Get_Pot_Params+0xf4>)
 80017d0:	6013      	str	r3, [r2, #0]
	// scale value between 0 and 99
	scaledValuePA = potValues[0] * 0.0247821;
 80017d2:	4b36      	ldr	r3, [pc, #216]	; (80018ac <Get_Pot_Params+0xf4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe ffde 	bl	8000798 <__aeabi_ui2d>
 80017dc:	a330      	add	r3, pc, #192	; (adr r3, 80018a0 <Get_Pot_Params+0xe8>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd6d 	bl	80002c0 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff f84d 	bl	800088c <__aeabi_d2uiz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a2e      	ldr	r2, [pc, #184]	; (80018b0 <Get_Pot_Params+0xf8>)
 80017f6:	6013      	str	r3, [r2, #0]
	if(scaledValuePA > 99) {
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <Get_Pot_Params+0xf8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b63      	cmp	r3, #99	; 0x63
 80017fe:	d902      	bls.n	8001806 <Get_Pot_Params+0x4e>
		scaledValuePA = 99;
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <Get_Pot_Params+0xf8>)
 8001802:	2263      	movs	r2, #99	; 0x63
 8001804:	601a      	str	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc2, 1000);
 8001806:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800180a:	482a      	ldr	r0, [pc, #168]	; (80018b4 <Get_Pot_Params+0xfc>)
 800180c:	f000 fc56 	bl	80020bc <HAL_ADC_PollForConversion>
	potValues[1] = HAL_ADC_GetValue(&hadc2);
 8001810:	4828      	ldr	r0, [pc, #160]	; (80018b4 <Get_Pot_Params+0xfc>)
 8001812:	f000 fcde 	bl	80021d2 <HAL_ADC_GetValue>
 8001816:	4603      	mov	r3, r0
 8001818:	4a24      	ldr	r2, [pc, #144]	; (80018ac <Get_Pot_Params+0xf4>)
 800181a:	6053      	str	r3, [r2, #4]
	scaledValuePB = potValues[1] * 0.0247821;
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <Get_Pot_Params+0xf4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe ffb9 	bl	8000798 <__aeabi_ui2d>
 8001826:	a31e      	add	r3, pc, #120	; (adr r3, 80018a0 <Get_Pot_Params+0xe8>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fd48 	bl	80002c0 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f828 	bl	800088c <__aeabi_d2uiz>
 800183c:	4603      	mov	r3, r0
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <Get_Pot_Params+0x100>)
 8001840:	6013      	str	r3, [r2, #0]
	if(scaledValuePB > 99) {
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <Get_Pot_Params+0x100>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b63      	cmp	r3, #99	; 0x63
 8001848:	d902      	bls.n	8001850 <Get_Pot_Params+0x98>
		scaledValuePB = 99;
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <Get_Pot_Params+0x100>)
 800184c:	2263      	movs	r2, #99	; 0x63
 800184e:	601a      	str	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc3, 1000);
 8001850:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <Get_Pot_Params+0x104>)
 8001856:	f000 fc31 	bl	80020bc <HAL_ADC_PollForConversion>
	potValues[2] = HAL_ADC_GetValue(&hadc3);
 800185a:	4818      	ldr	r0, [pc, #96]	; (80018bc <Get_Pot_Params+0x104>)
 800185c:	f000 fcb9 	bl	80021d2 <HAL_ADC_GetValue>
 8001860:	4603      	mov	r3, r0
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <Get_Pot_Params+0xf4>)
 8001864:	6093      	str	r3, [r2, #8]
	scaledValuePC = potValues[2] * 0.0247821;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <Get_Pot_Params+0xf4>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe ff94 	bl	8000798 <__aeabi_ui2d>
 8001870:	a30b      	add	r3, pc, #44	; (adr r3, 80018a0 <Get_Pot_Params+0xe8>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fd23 	bl	80002c0 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f803 	bl	800088c <__aeabi_d2uiz>
 8001886:	4603      	mov	r3, r0
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <Get_Pot_Params+0x108>)
 800188a:	6013      	str	r3, [r2, #0]
	if(scaledValuePC > 99) {
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <Get_Pot_Params+0x108>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b63      	cmp	r3, #99	; 0x63
 8001892:	d902      	bls.n	800189a <Get_Pot_Params+0xe2>
		scaledValuePC = 99;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <Get_Pot_Params+0x108>)
 8001896:	2263      	movs	r2, #99	; 0x63
 8001898:	601a      	str	r2, [r3, #0]
	}
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	941ad498 	.word	0x941ad498
 80018a4:	3f99607a 	.word	0x3f99607a
 80018a8:	2000012c 	.word	0x2000012c
 80018ac:	20000114 	.word	0x20000114
 80018b0:	20000124 	.word	0x20000124
 80018b4:	200000cc 	.word	0x200000cc
 80018b8:	20000128 	.word	0x20000128
 80018bc:	20000174 	.word	0x20000174
 80018c0:	20000120 	.word	0x20000120

080018c4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_TIM_IC_CaptureCallback+0x44>)
 80018d4:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_TIM_IC_CaptureCallback+0x44>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_TIM_IC_CaptureCallback+0x48>)
 80018de:	801a      	strh	r2, [r3, #0]
	count /= 4;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_TIM_IC_CaptureCallback+0x48>)
 80018e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da00      	bge.n	80018ec <HAL_TIM_IC_CaptureCallback+0x28>
 80018ea:	3303      	adds	r3, #3
 80018ec:	109b      	asrs	r3, r3, #2
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_TIM_IC_CaptureCallback+0x48>)
 80018f2:	801a      	strh	r2, [r3, #0]
	Update_Encoder_State(count);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_TIM_IC_CaptureCallback+0x48>)
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f808 	bl	8001910 <Update_Encoder_State>

}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200000b4 	.word	0x200000b4
 800190c:	200000b8 	.word	0x200000b8

08001910 <Update_Encoder_State>:

void Update_Encoder_State(int16_t currentState)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
	// Case 1: currentState > lastState, we moved one to right (down)
	if (currentState > state)
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <Update_Encoder_State+0x74>)
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001924:	429a      	cmp	r2, r3
 8001926:	dd11      	ble.n	800194c <Update_Encoder_State+0x3c>
	{
		// Update position
		position++;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <Update_Encoder_State+0x78>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	b29b      	uxth	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <Update_Encoder_State+0x78>)
 8001938:	801a      	strh	r2, [r3, #0]
		Update_Position();
 800193a:	f000 f829 	bl	8001990 <Update_Position>
		clear_flag = true;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <Update_Encoder_State+0x7c>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
		// Update state
		state = currentState;
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <Update_Encoder_State+0x74>)
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	8013      	strh	r3, [r2, #0]
		Update_Position();
		clear_flag = true;
		// Update state
		state = currentState;
	}
}
 800194a:	e017      	b.n	800197c <Update_Encoder_State+0x6c>
	else if (currentState < state)
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <Update_Encoder_State+0x74>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001956:	429a      	cmp	r2, r3
 8001958:	da10      	bge.n	800197c <Update_Encoder_State+0x6c>
		position--;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <Update_Encoder_State+0x78>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	b29b      	uxth	r3, r3
 8001962:	3b01      	subs	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21a      	sxth	r2, r3
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <Update_Encoder_State+0x78>)
 800196a:	801a      	strh	r2, [r3, #0]
		Update_Position();
 800196c:	f000 f810 	bl	8001990 <Update_Position>
		clear_flag = true;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <Update_Encoder_State+0x7c>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
		state = currentState;
 8001976:	4a03      	ldr	r2, [pc, #12]	; (8001984 <Update_Encoder_State+0x74>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	8013      	strh	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000ba 	.word	0x200000ba
 8001988:	200000bc 	.word	0x200000bc
 800198c:	200000be 	.word	0x200000be

08001990 <Update_Position>:

void Update_Position()
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	if (position < 0)
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <Update_Position+0x3c>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da02      	bge.n	80019a4 <Update_Position+0x14>
		position = 0;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <Update_Position+0x3c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]

	position %= NUM_EFFECTS;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <Update_Position+0x3c>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <Update_Position+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fb92 f1f3 	sdiv	r1, r2, r3
 80019b4:	fb03 f301 	mul.w	r3, r3, r1
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <Update_Position+0x3c>)
 80019be:	801a      	strh	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200000bc 	.word	0x200000bc
 80019d0:	20000004 	.word	0x20000004

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f000 fee2 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_ADC_MspInit+0x134>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d128      	bne.n	8001aa4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a43      	ldr	r2, [pc, #268]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	623b      	str	r3, [r7, #32]
 8001a6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = PotA_Pin;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PotA_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4833      	ldr	r0, [pc, #204]	; (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001a9e:	f000 fee5 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001aa2:	e05a      	b.n	8001b5a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_ADC_MspInit+0x140>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d128      	bne.n	8001b00 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PotB_Pin;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PotB_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	4619      	mov	r1, r3
 8001af8:	481c      	ldr	r0, [pc, #112]	; (8001b6c <HAL_ADC_MspInit+0x13c>)
 8001afa:	f000 feb7 	bl	800286c <HAL_GPIO_Init>
}
 8001afe:	e02c      	b.n	8001b5a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_ADC_MspInit+0x144>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d127      	bne.n	8001b5a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_ADC_MspInit+0x138>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b42:	2308      	movs	r3, #8
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b52:	4619      	mov	r1, r3
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <HAL_ADC_MspInit+0x148>)
 8001b56:	f000 fe89 	bl	800286c <HAL_GPIO_Init>
}
 8001b5a:	bf00      	nop
 8001b5c:	3738      	adds	r7, #56	; 0x38
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40012000 	.word	0x40012000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40012100 	.word	0x40012100
 8001b74:	40012200 	.word	0x40012200
 8001b78:	40020800 	.word	0x40020800

08001b7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9c:	d134      	bne.n	8001c08 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4808      	ldr	r0, [pc, #32]	; (8001c14 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bf4:	f000 fe3a 	bl	800286c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f000 fdfe 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c02:	201c      	movs	r0, #28
 8001c04:	f000 fe17 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c64:	f000 f8d0 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM2_IRQHandler+0x10>)
 8001c72:	f001 fe3f 	bl	80038f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200001bc 	.word	0x200001bc

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f002 f8a6 	bl	8003e00 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20020000 	.word	0x20020000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	200000c0 	.word	0x200000c0
 8001ce8:	20000218 	.word	0x20000218

08001cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <SystemInit+0x20>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <SystemInit+0x20>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d2c:	4c0b      	ldr	r4, [pc, #44]	; (8001d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d3a:	f7ff ffd7 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f002 f865 	bl	8003e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7ff fa0f 	bl	8001164 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d54:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 8001d58:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d5c:	20000218 	.word	0x20000218

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_Init+0x40>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_Init+0x40>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_Init+0x40>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 fd2b 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f808 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fe22 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fd43 	bl	8002852 <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 fd0b 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000010 	.word	0x20000010
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x20>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x24>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_IncTick+0x24>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000010 	.word	0x20000010
 8001e2c:	20000204 	.word	0x20000204

08001e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return uwTick;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_GetTick+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000204 	.word	0x20000204

08001e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff ffee 	bl	8001e30 <HAL_GetTick>
 8001e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d005      	beq.n	8001e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_Delay+0x44>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6e:	bf00      	nop
 8001e70:	f7ff ffde 	bl	8001e30 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f7      	bhi.n	8001e70 <HAL_Delay+0x28>
  {
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000010 	.word	0x20000010

08001e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e033      	b.n	8001f0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fdbe 	bl	8001a30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed6:	f023 0302 	bic.w	r3, r3, #2
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fab4 	bl	8002450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
 8001efe:	e001      	b.n	8001f04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Start+0x1a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0b2      	b.n	8002098 <HAL_ADC_Start+0x180>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d018      	beq.n	8001f7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <HAL_ADC_Start+0x18c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_ADC_Start+0x190>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9a      	lsrs	r2, r3, #18
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f6c:	e002      	b.n	8001f74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d17a      	bne.n	800207e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc6:	d106      	bne.n	8001fd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f023 0206 	bic.w	r2, r3, #6
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe4:	4b31      	ldr	r3, [pc, #196]	; (80020ac <HAL_ADC_Start+0x194>)
 8001fe6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ff0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d12a      	bne.n	8002054 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2b      	ldr	r2, [pc, #172]	; (80020b0 <HAL_ADC_Start+0x198>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d015      	beq.n	8002034 <HAL_ADC_Start+0x11c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_ADC_Start+0x19c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d105      	bne.n	800201e <HAL_ADC_Start+0x106>
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_ADC_Start+0x194>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_ADC_Start+0x1a0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d136      	bne.n	8002096 <HAL_ADC_Start+0x17e>
 8002028:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_ADC_Start+0x194>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d130      	bne.n	8002096 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d129      	bne.n	8002096 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	e020      	b.n	8002096 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_ADC_Start+0x198>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11b      	bne.n	8002096 <HAL_ADC_Start+0x17e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d114      	bne.n	8002096 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e00b      	b.n	8002096 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	20000008 	.word	0x20000008
 80020a8:	431bde83 	.word	0x431bde83
 80020ac:	40012300 	.word	0x40012300
 80020b0:	40012000 	.word	0x40012000
 80020b4:	40012100 	.word	0x40012100
 80020b8:	40012200 	.word	0x40012200

080020bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d8:	d113      	bne.n	8002102 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e8:	d10b      	bne.n	8002102 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e063      	b.n	80021ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002102:	f7ff fe95 	bl	8001e30 <HAL_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002108:	e021      	b.n	800214e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d01d      	beq.n	800214e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_ADC_PollForConversion+0x6c>
 8002118:	f7ff fe8a 	bl	8001e30 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d212      	bcs.n	800214e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d00b      	beq.n	800214e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f043 0204 	orr.w	r2, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e03d      	b.n	80021ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	d1d6      	bne.n	800210a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0212 	mvn.w	r2, #18
 8002164:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d123      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d11f      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d111      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1c>
 8002204:	2302      	movs	r3, #2
 8002206:	e113      	b.n	8002430 <HAL_ADC_ConfigChannel+0x244>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d925      	bls.n	8002264 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68d9      	ldr	r1, [r3, #12]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	3b1e      	subs	r3, #30
 800222e:	2207      	movs	r2, #7
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43da      	mvns	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	400a      	ands	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68d9      	ldr	r1, [r3, #12]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	4603      	mov	r3, r0
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4403      	add	r3, r0
 8002256:	3b1e      	subs	r3, #30
 8002258:	409a      	lsls	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	e022      	b.n	80022aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	2207      	movs	r2, #7
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	400a      	ands	r2, r1
 8002286:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6919      	ldr	r1, [r3, #16]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	4603      	mov	r3, r0
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4403      	add	r3, r0
 80022a0:	409a      	lsls	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d824      	bhi.n	80022fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b05      	subs	r3, #5
 80022c4:	221f      	movs	r2, #31
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	400a      	ands	r2, r1
 80022d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4618      	mov	r0, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b05      	subs	r3, #5
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
 80022fa:	e04c      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	d824      	bhi.n	800234e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	3b23      	subs	r3, #35	; 0x23
 8002316:	221f      	movs	r2, #31
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43da      	mvns	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	400a      	ands	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b23      	subs	r3, #35	; 0x23
 8002340:	fa00 f203 	lsl.w	r2, r0, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
 800234c:	e023      	b.n	8002396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b41      	subs	r3, #65	; 0x41
 8002360:	221f      	movs	r2, #31
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	400a      	ands	r2, r1
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b41      	subs	r3, #65	; 0x41
 800238a:	fa00 f203 	lsl.w	r2, r0, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_ADC_ConfigChannel+0x250>)
 8002398:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a28      	ldr	r2, [pc, #160]	; (8002440 <HAL_ADC_ConfigChannel+0x254>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d10f      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1d8>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b12      	cmp	r3, #18
 80023aa:	d10b      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_ADC_ConfigChannel+0x254>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d12b      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x23a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <HAL_ADC_ConfigChannel+0x258>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x1f4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d122      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_ADC_ConfigChannel+0x258>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d111      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_ADC_ConfigChannel+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <HAL_ADC_ConfigChannel+0x260>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	0c9a      	lsrs	r2, r3, #18
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002418:	e002      	b.n	8002420 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40012300 	.word	0x40012300
 8002440:	40012000 	.word	0x40012000
 8002444:	10000012 	.word	0x10000012
 8002448:	20000008 	.word	0x20000008
 800244c:	431bde83 	.word	0x431bde83

08002450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <ADC_Init+0x1f0>)
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	021a      	lsls	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <ADC_Init+0x1f4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e00f      	b.n	800254e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800254c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0202 	bic.w	r2, r2, #2
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7e1b      	ldrb	r3, [r3, #24]
 8002568:	005a      	lsls	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800259a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	3b01      	subs	r3, #1
 80025a8:	035a      	lsls	r2, r3, #13
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	e007      	b.n	80025c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	3b01      	subs	r3, #1
 80025e0:	051a      	lsls	r2, r3, #20
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002606:	025a      	lsls	r2, r3, #9
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	029a      	lsls	r2, r3, #10
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	0f000001 	.word	0x0f000001

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	; (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff29 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff3e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff8e 	bl	800273c <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5d 	bl	80026e8 <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff31 	bl	80026ac <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	e165      	b.n	8002b54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 8154 	bne.w	8002b4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d005      	beq.n	80028be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d130      	bne.n	8002920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 0201 	and.w	r2, r3, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d017      	beq.n	800295c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2203      	movs	r2, #3
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d123      	bne.n	80029b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	08da      	lsrs	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3208      	adds	r2, #8
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	08da      	lsrs	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3208      	adds	r2, #8
 80029aa:	69b9      	ldr	r1, [r7, #24]
 80029ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0203 	and.w	r2, r3, #3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80ae 	beq.w	8002b4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_GPIO_Init+0x300>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_GPIO_Init+0x300>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b5a      	ldr	r3, [pc, #360]	; (8002b6c <HAL_GPIO_Init+0x300>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0e:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <HAL_GPIO_Init+0x308>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d025      	beq.n	8002a86 <HAL_GPIO_Init+0x21a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4e      	ldr	r2, [pc, #312]	; (8002b78 <HAL_GPIO_Init+0x30c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01f      	beq.n	8002a82 <HAL_GPIO_Init+0x216>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4d      	ldr	r2, [pc, #308]	; (8002b7c <HAL_GPIO_Init+0x310>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_GPIO_Init+0x212>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4c      	ldr	r2, [pc, #304]	; (8002b80 <HAL_GPIO_Init+0x314>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0x20e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_GPIO_Init+0x318>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00d      	beq.n	8002a76 <HAL_GPIO_Init+0x20a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <HAL_GPIO_Init+0x31c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a49      	ldr	r2, [pc, #292]	; (8002b8c <HAL_GPIO_Init+0x320>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_GPIO_Init+0x202>
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x21c>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_GPIO_Init+0x304>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aca:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f ae96 	bls.w	8002888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40021800 	.word	0x40021800
 8002b90:	40013c00 	.word	0x40013c00

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0cc      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d90c      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b8      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	494d      	ldr	r1, [pc, #308]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d044      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d119      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e067      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4934      	ldr	r1, [pc, #208]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7ff f8ba 	bl	8001e30 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7ff f8b6 	bl	8001e30 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 020c 	and.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1eb      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d20c      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e032      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4916      	ldr	r1, [pc, #88]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	490e      	ldr	r1, [pc, #56]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4e:	f000 f82d 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d52:	4602      	mov	r2, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	490a      	ldr	r1, [pc, #40]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	5ccb      	ldrb	r3, [r1, r3]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f81a 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023c00 	.word	0x40023c00
 8002d84:	40023800 	.word	0x40023800
 8002d88:	08004724 	.word	0x08004724
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000008 	.word	0x20000008

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b088      	sub	sp, #32
 8002db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc8:	4bce      	ldr	r3, [pc, #824]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	f200 818d 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x344>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <HAL_RCC_GetSysClockFreq+0x30>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	080030f1 	.word	0x080030f1
 8002de4:	080030f1 	.word	0x080030f1
 8002de8:	080030f1 	.word	0x080030f1
 8002dec:	08002e17 	.word	0x08002e17
 8002df0:	080030f1 	.word	0x080030f1
 8002df4:	080030f1 	.word	0x080030f1
 8002df8:	080030f1 	.word	0x080030f1
 8002dfc:	08002e1d 	.word	0x08002e1d
 8002e00:	080030f1 	.word	0x080030f1
 8002e04:	080030f1 	.word	0x080030f1
 8002e08:	080030f1 	.word	0x080030f1
 8002e0c:	08002f91 	.word	0x08002f91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e10:	4bbd      	ldr	r3, [pc, #756]	; (8003108 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e12:	61bb      	str	r3, [r7, #24]
       break;
 8002e14:	e16f      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e16:	4bbd      	ldr	r3, [pc, #756]	; (800310c <HAL_RCC_GetSysClockFreq+0x360>)
 8002e18:	61bb      	str	r3, [r7, #24]
      break;
 8002e1a:	e16c      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e1c:	4bb9      	ldr	r3, [pc, #740]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e24:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e26:	4bb7      	ldr	r3, [pc, #732]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d053      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e32:	4bb4      	ldr	r3, [pc, #720]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	ea02 0400 	and.w	r4, r2, r0
 8002e4a:	603c      	str	r4, [r7, #0]
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e54:	4620      	mov	r0, r4
 8002e56:	4629      	mov	r1, r5
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	014b      	lsls	r3, r1, #5
 8002e62:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e66:	0142      	lsls	r2, r0, #5
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4623      	mov	r3, r4
 8002e6e:	1ac0      	subs	r0, r0, r3
 8002e70:	462b      	mov	r3, r5
 8002e72:	eb61 0103 	sbc.w	r1, r1, r3
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e84:	0182      	lsls	r2, r0, #6
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8c:	f04f 0000 	mov.w	r0, #0
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	00d9      	lsls	r1, r3, #3
 8002e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e9a:	00d0      	lsls	r0, r2, #3
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	1852      	adds	r2, r2, r1
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	eb43 0101 	adc.w	r1, r3, r1
 8002eaa:	460b      	mov	r3, r1
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0259      	lsls	r1, r3, #9
 8002eb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eba:	0250      	lsls	r0, r2, #9
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	f7fd fcfe 	bl	80008cc <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	e04c      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eda:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	ea02 0a00 	and.w	sl, r2, r0
 8002ef2:	ea03 0b01 	and.w	fp, r3, r1
 8002ef6:	4650      	mov	r0, sl
 8002ef8:	4659      	mov	r1, fp
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	014b      	lsls	r3, r1, #5
 8002f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f08:	0142      	lsls	r2, r0, #5
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	ebb0 000a 	subs.w	r0, r0, sl
 8002f12:	eb61 010b 	sbc.w	r1, r1, fp
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f24:	0182      	lsls	r2, r0, #6
 8002f26:	1a12      	subs	r2, r2, r0
 8002f28:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2c:	f04f 0000 	mov.w	r0, #0
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	00d9      	lsls	r1, r3, #3
 8002f36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f3a:	00d0      	lsls	r0, r2, #3
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	eb12 020a 	adds.w	r2, r2, sl
 8002f44:	eb43 030b 	adc.w	r3, r3, fp
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	0299      	lsls	r1, r3, #10
 8002f52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f56:	0290      	lsls	r0, r2, #10
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f7fd fcb0 	bl	80008cc <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f74:	4b63      	ldr	r3, [pc, #396]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	61bb      	str	r3, [r7, #24]
      break;
 8002f8e:	e0b2      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d04d      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b57      	ldr	r3, [pc, #348]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	461a      	mov	r2, r3
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	ea02 0800 	and.w	r8, r2, r0
 8002fbe:	ea03 0901 	and.w	r9, r3, r1
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	014b      	lsls	r3, r1, #5
 8002fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd4:	0142      	lsls	r2, r0, #5
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	ebb0 0008 	subs.w	r0, r0, r8
 8002fde:	eb61 0109 	sbc.w	r1, r1, r9
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	018b      	lsls	r3, r1, #6
 8002fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff0:	0182      	lsls	r2, r0, #6
 8002ff2:	1a12      	subs	r2, r2, r0
 8002ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff8:	f04f 0000 	mov.w	r0, #0
 8002ffc:	f04f 0100 	mov.w	r1, #0
 8003000:	00d9      	lsls	r1, r3, #3
 8003002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003006:	00d0      	lsls	r0, r2, #3
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	eb12 0208 	adds.w	r2, r2, r8
 8003010:	eb43 0309 	adc.w	r3, r3, r9
 8003014:	f04f 0000 	mov.w	r0, #0
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	0259      	lsls	r1, r3, #9
 800301e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003022:	0250      	lsls	r0, r2, #9
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	461a      	mov	r2, r3
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	f7fd fc4a 	bl	80008cc <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e04a      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	461a      	mov	r2, r3
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	ea02 0400 	and.w	r4, r2, r0
 800305a:	ea03 0501 	and.w	r5, r3, r1
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	014b      	lsls	r3, r1, #5
 800306c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003070:	0142      	lsls	r2, r0, #5
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	1b00      	subs	r0, r0, r4
 8003078:	eb61 0105 	sbc.w	r1, r1, r5
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	018b      	lsls	r3, r1, #6
 8003086:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800308a:	0182      	lsls	r2, r0, #6
 800308c:	1a12      	subs	r2, r2, r0
 800308e:	eb63 0301 	sbc.w	r3, r3, r1
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	00d9      	lsls	r1, r3, #3
 800309c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a0:	00d0      	lsls	r0, r2, #3
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	1912      	adds	r2, r2, r4
 80030a8:	eb45 0303 	adc.w	r3, r5, r3
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	0299      	lsls	r1, r3, #10
 80030b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ba:	0290      	lsls	r0, r2, #10
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f7fd fbfe 	bl	80008cc <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0f1b      	lsrs	r3, r3, #28
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	61bb      	str	r3, [r7, #24]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030f2:	61bb      	str	r3, [r7, #24]
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	69bb      	ldr	r3, [r7, #24]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	007a1200 	.word	0x007a1200

08003110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e28d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8083 	beq.w	8003236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003130:	4b94      	ldr	r3, [pc, #592]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d019      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800313c:	4b91      	ldr	r3, [pc, #580]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003144:	2b08      	cmp	r3, #8
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003148:	4b8e      	ldr	r3, [pc, #568]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b84      	ldr	r3, [pc, #528]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x124>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e25a      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x90>
 8003192:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a7b      	ldr	r2, [pc, #492]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xb4>
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xcc>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fe24 	bl	8001e30 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe fe20 	bl	8001e30 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e21f      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xdc>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fe10 	bl	8001e30 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fe0c 	bl	8001e30 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e20b      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b57      	ldr	r3, [pc, #348]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x104>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d06f      	beq.n	8003322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003242:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800324e:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1d3      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCC_OscConfig+0x278>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fdb9 	bl	8001e30 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fdb5 	bl	8001e30 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1b4      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x278>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fd98 	bl	8001e30 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe fd94 	bl	8001e30 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e193      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0x27c>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fd78 	bl	8001e30 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe fd74 	bl	8001e30 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e173      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x234>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_OscConfig+0x27c>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fd61 	bl	8001e30 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe fd5d 	bl	8001e30 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e15c      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b83      	ldr	r3, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7f      	ldr	r3, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a7e      	ldr	r2, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b7c      	ldr	r3, [pc, #496]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a75      	ldr	r2, [pc, #468]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fd1d 	bl	8001e30 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe fd19 	bl	8001e30 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e118      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x4b0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x31e>
 8003420:	4b66      	ldr	r3, [pc, #408]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a65      	ldr	r2, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x340>
 8003436:	4b61      	ldr	r3, [pc, #388]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a60      	ldr	r2, [pc, #384]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b5e      	ldr	r3, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x358>
 8003450:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a59      	ldr	r2, [pc, #356]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	4b57      	ldr	r3, [pc, #348]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fcde 	bl	8001e30 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fcda 	bl	8001e30 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0d7      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x368>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe fcc8 	bl	8001e30 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fcc4 	bl	8001e30 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0c1      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ad 	beq.w	800363c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d060      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d145      	bne.n	8003582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fc98 	bl	8001e30 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fc94 	bl	8001e30 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e093      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	071b      	lsls	r3, r3, #28
 800354e:	491b      	ldr	r1, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fc69 	bl	8001e30 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe fc65 	bl	8001e30 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e064      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x452>
 8003580:	e05c      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x4b4>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe fc52 	bl	8001e30 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe fc4e 	bl	8001e30 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04d      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
 80035ae:	e045      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e040      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c8:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <HAL_RCC_OscConfig+0x538>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d030      	beq.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d129      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d122      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d119      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d10f      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e097      	b.n	8003790 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fe fa81 	bl	8001b7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003690:	f023 0307 	bic.w	r3, r3, #7
 8003694:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 fa57 	bl	8003b54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	4313      	orrs	r3, r2
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036ec:	f023 030c 	bic.w	r3, r3, #12
 80036f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	4313      	orrs	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	011a      	lsls	r2, r3, #4
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	031b      	lsls	r3, r3, #12
 800371c:	4313      	orrs	r3, r2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4313      	orrs	r3, r2
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d110      	bne.n	80037ea <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037ce:	7b7b      	ldrb	r3, [r7, #13]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e089      	b.n	80038ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e8:	e031      	b.n	800384e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d110      	bne.n	8003812 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d102      	bne.n	80037fc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f6:	7b3b      	ldrb	r3, [r7, #12]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e075      	b.n	80038ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003810:	e01d      	b.n	800384e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d108      	bne.n	800382a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800381e:	7b7b      	ldrb	r3, [r7, #13]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003824:	7b3b      	ldrb	r3, [r7, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e05e      	b.n	80038ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d010      	beq.n	800387c <HAL_TIM_Encoder_Start_IT+0xe4>
 800385a:	e01f      	b.n	800389c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2201      	movs	r2, #1
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa15 	bl	8003c94 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0202 	orr.w	r2, r2, #2
 8003878:	60da      	str	r2, [r3, #12]
      break;
 800387a:	e02e      	b.n	80038da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2201      	movs	r2, #1
 8003882:	2104      	movs	r1, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fa05 	bl	8003c94 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0204 	orr.w	r2, r2, #4
 8003898:	60da      	str	r2, [r3, #12]
      break;
 800389a:	e01e      	b.n	80038da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f9f5 	bl	8003c94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	2104      	movs	r1, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f9ee 	bl	8003c94 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0202 	orr.w	r2, r2, #2
 80038c6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0204 	orr.w	r2, r2, #4
 80038d6:	60da      	str	r2, [r3, #12]
      break;
 80038d8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0202 	mvn.w	r2, #2
 8003920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd ffc4 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8ea 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8f1 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0204 	mvn.w	r2, #4
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd ff9a 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8c0 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8c7 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d122      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d11b      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0208 	mvn.w	r2, #8
 80039c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2204      	movs	r2, #4
 80039ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd ff70 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80039e4:	e005      	b.n	80039f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f896 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f89d 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d122      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d11b      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0210 	mvn.w	r2, #16
 8003a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2208      	movs	r2, #8
 8003a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd ff46 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f86c 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f873 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d107      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0201 	mvn.w	r2, #1
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f846 	bl	8003b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	d10e      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d107      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9a4 	bl	8003dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d107      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f838 	bl	8003b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d10e      	bne.n	8003afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d107      	bne.n	8003afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0220 	mvn.w	r2, #32
 8003af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f96e 	bl	8003dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <TIM_Base_SetConfig+0x114>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b72:	d00f      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3d      	ldr	r2, [pc, #244]	; (8003c6c <TIM_Base_SetConfig+0x118>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <TIM_Base_SetConfig+0x11c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <TIM_Base_SetConfig+0x120>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_Base_SetConfig+0x40>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3a      	ldr	r2, [pc, #232]	; (8003c78 <TIM_Base_SetConfig+0x124>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d108      	bne.n	8003ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2f      	ldr	r2, [pc, #188]	; (8003c68 <TIM_Base_SetConfig+0x114>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02b      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d027      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <TIM_Base_SetConfig+0x118>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d023      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <TIM_Base_SetConfig+0x11c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01f      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <TIM_Base_SetConfig+0x120>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01b      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <TIM_Base_SetConfig+0x124>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d017      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <TIM_Base_SetConfig+0x128>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <TIM_Base_SetConfig+0x12c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00f      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a26      	ldr	r2, [pc, #152]	; (8003c84 <TIM_Base_SetConfig+0x130>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <TIM_Base_SetConfig+0x134>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <TIM_Base_SetConfig+0x138>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_Base_SetConfig+0xb2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <TIM_Base_SetConfig+0x13c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d108      	bne.n	8003c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <TIM_Base_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0xf8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <TIM_Base_SetConfig+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	615a      	str	r2, [r3, #20]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	40000c00 	.word	0x40000c00
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400
 8003c84:	40014800 	.word	0x40014800
 8003c88:	40001800 	.word	0x40001800
 8003c8c:	40001c00 	.word	0x40001c00
 8003c90:	40002000 	.word	0x40002000

08003c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e05a      	b.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d022      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d01d      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d018      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10c      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40010400 	.word	0x40010400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40001800 	.word	0x40001800

08003dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <__errno>:
 8003e00:	4b01      	ldr	r3, [pc, #4]	; (8003e08 <__errno+0x8>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000014 	.word	0x20000014

08003e0c <__libc_init_array>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	4d0d      	ldr	r5, [pc, #52]	; (8003e44 <__libc_init_array+0x38>)
 8003e10:	4c0d      	ldr	r4, [pc, #52]	; (8003e48 <__libc_init_array+0x3c>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	2600      	movs	r6, #0
 8003e18:	42a6      	cmp	r6, r4
 8003e1a:	d109      	bne.n	8003e30 <__libc_init_array+0x24>
 8003e1c:	4d0b      	ldr	r5, [pc, #44]	; (8003e4c <__libc_init_array+0x40>)
 8003e1e:	4c0c      	ldr	r4, [pc, #48]	; (8003e50 <__libc_init_array+0x44>)
 8003e20:	f000 fc4e 	bl	80046c0 <_init>
 8003e24:	1b64      	subs	r4, r4, r5
 8003e26:	10a4      	asrs	r4, r4, #2
 8003e28:	2600      	movs	r6, #0
 8003e2a:	42a6      	cmp	r6, r4
 8003e2c:	d105      	bne.n	8003e3a <__libc_init_array+0x2e>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e34:	4798      	blx	r3
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7ee      	b.n	8003e18 <__libc_init_array+0xc>
 8003e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3e:	4798      	blx	r3
 8003e40:	3601      	adds	r6, #1
 8003e42:	e7f2      	b.n	8003e2a <__libc_init_array+0x1e>
 8003e44:	08004770 	.word	0x08004770
 8003e48:	08004770 	.word	0x08004770
 8003e4c:	08004770 	.word	0x08004770
 8003e50:	08004774 	.word	0x08004774

08003e54 <memset>:
 8003e54:	4402      	add	r2, r0
 8003e56:	4603      	mov	r3, r0
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <memset+0xa>
 8003e5c:	4770      	bx	lr
 8003e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e62:	e7f9      	b.n	8003e58 <memset+0x4>

08003e64 <_vsiprintf_r>:
 8003e64:	b500      	push	{lr}
 8003e66:	b09b      	sub	sp, #108	; 0x6c
 8003e68:	9100      	str	r1, [sp, #0]
 8003e6a:	9104      	str	r1, [sp, #16]
 8003e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e70:	9105      	str	r1, [sp, #20]
 8003e72:	9102      	str	r1, [sp, #8]
 8003e74:	4905      	ldr	r1, [pc, #20]	; (8003e8c <_vsiprintf_r+0x28>)
 8003e76:	9103      	str	r1, [sp, #12]
 8003e78:	4669      	mov	r1, sp
 8003e7a:	f000 f86f 	bl	8003f5c <_svfiprintf_r>
 8003e7e:	9b00      	ldr	r3, [sp, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	b01b      	add	sp, #108	; 0x6c
 8003e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e8a:	bf00      	nop
 8003e8c:	ffff0208 	.word	0xffff0208

08003e90 <vsiprintf>:
 8003e90:	4613      	mov	r3, r2
 8003e92:	460a      	mov	r2, r1
 8003e94:	4601      	mov	r1, r0
 8003e96:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <vsiprintf+0x10>)
 8003e98:	6800      	ldr	r0, [r0, #0]
 8003e9a:	f7ff bfe3 	b.w	8003e64 <_vsiprintf_r>
 8003e9e:	bf00      	nop
 8003ea0:	20000014 	.word	0x20000014

08003ea4 <__ssputs_r>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	688e      	ldr	r6, [r1, #8]
 8003eaa:	429e      	cmp	r6, r3
 8003eac:	4682      	mov	sl, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4690      	mov	r8, r2
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	d838      	bhi.n	8003f28 <__ssputs_r+0x84>
 8003eb6:	898a      	ldrh	r2, [r1, #12]
 8003eb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ebc:	d032      	beq.n	8003f24 <__ssputs_r+0x80>
 8003ebe:	6825      	ldr	r5, [r4, #0]
 8003ec0:	6909      	ldr	r1, [r1, #16]
 8003ec2:	eba5 0901 	sub.w	r9, r5, r1
 8003ec6:	6965      	ldr	r5, [r4, #20]
 8003ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	444b      	add	r3, r9
 8003ed4:	106d      	asrs	r5, r5, #1
 8003ed6:	429d      	cmp	r5, r3
 8003ed8:	bf38      	it	cc
 8003eda:	461d      	movcc	r5, r3
 8003edc:	0553      	lsls	r3, r2, #21
 8003ede:	d531      	bpl.n	8003f44 <__ssputs_r+0xa0>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	f000 fb47 	bl	8004574 <_malloc_r>
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	b950      	cbnz	r0, 8003f00 <__ssputs_r+0x5c>
 8003eea:	230c      	movs	r3, #12
 8003eec:	f8ca 3000 	str.w	r3, [sl]
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f00:	6921      	ldr	r1, [r4, #16]
 8003f02:	464a      	mov	r2, r9
 8003f04:	f000 fabe 	bl	8004484 <memcpy>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	6126      	str	r6, [r4, #16]
 8003f16:	6165      	str	r5, [r4, #20]
 8003f18:	444e      	add	r6, r9
 8003f1a:	eba5 0509 	sub.w	r5, r5, r9
 8003f1e:	6026      	str	r6, [r4, #0]
 8003f20:	60a5      	str	r5, [r4, #8]
 8003f22:	463e      	mov	r6, r7
 8003f24:	42be      	cmp	r6, r7
 8003f26:	d900      	bls.n	8003f2a <__ssputs_r+0x86>
 8003f28:	463e      	mov	r6, r7
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	4641      	mov	r1, r8
 8003f30:	f000 fab6 	bl	80044a0 <memmove>
 8003f34:	68a3      	ldr	r3, [r4, #8]
 8003f36:	6822      	ldr	r2, [r4, #0]
 8003f38:	1b9b      	subs	r3, r3, r6
 8003f3a:	4432      	add	r2, r6
 8003f3c:	60a3      	str	r3, [r4, #8]
 8003f3e:	6022      	str	r2, [r4, #0]
 8003f40:	2000      	movs	r0, #0
 8003f42:	e7db      	b.n	8003efc <__ssputs_r+0x58>
 8003f44:	462a      	mov	r2, r5
 8003f46:	f000 fb6f 	bl	8004628 <_realloc_r>
 8003f4a:	4606      	mov	r6, r0
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d1e1      	bne.n	8003f14 <__ssputs_r+0x70>
 8003f50:	6921      	ldr	r1, [r4, #16]
 8003f52:	4650      	mov	r0, sl
 8003f54:	f000 fabe 	bl	80044d4 <_free_r>
 8003f58:	e7c7      	b.n	8003eea <__ssputs_r+0x46>
	...

08003f5c <_svfiprintf_r>:
 8003f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f60:	4698      	mov	r8, r3
 8003f62:	898b      	ldrh	r3, [r1, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	b09d      	sub	sp, #116	; 0x74
 8003f68:	4607      	mov	r7, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	d50e      	bpl.n	8003f8e <_svfiprintf_r+0x32>
 8003f70:	690b      	ldr	r3, [r1, #16]
 8003f72:	b963      	cbnz	r3, 8003f8e <_svfiprintf_r+0x32>
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	f000 fafd 	bl	8004574 <_malloc_r>
 8003f7a:	6028      	str	r0, [r5, #0]
 8003f7c:	6128      	str	r0, [r5, #16]
 8003f7e:	b920      	cbnz	r0, 8003f8a <_svfiprintf_r+0x2e>
 8003f80:	230c      	movs	r3, #12
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	e0d1      	b.n	800412e <_svfiprintf_r+0x1d2>
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	616b      	str	r3, [r5, #20]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9309      	str	r3, [sp, #36]	; 0x24
 8003f92:	2320      	movs	r3, #32
 8003f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f9c:	2330      	movs	r3, #48	; 0x30
 8003f9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004148 <_svfiprintf_r+0x1ec>
 8003fa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fa6:	f04f 0901 	mov.w	r9, #1
 8003faa:	4623      	mov	r3, r4
 8003fac:	469a      	mov	sl, r3
 8003fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fb2:	b10a      	cbz	r2, 8003fb8 <_svfiprintf_r+0x5c>
 8003fb4:	2a25      	cmp	r2, #37	; 0x25
 8003fb6:	d1f9      	bne.n	8003fac <_svfiprintf_r+0x50>
 8003fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003fbc:	d00b      	beq.n	8003fd6 <_svfiprintf_r+0x7a>
 8003fbe:	465b      	mov	r3, fp
 8003fc0:	4622      	mov	r2, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	f7ff ff6d 	bl	8003ea4 <__ssputs_r>
 8003fca:	3001      	adds	r0, #1
 8003fcc:	f000 80aa 	beq.w	8004124 <_svfiprintf_r+0x1c8>
 8003fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd2:	445a      	add	r2, fp
 8003fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80a2 	beq.w	8004124 <_svfiprintf_r+0x1c8>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fea:	f10a 0a01 	add.w	sl, sl, #1
 8003fee:	9304      	str	r3, [sp, #16]
 8003ff0:	9307      	str	r3, [sp, #28]
 8003ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff8:	4654      	mov	r4, sl
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004000:	4851      	ldr	r0, [pc, #324]	; (8004148 <_svfiprintf_r+0x1ec>)
 8004002:	f7fc f90d 	bl	8000220 <memchr>
 8004006:	9a04      	ldr	r2, [sp, #16]
 8004008:	b9d8      	cbnz	r0, 8004042 <_svfiprintf_r+0xe6>
 800400a:	06d0      	lsls	r0, r2, #27
 800400c:	bf44      	itt	mi
 800400e:	2320      	movmi	r3, #32
 8004010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004014:	0711      	lsls	r1, r2, #28
 8004016:	bf44      	itt	mi
 8004018:	232b      	movmi	r3, #43	; 0x2b
 800401a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800401e:	f89a 3000 	ldrb.w	r3, [sl]
 8004022:	2b2a      	cmp	r3, #42	; 0x2a
 8004024:	d015      	beq.n	8004052 <_svfiprintf_r+0xf6>
 8004026:	9a07      	ldr	r2, [sp, #28]
 8004028:	4654      	mov	r4, sl
 800402a:	2000      	movs	r0, #0
 800402c:	f04f 0c0a 	mov.w	ip, #10
 8004030:	4621      	mov	r1, r4
 8004032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004036:	3b30      	subs	r3, #48	; 0x30
 8004038:	2b09      	cmp	r3, #9
 800403a:	d94e      	bls.n	80040da <_svfiprintf_r+0x17e>
 800403c:	b1b0      	cbz	r0, 800406c <_svfiprintf_r+0x110>
 800403e:	9207      	str	r2, [sp, #28]
 8004040:	e014      	b.n	800406c <_svfiprintf_r+0x110>
 8004042:	eba0 0308 	sub.w	r3, r0, r8
 8004046:	fa09 f303 	lsl.w	r3, r9, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	9304      	str	r3, [sp, #16]
 800404e:	46a2      	mov	sl, r4
 8004050:	e7d2      	b.n	8003ff8 <_svfiprintf_r+0x9c>
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	1d19      	adds	r1, r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	9103      	str	r1, [sp, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	bfbb      	ittet	lt
 800405e:	425b      	neglt	r3, r3
 8004060:	f042 0202 	orrlt.w	r2, r2, #2
 8004064:	9307      	strge	r3, [sp, #28]
 8004066:	9307      	strlt	r3, [sp, #28]
 8004068:	bfb8      	it	lt
 800406a:	9204      	strlt	r2, [sp, #16]
 800406c:	7823      	ldrb	r3, [r4, #0]
 800406e:	2b2e      	cmp	r3, #46	; 0x2e
 8004070:	d10c      	bne.n	800408c <_svfiprintf_r+0x130>
 8004072:	7863      	ldrb	r3, [r4, #1]
 8004074:	2b2a      	cmp	r3, #42	; 0x2a
 8004076:	d135      	bne.n	80040e4 <_svfiprintf_r+0x188>
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	9203      	str	r2, [sp, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	bfb8      	it	lt
 8004084:	f04f 33ff 	movlt.w	r3, #4294967295
 8004088:	3402      	adds	r4, #2
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004158 <_svfiprintf_r+0x1fc>
 8004090:	7821      	ldrb	r1, [r4, #0]
 8004092:	2203      	movs	r2, #3
 8004094:	4650      	mov	r0, sl
 8004096:	f7fc f8c3 	bl	8000220 <memchr>
 800409a:	b140      	cbz	r0, 80040ae <_svfiprintf_r+0x152>
 800409c:	2340      	movs	r3, #64	; 0x40
 800409e:	eba0 000a 	sub.w	r0, r0, sl
 80040a2:	fa03 f000 	lsl.w	r0, r3, r0
 80040a6:	9b04      	ldr	r3, [sp, #16]
 80040a8:	4303      	orrs	r3, r0
 80040aa:	3401      	adds	r4, #1
 80040ac:	9304      	str	r3, [sp, #16]
 80040ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b2:	4826      	ldr	r0, [pc, #152]	; (800414c <_svfiprintf_r+0x1f0>)
 80040b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040b8:	2206      	movs	r2, #6
 80040ba:	f7fc f8b1 	bl	8000220 <memchr>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d038      	beq.n	8004134 <_svfiprintf_r+0x1d8>
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <_svfiprintf_r+0x1f4>)
 80040c4:	bb1b      	cbnz	r3, 800410e <_svfiprintf_r+0x1b2>
 80040c6:	9b03      	ldr	r3, [sp, #12]
 80040c8:	3307      	adds	r3, #7
 80040ca:	f023 0307 	bic.w	r3, r3, #7
 80040ce:	3308      	adds	r3, #8
 80040d0:	9303      	str	r3, [sp, #12]
 80040d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d4:	4433      	add	r3, r6
 80040d6:	9309      	str	r3, [sp, #36]	; 0x24
 80040d8:	e767      	b.n	8003faa <_svfiprintf_r+0x4e>
 80040da:	fb0c 3202 	mla	r2, ip, r2, r3
 80040de:	460c      	mov	r4, r1
 80040e0:	2001      	movs	r0, #1
 80040e2:	e7a5      	b.n	8004030 <_svfiprintf_r+0xd4>
 80040e4:	2300      	movs	r3, #0
 80040e6:	3401      	adds	r4, #1
 80040e8:	9305      	str	r3, [sp, #20]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0c0a 	mov.w	ip, #10
 80040f0:	4620      	mov	r0, r4
 80040f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f6:	3a30      	subs	r2, #48	; 0x30
 80040f8:	2a09      	cmp	r2, #9
 80040fa:	d903      	bls.n	8004104 <_svfiprintf_r+0x1a8>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0c5      	beq.n	800408c <_svfiprintf_r+0x130>
 8004100:	9105      	str	r1, [sp, #20]
 8004102:	e7c3      	b.n	800408c <_svfiprintf_r+0x130>
 8004104:	fb0c 2101 	mla	r1, ip, r1, r2
 8004108:	4604      	mov	r4, r0
 800410a:	2301      	movs	r3, #1
 800410c:	e7f0      	b.n	80040f0 <_svfiprintf_r+0x194>
 800410e:	ab03      	add	r3, sp, #12
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	462a      	mov	r2, r5
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <_svfiprintf_r+0x1f8>)
 8004116:	a904      	add	r1, sp, #16
 8004118:	4638      	mov	r0, r7
 800411a:	f3af 8000 	nop.w
 800411e:	1c42      	adds	r2, r0, #1
 8004120:	4606      	mov	r6, r0
 8004122:	d1d6      	bne.n	80040d2 <_svfiprintf_r+0x176>
 8004124:	89ab      	ldrh	r3, [r5, #12]
 8004126:	065b      	lsls	r3, r3, #25
 8004128:	f53f af2c 	bmi.w	8003f84 <_svfiprintf_r+0x28>
 800412c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800412e:	b01d      	add	sp, #116	; 0x74
 8004130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004134:	ab03      	add	r3, sp, #12
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	462a      	mov	r2, r5
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <_svfiprintf_r+0x1f8>)
 800413c:	a904      	add	r1, sp, #16
 800413e:	4638      	mov	r0, r7
 8004140:	f000 f87a 	bl	8004238 <_printf_i>
 8004144:	e7eb      	b.n	800411e <_svfiprintf_r+0x1c2>
 8004146:	bf00      	nop
 8004148:	08004734 	.word	0x08004734
 800414c:	0800473e 	.word	0x0800473e
 8004150:	00000000 	.word	0x00000000
 8004154:	08003ea5 	.word	0x08003ea5
 8004158:	0800473a 	.word	0x0800473a

0800415c <_printf_common>:
 800415c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	4616      	mov	r6, r2
 8004162:	4699      	mov	r9, r3
 8004164:	688a      	ldr	r2, [r1, #8]
 8004166:	690b      	ldr	r3, [r1, #16]
 8004168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800416c:	4293      	cmp	r3, r2
 800416e:	bfb8      	it	lt
 8004170:	4613      	movlt	r3, r2
 8004172:	6033      	str	r3, [r6, #0]
 8004174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004178:	4607      	mov	r7, r0
 800417a:	460c      	mov	r4, r1
 800417c:	b10a      	cbz	r2, 8004182 <_printf_common+0x26>
 800417e:	3301      	adds	r3, #1
 8004180:	6033      	str	r3, [r6, #0]
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	0699      	lsls	r1, r3, #26
 8004186:	bf42      	ittt	mi
 8004188:	6833      	ldrmi	r3, [r6, #0]
 800418a:	3302      	addmi	r3, #2
 800418c:	6033      	strmi	r3, [r6, #0]
 800418e:	6825      	ldr	r5, [r4, #0]
 8004190:	f015 0506 	ands.w	r5, r5, #6
 8004194:	d106      	bne.n	80041a4 <_printf_common+0x48>
 8004196:	f104 0a19 	add.w	sl, r4, #25
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	6832      	ldr	r2, [r6, #0]
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	42ab      	cmp	r3, r5
 80041a2:	dc26      	bgt.n	80041f2 <_printf_common+0x96>
 80041a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041a8:	1e13      	subs	r3, r2, #0
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	bf18      	it	ne
 80041ae:	2301      	movne	r3, #1
 80041b0:	0692      	lsls	r2, r2, #26
 80041b2:	d42b      	bmi.n	800420c <_printf_common+0xb0>
 80041b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b8:	4649      	mov	r1, r9
 80041ba:	4638      	mov	r0, r7
 80041bc:	47c0      	blx	r8
 80041be:	3001      	adds	r0, #1
 80041c0:	d01e      	beq.n	8004200 <_printf_common+0xa4>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	68e5      	ldr	r5, [r4, #12]
 80041c6:	6832      	ldr	r2, [r6, #0]
 80041c8:	f003 0306 	and.w	r3, r3, #6
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	bf08      	it	eq
 80041d0:	1aad      	subeq	r5, r5, r2
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	6922      	ldr	r2, [r4, #16]
 80041d6:	bf0c      	ite	eq
 80041d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041dc:	2500      	movne	r5, #0
 80041de:	4293      	cmp	r3, r2
 80041e0:	bfc4      	itt	gt
 80041e2:	1a9b      	subgt	r3, r3, r2
 80041e4:	18ed      	addgt	r5, r5, r3
 80041e6:	2600      	movs	r6, #0
 80041e8:	341a      	adds	r4, #26
 80041ea:	42b5      	cmp	r5, r6
 80041ec:	d11a      	bne.n	8004224 <_printf_common+0xc8>
 80041ee:	2000      	movs	r0, #0
 80041f0:	e008      	b.n	8004204 <_printf_common+0xa8>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4652      	mov	r2, sl
 80041f6:	4649      	mov	r1, r9
 80041f8:	4638      	mov	r0, r7
 80041fa:	47c0      	blx	r8
 80041fc:	3001      	adds	r0, #1
 80041fe:	d103      	bne.n	8004208 <_printf_common+0xac>
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004208:	3501      	adds	r5, #1
 800420a:	e7c6      	b.n	800419a <_printf_common+0x3e>
 800420c:	18e1      	adds	r1, r4, r3
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	2030      	movs	r0, #48	; 0x30
 8004212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004216:	4422      	add	r2, r4
 8004218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800421c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004220:	3302      	adds	r3, #2
 8004222:	e7c7      	b.n	80041b4 <_printf_common+0x58>
 8004224:	2301      	movs	r3, #1
 8004226:	4622      	mov	r2, r4
 8004228:	4649      	mov	r1, r9
 800422a:	4638      	mov	r0, r7
 800422c:	47c0      	blx	r8
 800422e:	3001      	adds	r0, #1
 8004230:	d0e6      	beq.n	8004200 <_printf_common+0xa4>
 8004232:	3601      	adds	r6, #1
 8004234:	e7d9      	b.n	80041ea <_printf_common+0x8e>
	...

08004238 <_printf_i>:
 8004238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	460c      	mov	r4, r1
 800423e:	4691      	mov	r9, r2
 8004240:	7e27      	ldrb	r7, [r4, #24]
 8004242:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004244:	2f78      	cmp	r7, #120	; 0x78
 8004246:	4680      	mov	r8, r0
 8004248:	469a      	mov	sl, r3
 800424a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800424e:	d807      	bhi.n	8004260 <_printf_i+0x28>
 8004250:	2f62      	cmp	r7, #98	; 0x62
 8004252:	d80a      	bhi.n	800426a <_printf_i+0x32>
 8004254:	2f00      	cmp	r7, #0
 8004256:	f000 80d8 	beq.w	800440a <_printf_i+0x1d2>
 800425a:	2f58      	cmp	r7, #88	; 0x58
 800425c:	f000 80a3 	beq.w	80043a6 <_printf_i+0x16e>
 8004260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004268:	e03a      	b.n	80042e0 <_printf_i+0xa8>
 800426a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800426e:	2b15      	cmp	r3, #21
 8004270:	d8f6      	bhi.n	8004260 <_printf_i+0x28>
 8004272:	a001      	add	r0, pc, #4	; (adr r0, 8004278 <_printf_i+0x40>)
 8004274:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042e5 	.word	0x080042e5
 8004280:	08004261 	.word	0x08004261
 8004284:	08004261 	.word	0x08004261
 8004288:	08004261 	.word	0x08004261
 800428c:	08004261 	.word	0x08004261
 8004290:	080042e5 	.word	0x080042e5
 8004294:	08004261 	.word	0x08004261
 8004298:	08004261 	.word	0x08004261
 800429c:	08004261 	.word	0x08004261
 80042a0:	08004261 	.word	0x08004261
 80042a4:	080043f1 	.word	0x080043f1
 80042a8:	08004315 	.word	0x08004315
 80042ac:	080043d3 	.word	0x080043d3
 80042b0:	08004261 	.word	0x08004261
 80042b4:	08004261 	.word	0x08004261
 80042b8:	08004413 	.word	0x08004413
 80042bc:	08004261 	.word	0x08004261
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004261 	.word	0x08004261
 80042c8:	08004261 	.word	0x08004261
 80042cc:	080043db 	.word	0x080043db
 80042d0:	680b      	ldr	r3, [r1, #0]
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	600a      	str	r2, [r1, #0]
 80042d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0a3      	b.n	800442c <_printf_i+0x1f4>
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	6808      	ldr	r0, [r1, #0]
 80042e8:	062e      	lsls	r6, r5, #24
 80042ea:	f100 0304 	add.w	r3, r0, #4
 80042ee:	d50a      	bpl.n	8004306 <_printf_i+0xce>
 80042f0:	6805      	ldr	r5, [r0, #0]
 80042f2:	600b      	str	r3, [r1, #0]
 80042f4:	2d00      	cmp	r5, #0
 80042f6:	da03      	bge.n	8004300 <_printf_i+0xc8>
 80042f8:	232d      	movs	r3, #45	; 0x2d
 80042fa:	426d      	negs	r5, r5
 80042fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004300:	485e      	ldr	r0, [pc, #376]	; (800447c <_printf_i+0x244>)
 8004302:	230a      	movs	r3, #10
 8004304:	e019      	b.n	800433a <_printf_i+0x102>
 8004306:	f015 0f40 	tst.w	r5, #64	; 0x40
 800430a:	6805      	ldr	r5, [r0, #0]
 800430c:	600b      	str	r3, [r1, #0]
 800430e:	bf18      	it	ne
 8004310:	b22d      	sxthne	r5, r5
 8004312:	e7ef      	b.n	80042f4 <_printf_i+0xbc>
 8004314:	680b      	ldr	r3, [r1, #0]
 8004316:	6825      	ldr	r5, [r4, #0]
 8004318:	1d18      	adds	r0, r3, #4
 800431a:	6008      	str	r0, [r1, #0]
 800431c:	0628      	lsls	r0, r5, #24
 800431e:	d501      	bpl.n	8004324 <_printf_i+0xec>
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	e002      	b.n	800432a <_printf_i+0xf2>
 8004324:	0669      	lsls	r1, r5, #25
 8004326:	d5fb      	bpl.n	8004320 <_printf_i+0xe8>
 8004328:	881d      	ldrh	r5, [r3, #0]
 800432a:	4854      	ldr	r0, [pc, #336]	; (800447c <_printf_i+0x244>)
 800432c:	2f6f      	cmp	r7, #111	; 0x6f
 800432e:	bf0c      	ite	eq
 8004330:	2308      	moveq	r3, #8
 8004332:	230a      	movne	r3, #10
 8004334:	2100      	movs	r1, #0
 8004336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800433a:	6866      	ldr	r6, [r4, #4]
 800433c:	60a6      	str	r6, [r4, #8]
 800433e:	2e00      	cmp	r6, #0
 8004340:	bfa2      	ittt	ge
 8004342:	6821      	ldrge	r1, [r4, #0]
 8004344:	f021 0104 	bicge.w	r1, r1, #4
 8004348:	6021      	strge	r1, [r4, #0]
 800434a:	b90d      	cbnz	r5, 8004350 <_printf_i+0x118>
 800434c:	2e00      	cmp	r6, #0
 800434e:	d04d      	beq.n	80043ec <_printf_i+0x1b4>
 8004350:	4616      	mov	r6, r2
 8004352:	fbb5 f1f3 	udiv	r1, r5, r3
 8004356:	fb03 5711 	mls	r7, r3, r1, r5
 800435a:	5dc7      	ldrb	r7, [r0, r7]
 800435c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004360:	462f      	mov	r7, r5
 8004362:	42bb      	cmp	r3, r7
 8004364:	460d      	mov	r5, r1
 8004366:	d9f4      	bls.n	8004352 <_printf_i+0x11a>
 8004368:	2b08      	cmp	r3, #8
 800436a:	d10b      	bne.n	8004384 <_printf_i+0x14c>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	07df      	lsls	r7, r3, #31
 8004370:	d508      	bpl.n	8004384 <_printf_i+0x14c>
 8004372:	6923      	ldr	r3, [r4, #16]
 8004374:	6861      	ldr	r1, [r4, #4]
 8004376:	4299      	cmp	r1, r3
 8004378:	bfde      	ittt	le
 800437a:	2330      	movle	r3, #48	; 0x30
 800437c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004380:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004384:	1b92      	subs	r2, r2, r6
 8004386:	6122      	str	r2, [r4, #16]
 8004388:	f8cd a000 	str.w	sl, [sp]
 800438c:	464b      	mov	r3, r9
 800438e:	aa03      	add	r2, sp, #12
 8004390:	4621      	mov	r1, r4
 8004392:	4640      	mov	r0, r8
 8004394:	f7ff fee2 	bl	800415c <_printf_common>
 8004398:	3001      	adds	r0, #1
 800439a:	d14c      	bne.n	8004436 <_printf_i+0x1fe>
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	b004      	add	sp, #16
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	4835      	ldr	r0, [pc, #212]	; (800447c <_printf_i+0x244>)
 80043a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	680e      	ldr	r6, [r1, #0]
 80043b0:	061f      	lsls	r7, r3, #24
 80043b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80043b6:	600e      	str	r6, [r1, #0]
 80043b8:	d514      	bpl.n	80043e4 <_printf_i+0x1ac>
 80043ba:	07d9      	lsls	r1, r3, #31
 80043bc:	bf44      	itt	mi
 80043be:	f043 0320 	orrmi.w	r3, r3, #32
 80043c2:	6023      	strmi	r3, [r4, #0]
 80043c4:	b91d      	cbnz	r5, 80043ce <_printf_i+0x196>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	f023 0320 	bic.w	r3, r3, #32
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	2310      	movs	r3, #16
 80043d0:	e7b0      	b.n	8004334 <_printf_i+0xfc>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f043 0320 	orr.w	r3, r3, #32
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	2378      	movs	r3, #120	; 0x78
 80043dc:	4828      	ldr	r0, [pc, #160]	; (8004480 <_printf_i+0x248>)
 80043de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043e2:	e7e3      	b.n	80043ac <_printf_i+0x174>
 80043e4:	065e      	lsls	r6, r3, #25
 80043e6:	bf48      	it	mi
 80043e8:	b2ad      	uxthmi	r5, r5
 80043ea:	e7e6      	b.n	80043ba <_printf_i+0x182>
 80043ec:	4616      	mov	r6, r2
 80043ee:	e7bb      	b.n	8004368 <_printf_i+0x130>
 80043f0:	680b      	ldr	r3, [r1, #0]
 80043f2:	6826      	ldr	r6, [r4, #0]
 80043f4:	6960      	ldr	r0, [r4, #20]
 80043f6:	1d1d      	adds	r5, r3, #4
 80043f8:	600d      	str	r5, [r1, #0]
 80043fa:	0635      	lsls	r5, r6, #24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	d501      	bpl.n	8004404 <_printf_i+0x1cc>
 8004400:	6018      	str	r0, [r3, #0]
 8004402:	e002      	b.n	800440a <_printf_i+0x1d2>
 8004404:	0671      	lsls	r1, r6, #25
 8004406:	d5fb      	bpl.n	8004400 <_printf_i+0x1c8>
 8004408:	8018      	strh	r0, [r3, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	4616      	mov	r6, r2
 8004410:	e7ba      	b.n	8004388 <_printf_i+0x150>
 8004412:	680b      	ldr	r3, [r1, #0]
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	600a      	str	r2, [r1, #0]
 8004418:	681e      	ldr	r6, [r3, #0]
 800441a:	6862      	ldr	r2, [r4, #4]
 800441c:	2100      	movs	r1, #0
 800441e:	4630      	mov	r0, r6
 8004420:	f7fb fefe 	bl	8000220 <memchr>
 8004424:	b108      	cbz	r0, 800442a <_printf_i+0x1f2>
 8004426:	1b80      	subs	r0, r0, r6
 8004428:	6060      	str	r0, [r4, #4]
 800442a:	6863      	ldr	r3, [r4, #4]
 800442c:	6123      	str	r3, [r4, #16]
 800442e:	2300      	movs	r3, #0
 8004430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004434:	e7a8      	b.n	8004388 <_printf_i+0x150>
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	4632      	mov	r2, r6
 800443a:	4649      	mov	r1, r9
 800443c:	4640      	mov	r0, r8
 800443e:	47d0      	blx	sl
 8004440:	3001      	adds	r0, #1
 8004442:	d0ab      	beq.n	800439c <_printf_i+0x164>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	079b      	lsls	r3, r3, #30
 8004448:	d413      	bmi.n	8004472 <_printf_i+0x23a>
 800444a:	68e0      	ldr	r0, [r4, #12]
 800444c:	9b03      	ldr	r3, [sp, #12]
 800444e:	4298      	cmp	r0, r3
 8004450:	bfb8      	it	lt
 8004452:	4618      	movlt	r0, r3
 8004454:	e7a4      	b.n	80043a0 <_printf_i+0x168>
 8004456:	2301      	movs	r3, #1
 8004458:	4632      	mov	r2, r6
 800445a:	4649      	mov	r1, r9
 800445c:	4640      	mov	r0, r8
 800445e:	47d0      	blx	sl
 8004460:	3001      	adds	r0, #1
 8004462:	d09b      	beq.n	800439c <_printf_i+0x164>
 8004464:	3501      	adds	r5, #1
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	9903      	ldr	r1, [sp, #12]
 800446a:	1a5b      	subs	r3, r3, r1
 800446c:	42ab      	cmp	r3, r5
 800446e:	dcf2      	bgt.n	8004456 <_printf_i+0x21e>
 8004470:	e7eb      	b.n	800444a <_printf_i+0x212>
 8004472:	2500      	movs	r5, #0
 8004474:	f104 0619 	add.w	r6, r4, #25
 8004478:	e7f5      	b.n	8004466 <_printf_i+0x22e>
 800447a:	bf00      	nop
 800447c:	08004745 	.word	0x08004745
 8004480:	08004756 	.word	0x08004756

08004484 <memcpy>:
 8004484:	440a      	add	r2, r1
 8004486:	4291      	cmp	r1, r2
 8004488:	f100 33ff 	add.w	r3, r0, #4294967295
 800448c:	d100      	bne.n	8004490 <memcpy+0xc>
 800448e:	4770      	bx	lr
 8004490:	b510      	push	{r4, lr}
 8004492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800449a:	4291      	cmp	r1, r2
 800449c:	d1f9      	bne.n	8004492 <memcpy+0xe>
 800449e:	bd10      	pop	{r4, pc}

080044a0 <memmove>:
 80044a0:	4288      	cmp	r0, r1
 80044a2:	b510      	push	{r4, lr}
 80044a4:	eb01 0402 	add.w	r4, r1, r2
 80044a8:	d902      	bls.n	80044b0 <memmove+0x10>
 80044aa:	4284      	cmp	r4, r0
 80044ac:	4623      	mov	r3, r4
 80044ae:	d807      	bhi.n	80044c0 <memmove+0x20>
 80044b0:	1e43      	subs	r3, r0, #1
 80044b2:	42a1      	cmp	r1, r4
 80044b4:	d008      	beq.n	80044c8 <memmove+0x28>
 80044b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044be:	e7f8      	b.n	80044b2 <memmove+0x12>
 80044c0:	4402      	add	r2, r0
 80044c2:	4601      	mov	r1, r0
 80044c4:	428a      	cmp	r2, r1
 80044c6:	d100      	bne.n	80044ca <memmove+0x2a>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044d2:	e7f7      	b.n	80044c4 <memmove+0x24>

080044d4 <_free_r>:
 80044d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044d6:	2900      	cmp	r1, #0
 80044d8:	d048      	beq.n	800456c <_free_r+0x98>
 80044da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044de:	9001      	str	r0, [sp, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f1a1 0404 	sub.w	r4, r1, #4
 80044e6:	bfb8      	it	lt
 80044e8:	18e4      	addlt	r4, r4, r3
 80044ea:	f000 f8d3 	bl	8004694 <__malloc_lock>
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <_free_r+0x9c>)
 80044f0:	9801      	ldr	r0, [sp, #4]
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	4615      	mov	r5, r2
 80044f6:	b933      	cbnz	r3, 8004506 <_free_r+0x32>
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6014      	str	r4, [r2, #0]
 80044fc:	b003      	add	sp, #12
 80044fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004502:	f000 b8cd 	b.w	80046a0 <__malloc_unlock>
 8004506:	42a3      	cmp	r3, r4
 8004508:	d90b      	bls.n	8004522 <_free_r+0x4e>
 800450a:	6821      	ldr	r1, [r4, #0]
 800450c:	1862      	adds	r2, r4, r1
 800450e:	4293      	cmp	r3, r2
 8004510:	bf04      	itt	eq
 8004512:	681a      	ldreq	r2, [r3, #0]
 8004514:	685b      	ldreq	r3, [r3, #4]
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	bf04      	itt	eq
 800451a:	1852      	addeq	r2, r2, r1
 800451c:	6022      	streq	r2, [r4, #0]
 800451e:	602c      	str	r4, [r5, #0]
 8004520:	e7ec      	b.n	80044fc <_free_r+0x28>
 8004522:	461a      	mov	r2, r3
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b10b      	cbz	r3, 800452c <_free_r+0x58>
 8004528:	42a3      	cmp	r3, r4
 800452a:	d9fa      	bls.n	8004522 <_free_r+0x4e>
 800452c:	6811      	ldr	r1, [r2, #0]
 800452e:	1855      	adds	r5, r2, r1
 8004530:	42a5      	cmp	r5, r4
 8004532:	d10b      	bne.n	800454c <_free_r+0x78>
 8004534:	6824      	ldr	r4, [r4, #0]
 8004536:	4421      	add	r1, r4
 8004538:	1854      	adds	r4, r2, r1
 800453a:	42a3      	cmp	r3, r4
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	d1dd      	bne.n	80044fc <_free_r+0x28>
 8004540:	681c      	ldr	r4, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6053      	str	r3, [r2, #4]
 8004546:	4421      	add	r1, r4
 8004548:	6011      	str	r1, [r2, #0]
 800454a:	e7d7      	b.n	80044fc <_free_r+0x28>
 800454c:	d902      	bls.n	8004554 <_free_r+0x80>
 800454e:	230c      	movs	r3, #12
 8004550:	6003      	str	r3, [r0, #0]
 8004552:	e7d3      	b.n	80044fc <_free_r+0x28>
 8004554:	6825      	ldr	r5, [r4, #0]
 8004556:	1961      	adds	r1, r4, r5
 8004558:	428b      	cmp	r3, r1
 800455a:	bf04      	itt	eq
 800455c:	6819      	ldreq	r1, [r3, #0]
 800455e:	685b      	ldreq	r3, [r3, #4]
 8004560:	6063      	str	r3, [r4, #4]
 8004562:	bf04      	itt	eq
 8004564:	1949      	addeq	r1, r1, r5
 8004566:	6021      	streq	r1, [r4, #0]
 8004568:	6054      	str	r4, [r2, #4]
 800456a:	e7c7      	b.n	80044fc <_free_r+0x28>
 800456c:	b003      	add	sp, #12
 800456e:	bd30      	pop	{r4, r5, pc}
 8004570:	200000c4 	.word	0x200000c4

08004574 <_malloc_r>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	1ccd      	adds	r5, r1, #3
 8004578:	f025 0503 	bic.w	r5, r5, #3
 800457c:	3508      	adds	r5, #8
 800457e:	2d0c      	cmp	r5, #12
 8004580:	bf38      	it	cc
 8004582:	250c      	movcc	r5, #12
 8004584:	2d00      	cmp	r5, #0
 8004586:	4606      	mov	r6, r0
 8004588:	db01      	blt.n	800458e <_malloc_r+0x1a>
 800458a:	42a9      	cmp	r1, r5
 800458c:	d903      	bls.n	8004596 <_malloc_r+0x22>
 800458e:	230c      	movs	r3, #12
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	2000      	movs	r0, #0
 8004594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004596:	f000 f87d 	bl	8004694 <__malloc_lock>
 800459a:	4921      	ldr	r1, [pc, #132]	; (8004620 <_malloc_r+0xac>)
 800459c:	680a      	ldr	r2, [r1, #0]
 800459e:	4614      	mov	r4, r2
 80045a0:	b99c      	cbnz	r4, 80045ca <_malloc_r+0x56>
 80045a2:	4f20      	ldr	r7, [pc, #128]	; (8004624 <_malloc_r+0xb0>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b923      	cbnz	r3, 80045b2 <_malloc_r+0x3e>
 80045a8:	4621      	mov	r1, r4
 80045aa:	4630      	mov	r0, r6
 80045ac:	f000 f862 	bl	8004674 <_sbrk_r>
 80045b0:	6038      	str	r0, [r7, #0]
 80045b2:	4629      	mov	r1, r5
 80045b4:	4630      	mov	r0, r6
 80045b6:	f000 f85d 	bl	8004674 <_sbrk_r>
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	d123      	bne.n	8004606 <_malloc_r+0x92>
 80045be:	230c      	movs	r3, #12
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	4630      	mov	r0, r6
 80045c4:	f000 f86c 	bl	80046a0 <__malloc_unlock>
 80045c8:	e7e3      	b.n	8004592 <_malloc_r+0x1e>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	1b5b      	subs	r3, r3, r5
 80045ce:	d417      	bmi.n	8004600 <_malloc_r+0x8c>
 80045d0:	2b0b      	cmp	r3, #11
 80045d2:	d903      	bls.n	80045dc <_malloc_r+0x68>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	441c      	add	r4, r3
 80045d8:	6025      	str	r5, [r4, #0]
 80045da:	e004      	b.n	80045e6 <_malloc_r+0x72>
 80045dc:	6863      	ldr	r3, [r4, #4]
 80045de:	42a2      	cmp	r2, r4
 80045e0:	bf0c      	ite	eq
 80045e2:	600b      	streq	r3, [r1, #0]
 80045e4:	6053      	strne	r3, [r2, #4]
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 f85a 	bl	80046a0 <__malloc_unlock>
 80045ec:	f104 000b 	add.w	r0, r4, #11
 80045f0:	1d23      	adds	r3, r4, #4
 80045f2:	f020 0007 	bic.w	r0, r0, #7
 80045f6:	1ac2      	subs	r2, r0, r3
 80045f8:	d0cc      	beq.n	8004594 <_malloc_r+0x20>
 80045fa:	1a1b      	subs	r3, r3, r0
 80045fc:	50a3      	str	r3, [r4, r2]
 80045fe:	e7c9      	b.n	8004594 <_malloc_r+0x20>
 8004600:	4622      	mov	r2, r4
 8004602:	6864      	ldr	r4, [r4, #4]
 8004604:	e7cc      	b.n	80045a0 <_malloc_r+0x2c>
 8004606:	1cc4      	adds	r4, r0, #3
 8004608:	f024 0403 	bic.w	r4, r4, #3
 800460c:	42a0      	cmp	r0, r4
 800460e:	d0e3      	beq.n	80045d8 <_malloc_r+0x64>
 8004610:	1a21      	subs	r1, r4, r0
 8004612:	4630      	mov	r0, r6
 8004614:	f000 f82e 	bl	8004674 <_sbrk_r>
 8004618:	3001      	adds	r0, #1
 800461a:	d1dd      	bne.n	80045d8 <_malloc_r+0x64>
 800461c:	e7cf      	b.n	80045be <_malloc_r+0x4a>
 800461e:	bf00      	nop
 8004620:	200000c4 	.word	0x200000c4
 8004624:	200000c8 	.word	0x200000c8

08004628 <_realloc_r>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	4607      	mov	r7, r0
 800462c:	4614      	mov	r4, r2
 800462e:	460e      	mov	r6, r1
 8004630:	b921      	cbnz	r1, 800463c <_realloc_r+0x14>
 8004632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004636:	4611      	mov	r1, r2
 8004638:	f7ff bf9c 	b.w	8004574 <_malloc_r>
 800463c:	b922      	cbnz	r2, 8004648 <_realloc_r+0x20>
 800463e:	f7ff ff49 	bl	80044d4 <_free_r>
 8004642:	4625      	mov	r5, r4
 8004644:	4628      	mov	r0, r5
 8004646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004648:	f000 f830 	bl	80046ac <_malloc_usable_size_r>
 800464c:	42a0      	cmp	r0, r4
 800464e:	d20f      	bcs.n	8004670 <_realloc_r+0x48>
 8004650:	4621      	mov	r1, r4
 8004652:	4638      	mov	r0, r7
 8004654:	f7ff ff8e 	bl	8004574 <_malloc_r>
 8004658:	4605      	mov	r5, r0
 800465a:	2800      	cmp	r0, #0
 800465c:	d0f2      	beq.n	8004644 <_realloc_r+0x1c>
 800465e:	4631      	mov	r1, r6
 8004660:	4622      	mov	r2, r4
 8004662:	f7ff ff0f 	bl	8004484 <memcpy>
 8004666:	4631      	mov	r1, r6
 8004668:	4638      	mov	r0, r7
 800466a:	f7ff ff33 	bl	80044d4 <_free_r>
 800466e:	e7e9      	b.n	8004644 <_realloc_r+0x1c>
 8004670:	4635      	mov	r5, r6
 8004672:	e7e7      	b.n	8004644 <_realloc_r+0x1c>

08004674 <_sbrk_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d06      	ldr	r5, [pc, #24]	; (8004690 <_sbrk_r+0x1c>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	f7fd fafe 	bl	8001c80 <_sbrk>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_sbrk_r+0x1a>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_sbrk_r+0x1a>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	20000208 	.word	0x20000208

08004694 <__malloc_lock>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__malloc_lock+0x8>)
 8004696:	f000 b811 	b.w	80046bc <__retarget_lock_acquire_recursive>
 800469a:	bf00      	nop
 800469c:	20000210 	.word	0x20000210

080046a0 <__malloc_unlock>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__malloc_unlock+0x8>)
 80046a2:	f000 b80c 	b.w	80046be <__retarget_lock_release_recursive>
 80046a6:	bf00      	nop
 80046a8:	20000210 	.word	0x20000210

080046ac <_malloc_usable_size_r>:
 80046ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b0:	1f18      	subs	r0, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfbc      	itt	lt
 80046b6:	580b      	ldrlt	r3, [r1, r0]
 80046b8:	18c0      	addlt	r0, r0, r3
 80046ba:	4770      	bx	lr

080046bc <__retarget_lock_acquire_recursive>:
 80046bc:	4770      	bx	lr

080046be <__retarget_lock_release_recursive>:
 80046be:	4770      	bx	lr

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
