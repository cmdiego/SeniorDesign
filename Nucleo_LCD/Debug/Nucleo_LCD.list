
Nucleo_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c60  08003c60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  08003cdc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003cdc  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000819d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186a  00000000  00000000  00028241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00029ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002245c  00000000  00000000  0002a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000869a  00000000  00000000  0004cb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d343f  00000000  00000000  000551be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001285fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf4  00000000  00000000  00128650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bbc 	.word	0x08003bbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08003bbc 	.word	0x08003bbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bd2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bde:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000be6:	f023 0301 	bic.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000bfe:	bf00      	nop
  __NOP();
 8000c00:	bf00      	nop
  __NOP();
 8000c02:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e000      	b.n	8000c12 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000c10:	2301      	movs	r3, #1
  }
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000edf0 	.word	0xe000edf0
 8000c20:	e0001000 	.word	0xe0001000

08000c24 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <DWT_Delay_us+0x40>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c32:	f001 ff07 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <DWT_Delay_us+0x44>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0c9b      	lsrs	r3, r3, #18
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000c48:	bf00      	nop
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <DWT_Delay_us+0x40>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f8      	bcc.n	8000c4a <DWT_Delay_us+0x26>
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e0001000 	.word	0xe0001000
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <lcd16x2_enablePulse+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <lcd16x2_enablePulse+0x38>)
 8000c76:	8811      	ldrh	r1, [r2, #0]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fde2 	bl	8002844 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000c80:	2014      	movs	r0, #20
 8000c82:	f7ff ffcf 	bl	8000c24 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <lcd16x2_enablePulse+0x34>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <lcd16x2_enablePulse+0x38>)
 8000c8c:	8811      	ldrh	r1, [r2, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fdd7 	bl	8002844 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000c96:	203c      	movs	r0, #60	; 0x3c
 8000c98:	f7ff ffc4 	bl	8000c24 <DWT_Delay_us>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000090 	.word	0x20000090
 8000ca4:	20000096 	.word	0x20000096

08000ca8 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <lcd16x2_rs+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <lcd16x2_rs+0x28>)
 8000cb8:	8811      	ldrh	r1, [r2, #0]
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fdc1 	bl	8002844 <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000090 	.word	0x20000090
 8000cd0:	20000094 	.word	0x20000094

08000cd4 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <lcd16x2_write+0x198>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d05a      	beq.n	8000daa <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cf4:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <lcd16x2_write+0x19c>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <lcd16x2_write+0x1a0>)
 8000cfa:	8819      	ldrh	r1, [r3, #0]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	f001 fd9d 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <lcd16x2_write+0x1a4>)
 8000d10:	8819      	ldrh	r1, [r3, #0]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f001 fd92 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d20:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <lcd16x2_write+0x1a8>)
 8000d26:	8819      	ldrh	r1, [r3, #0]
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f001 fd87 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <lcd16x2_write+0x1ac>)
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f001 fd7c 	bl	8002844 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000d52:	8819      	ldrh	r1, [r3, #0]
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f001 fd71 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000d68:	8819      	ldrh	r1, [r3, #0]
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	f001 fd66 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d78:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f001 fd5b 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000d94:	8819      	ldrh	r1, [r3, #0]
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f001 fd50 	bl	8002844 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000da4:	f7ff ff62 	bl	8000c6c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000da8:	e05b      	b.n	8000e62 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000db0:	8819      	ldrh	r1, [r3, #0]
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f001 fd42 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000dc6:	8819      	ldrh	r1, [r3, #0]
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f001 fd37 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f001 fd2c 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000df2:	8819      	ldrh	r1, [r3, #0]
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f001 fd21 	bl	8002844 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e02:	f7ff ff33 	bl	8000c6c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000e0c:	8819      	ldrh	r1, [r3, #0]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	f001 fd14 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000e22:	8819      	ldrh	r1, [r3, #0]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f001 fd09 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000e38:	8819      	ldrh	r1, [r3, #0]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	f001 fcfe 	bl	8002844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000e4e:	8819      	ldrh	r1, [r3, #0]
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f001 fcf3 	bl	8002844 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e5e:	f7ff ff05 	bl	8000c6c <lcd16x2_enablePulse>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000098 	.word	0x20000098
 8000e74:	2000009c 	.word	0x2000009c
 8000e78:	2000009e 	.word	0x2000009e
 8000e7c:	200000a0 	.word	0x200000a0
 8000e80:	200000a2 	.word	0x200000a2
 8000e84:	200000a4 	.word	0x200000a4
 8000e88:	200000a8 	.word	0x200000a8
 8000e8c:	200000aa 	.word	0x200000aa
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	200000ae 	.word	0x200000ae

08000e98 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff00 	bl	8000ca8 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff12 	bl	8000cd4 <lcd16x2_write>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff fef0 	bl	8000ca8 <lcd16x2_rs>
  lcd16x2_write(data);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff02 	bl	8000cd4 <lcd16x2_write>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fedc 	bl	8000ca8 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <lcd16x2_write4+0x80>)
 8000ef6:	8819      	ldrh	r1, [r3, #0]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	f001 fc9f 	bl	8002844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <lcd16x2_write4+0x84>)
 8000f0c:	8819      	ldrh	r1, [r3, #0]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f001 fc94 	bl	8002844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <lcd16x2_write4+0x88>)
 8000f22:	8819      	ldrh	r1, [r3, #0]
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f001 fc89 	bl	8002844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <lcd16x2_write4+0x8c>)
 8000f38:	8819      	ldrh	r1, [r3, #0]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f001 fc7e 	bl	8002844 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000f48:	f7ff fe90 	bl	8000c6c <lcd16x2_enablePulse>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000a4 	.word	0x200000a4
 8000f58:	200000a8 	.word	0x200000a8
 8000f5c:	200000aa 	.word	0x200000aa
 8000f60:	200000ac 	.word	0x200000ac
 8000f64:	200000ae 	.word	0x200000ae

08000f68 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	817b      	strh	r3, [r7, #10]
 8000f76:	4613      	mov	r3, r2
 8000f78:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000f7a:	f7ff fe23 	bl	8000bc4 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <lcd16x2_init_4bits+0xa8>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <lcd16x2_init_4bits+0xac>)
 8000f86:	897b      	ldrh	r3, [r7, #10]
 8000f88:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <lcd16x2_init_4bits+0xb0>)
 8000f8c:	893b      	ldrh	r3, [r7, #8]
 8000f8e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <lcd16x2_init_4bits+0xb4>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <lcd16x2_init_4bits+0xb8>)
 8000f98:	8b3b      	ldrh	r3, [r7, #24]
 8000f9a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <lcd16x2_init_4bits+0xbc>)
 8000f9e:	8bbb      	ldrh	r3, [r7, #28]
 8000fa0:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <lcd16x2_init_4bits+0xc0>)
 8000fa4:	8c3b      	ldrh	r3, [r7, #32]
 8000fa6:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000fa8:	4a20      	ldr	r2, [pc, #128]	; (800102c <lcd16x2_init_4bits+0xc4>)
 8000faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fac:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <lcd16x2_init_4bits+0xc8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <lcd16x2_init_4bits+0xcc>)
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000fba:	2014      	movs	r0, #20
 8000fbc:	f000 fdc8 	bl	8001b50 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff ff89 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f000 fdc2 	bl	8001b50 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff ff83 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fdbc 	bl	8001b50 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f7ff ff7d 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fdb6 	bl	8001b50 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff ff77 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 fdb0 	bl	8001b50 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f7ff ff51 	bl	8000e98 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f7ff ff4e 	bl	8000e98 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ff4b 	bl	8000e98 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 fda4 	bl	8001b50 <HAL_Delay>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000090 	.word	0x20000090
 8001014:	20000094 	.word	0x20000094
 8001018:	20000096 	.word	0x20000096
 800101c:	200000a4 	.word	0x200000a4
 8001020:	200000a8 	.word	0x200000a8
 8001024:	200000aa 	.word	0x200000aa
 8001028:	200000ac 	.word	0x200000ac
 800102c:	200000ae 	.word	0x200000ae
 8001030:	20000000 	.word	0x20000000
 8001034:	20000002 	.word	0x20000002

08001038 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff19 	bl	8000e98 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001066:	e007      	b.n	8001078 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800106e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff10 	bl	8000e98 <lcd16x2_writeCommand>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ffd6 	bl	8001038 <lcd16x2_setCursor>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001094:	2100      	movs	r1, #0
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ffce 	bl	8001038 <lcd16x2_setCursor>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if(state)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f043 0303 	orr.w	r3, r3, #3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010bc:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fee8 	bl	8000e98 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80010c8:	e00b      	b.n	80010e2 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010d6:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fedb 	bl	8000e98 <lcd16x2_writeCommand>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000001 	.word	0x20000001

080010f0 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff fecf 	bl	8000e98 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 fd28 	bl	8001b50 <HAL_Delay>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001104:	b40f      	push	{r0, r1, r2, r3}
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b089      	sub	sp, #36	; 0x24
 800110a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800110c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001110:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f936 	bl	800338c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	77fb      	strb	r3, [r7, #31]
 8001124:	e00b      	b.n	800113e <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	f107 0220 	add.w	r2, r7, #32
 800112c:	4413      	add	r3, r2
 800112e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fec0 	bl	8000eb8 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	3301      	adds	r3, #1
 800113c:	77fb      	strb	r3, [r7, #31]
 800113e:	7ffc      	ldrb	r4, [r7, #31]
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f863 	bl	8000210 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	429c      	cmp	r4, r3
 800114e:	d202      	bcs.n	8001156 <lcd16x2_printf+0x52>
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d9e7      	bls.n	8001126 <lcd16x2_printf+0x22>
  }
}
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001160:	b004      	add	sp, #16
 8001162:	4770      	bx	lr

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fc80 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f852 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f9b4 	bl	80014dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001174:	f000 f8bc 	bl	80012f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001178:	f000 f90c 	bl	8001394 <MX_ADC2_Init>
  MX_ADC3_Init();
 800117c:	f000 f95c 	bl	8001438 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  // Startup animation and initialization for LCD
  lcd_startup();
 8001180:	f000 fa42 	bl	8001608 <lcd_startup>
  // Start all 3 onboard ADCs
  HAL_ADC_Start(&hadc1);
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <main+0x84>)
 8001186:	f000 fd4b 	bl	8001c20 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <main+0x88>)
 800118c:	f000 fd48 	bl	8001c20 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <main+0x8c>)
 8001192:	f000 fd45 	bl	8001c20 <HAL_ADC_Start>
  HAL_Delay(1500);
 8001196:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800119a:	f000 fcd9 	bl	8001b50 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_pot_params();
 800119e:	f000 fa6f 	bl	8001680 <get_pot_params>

	  //Display Effect 1 Screen
	  lcd16x2_1stLine();
 80011a2:	f7ff ff6d 	bl	8001080 <lcd16x2_1stLine>
	  lcd16x2_printf("  Distortion");
 80011a6:	4813      	ldr	r0, [pc, #76]	; (80011f4 <main+0x90>)
 80011a8:	f7ff ffac 	bl	8001104 <lcd16x2_printf>
	  lcd16x2_2ndLine();
 80011ac:	f7ff ff70 	bl	8001090 <lcd16x2_2ndLine>
	  //lcd16x2_printf(" A:00 B:00 C:00 ");
	  //lcd16x2_printf("Value1 = %.1f", 123.45))
	  lcd16x2_printf(" A:");
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <main+0x94>)
 80011b2:	f7ff ffa7 	bl	8001104 <lcd16x2_printf>
	  lcd16x2_printf("%02d", scaledValuePA);
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <main+0x98>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <main+0x9c>)
 80011be:	f7ff ffa1 	bl	8001104 <lcd16x2_printf>
	  lcd16x2_printf(" B:");
 80011c2:	4810      	ldr	r0, [pc, #64]	; (8001204 <main+0xa0>)
 80011c4:	f7ff ff9e 	bl	8001104 <lcd16x2_printf>
	  lcd16x2_printf("%02d", scaledValuePB);
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <main+0xa4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <main+0x9c>)
 80011d0:	f7ff ff98 	bl	8001104 <lcd16x2_printf>
	  lcd16x2_printf(" C:");
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <main+0xa8>)
 80011d6:	f7ff ff95 	bl	8001104 <lcd16x2_printf>
	  lcd16x2_printf("%02d", scaledValuePC);
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <main+0xac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <main+0x9c>)
 80011e2:	f7ff ff8f 	bl	8001104 <lcd16x2_printf>
	  get_pot_params();
 80011e6:	e7da      	b.n	800119e <main+0x3a>
 80011e8:	2000011c 	.word	0x2000011c
 80011ec:	200000bc 	.word	0x200000bc
 80011f0:	20000164 	.word	0x20000164
 80011f4:	08003bd4 	.word	0x08003bd4
 80011f8:	08003be4 	.word	0x08003be4
 80011fc:	20000114 	.word	0x20000114
 8001200:	08003be8 	.word	0x08003be8
 8001204:	08003bf0 	.word	0x08003bf0
 8001208:	20000118 	.word	0x20000118
 800120c:	08003bf4 	.word	0x08003bf4
 8001210:	20000110 	.word	0x20000110

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2234      	movs	r2, #52	; 0x34
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f002 f894 	bl	8003350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <SystemClock_Config+0xd4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <SystemClock_Config+0xd4>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <SystemClock_Config+0xd4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <SystemClock_Config+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <SystemClock_Config+0xd8>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <SystemClock_Config+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001288:	2310      	movs	r3, #16
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001292:	2304      	movs	r3, #4
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fd8c 	bl	8002dc0 <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012ae:	f000 fa6d 	bl	800178c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2302      	movs	r3, #2
 80012b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fad2 	bl	8002878 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012da:	f000 fa57 	bl	800178c <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	; 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_ADC1_Init+0x98>)
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <MX_ADC1_Init+0x9c>)
 8001306:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_ADC1_Init+0x98>)
 800130a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800130e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_ADC1_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_ADC1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_ADC1_Init+0x98>)
 800131e:	2201      	movs	r2, #1
 8001320:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_ADC1_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_ADC1_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_ADC1_Init+0x98>)
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <MX_ADC1_Init+0xa0>)
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_ADC1_Init+0x98>)
 800133e:	2201      	movs	r2, #1
 8001340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_ADC1_Init+0x98>)
 8001352:	f000 fc21 	bl	8001b98 <HAL_ADC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 fa16 	bl	800178c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001368:	2304      	movs	r3, #4
 800136a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_ADC1_Init+0x98>)
 8001372:	f000 fdbf 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800137c:	f000 fa06 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000011c 	.word	0x2000011c
 800138c:	40012000 	.word	0x40012000
 8001390:	0f000001 	.word	0x0f000001

08001394 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_ADC2_Init+0x98>)
 80013a8:	4a21      	ldr	r2, [pc, #132]	; (8001430 <MX_ADC2_Init+0x9c>)
 80013aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_ADC2_Init+0x98>)
 80013ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_ADC2_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_ADC2_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_ADC2_Init+0x98>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_ADC2_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_ADC2_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_ADC2_Init+0x98>)
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <MX_ADC2_Init+0xa0>)
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_ADC2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_ADC2_Init+0x98>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_ADC2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_ADC2_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_ADC2_Init+0x98>)
 80013f6:	f000 fbcf 	bl	8001b98 <HAL_ADC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 f9c4 	bl	800178c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001404:	2301      	movs	r3, #1
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800140c:	2304      	movs	r3, #4
 800140e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_ADC2_Init+0x98>)
 8001416:	f000 fd6d 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001420:	f000 f9b4 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000bc 	.word	0x200000bc
 8001430:	40012100 	.word	0x40012100
 8001434:	0f000001 	.word	0x0f000001

08001438 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	463b      	mov	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_ADC3_Init+0x98>)
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <MX_ADC3_Init+0x9c>)
 800144e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001456:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_ADC3_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001466:	2201      	movs	r2, #1
 8001468:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_ADC3_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_ADC3_Init+0x98>)
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <MX_ADC3_Init+0xa0>)
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001486:	2201      	movs	r2, #1
 8001488:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_ADC3_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_ADC3_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_ADC3_Init+0x98>)
 800149a:	f000 fb7d 	bl	8001b98 <HAL_ADC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f972 	bl	800178c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014a8:	230d      	movs	r3, #13
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ac:	2301      	movs	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80014b0:	2304      	movs	r3, #4
 80014b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_ADC3_Init+0x98>)
 80014ba:	f000 fd1b 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80014c4:	f000 f962 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000164 	.word	0x20000164
 80014d4:	40012200 	.word	0x40012200
 80014d8:	0f000001 	.word	0x0f000001

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <MX_GPIO_Init+0x11c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <MX_GPIO_Init+0x11c>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <MX_GPIO_Init+0x11c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_GPIO_Init+0x11c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_GPIO_Init+0x11c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|UD7_Pin|UD6_Pin|UD4_Pin
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001568:	4824      	ldr	r0, [pc, #144]	; (80015fc <MX_GPIO_Init+0x120>)
 800156a:	f001 f96b 	bl	8002844 <HAL_GPIO_WritePin>
                          |UD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UE_Pin|URW_Pin|URS_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001574:	4822      	ldr	r0, [pc, #136]	; (8001600 <MX_GPIO_Init+0x124>)
 8001576:	f001 f965 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001580:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_GPIO_Init+0x128>)
 8001592:	f000 ffc3 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001596:	2320      	movs	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_GPIO_Init+0x120>)
 80015ae:	f000 ffb5 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : UD7_Pin UD6_Pin UD4_Pin UD5_Pin */
  GPIO_InitStruct.Pin = UD7_Pin|UD6_Pin|UD4_Pin|UD5_Pin;
 80015b2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_GPIO_Init+0x120>)
 80015cc:	f000 ffa6 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : UE_Pin URW_Pin URS_Pin */
  GPIO_InitStruct.Pin = UE_Pin|URW_Pin|URS_Pin;
 80015d0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015de:	2301      	movs	r3, #1
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_GPIO_Init+0x124>)
 80015ea:	f000 ff97 	bl	800251c <HAL_GPIO_Init>

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800

08001608 <lcd_startup>:
//		//Display Effect 4 Screen
//	}
//}
////

void lcd_startup() {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af04      	add	r7, sp, #16

	lcd16x2_init_4bits(URS_GPIO_Port, URS_Pin, UE_Pin, UD4_GPIO_Port, UD4_Pin, UD5_Pin, UD6_Pin, UD7_Pin);
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <lcd_startup+0x68>)
 8001624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001628:	2120      	movs	r1, #32
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <lcd_startup+0x6c>)
 800162c:	f7ff fc9c 	bl	8000f68 <lcd16x2_init_4bits>
	lcd16x2_setCursor(0, 0);
 8001630:	2100      	movs	r1, #0
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fd00 	bl	8001038 <lcd16x2_setCursor>
	lcd16x2_cursorShow(0);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fd31 	bl	80010a0 <lcd16x2_cursorShow>
	HAL_Delay(500);
 800163e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001642:	f000 fa85 	bl	8001b50 <HAL_Delay>
	lcd16x2_clear();
 8001646:	f7ff fd53 	bl	80010f0 <lcd16x2_clear>
	lcd16x2_printf("     ADEPT");
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <lcd_startup+0x70>)
 800164c:	f7ff fd5a 	bl	8001104 <lcd16x2_printf>
	HAL_Delay(1500);
 8001650:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001654:	f000 fa7c 	bl	8001b50 <HAL_Delay>
	lcd16x2_clear();
 8001658:	f7ff fd4a 	bl	80010f0 <lcd16x2_clear>
	lcd16x2_setCursor(1, 0);
 800165c:	2100      	movs	r1, #0
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff fcea 	bl	8001038 <lcd16x2_setCursor>
	lcd16x2_printf("    FX System");
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <lcd_startup+0x74>)
 8001666:	f7ff fd4d 	bl	8001104 <lcd16x2_printf>
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400
 8001678:	08003bf8 	.word	0x08003bf8
 800167c:	08003c04 	.word	0x08003c04

08001680 <get_pot_params>:

void get_pot_params() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	// Poll ADC1 for PotA
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001688:	4839      	ldr	r0, [pc, #228]	; (8001770 <get_pot_params+0xf0>)
 800168a:	f000 fb9b 	bl	8001dc4 <HAL_ADC_PollForConversion>
	// Store value reading for PotA
	potValues[0] = HAL_ADC_GetValue(&hadc1);
 800168e:	4838      	ldr	r0, [pc, #224]	; (8001770 <get_pot_params+0xf0>)
 8001690:	f000 fc23 	bl	8001eda <HAL_ADC_GetValue>
 8001694:	4603      	mov	r3, r0
 8001696:	4a37      	ldr	r2, [pc, #220]	; (8001774 <get_pot_params+0xf4>)
 8001698:	6013      	str	r3, [r2, #0]
	// scale value between 0 and 99
	scaledValuePA = potValues[0] * 0.0247821;
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <get_pot_params+0xf4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f87a 	bl	8000798 <__aeabi_ui2d>
 80016a4:	a330      	add	r3, pc, #192	; (adr r3, 8001768 <get_pot_params+0xe8>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe fe09 	bl	80002c0 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff f8e9 	bl	800088c <__aeabi_d2uiz>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <get_pot_params+0xf8>)
 80016be:	6013      	str	r3, [r2, #0]
	if(scaledValuePA > 99) {
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <get_pot_params+0xf8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b63      	cmp	r3, #99	; 0x63
 80016c6:	d902      	bls.n	80016ce <get_pot_params+0x4e>
		scaledValuePA = 99;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <get_pot_params+0xf8>)
 80016ca:	2263      	movs	r2, #99	; 0x63
 80016cc:	601a      	str	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc2, 1000);
 80016ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d2:	482a      	ldr	r0, [pc, #168]	; (800177c <get_pot_params+0xfc>)
 80016d4:	f000 fb76 	bl	8001dc4 <HAL_ADC_PollForConversion>
	potValues[1] = HAL_ADC_GetValue(&hadc2);
 80016d8:	4828      	ldr	r0, [pc, #160]	; (800177c <get_pot_params+0xfc>)
 80016da:	f000 fbfe 	bl	8001eda <HAL_ADC_GetValue>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a24      	ldr	r2, [pc, #144]	; (8001774 <get_pot_params+0xf4>)
 80016e2:	6053      	str	r3, [r2, #4]
	scaledValuePB = potValues[1] * 0.0247821;
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <get_pot_params+0xf4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f855 	bl	8000798 <__aeabi_ui2d>
 80016ee:	a31e      	add	r3, pc, #120	; (adr r3, 8001768 <get_pot_params+0xe8>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe fde4 	bl	80002c0 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff f8c4 	bl	800088c <__aeabi_d2uiz>
 8001704:	4603      	mov	r3, r0
 8001706:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <get_pot_params+0x100>)
 8001708:	6013      	str	r3, [r2, #0]
	if(scaledValuePB > 99) {
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <get_pot_params+0x100>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b63      	cmp	r3, #99	; 0x63
 8001710:	d902      	bls.n	8001718 <get_pot_params+0x98>
		scaledValuePB = 99;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <get_pot_params+0x100>)
 8001714:	2263      	movs	r2, #99	; 0x63
 8001716:	601a      	str	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc3, 1000);
 8001718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800171c:	4819      	ldr	r0, [pc, #100]	; (8001784 <get_pot_params+0x104>)
 800171e:	f000 fb51 	bl	8001dc4 <HAL_ADC_PollForConversion>
	potValues[2] = HAL_ADC_GetValue(&hadc3);
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <get_pot_params+0x104>)
 8001724:	f000 fbd9 	bl	8001eda <HAL_ADC_GetValue>
 8001728:	4603      	mov	r3, r0
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <get_pot_params+0xf4>)
 800172c:	6093      	str	r3, [r2, #8]
	scaledValuePC = potValues[2] * 0.0247821;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <get_pot_params+0xf4>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f830 	bl	8000798 <__aeabi_ui2d>
 8001738:	a30b      	add	r3, pc, #44	; (adr r3, 8001768 <get_pot_params+0xe8>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe fdbf 	bl	80002c0 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff f89f 	bl	800088c <__aeabi_d2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <get_pot_params+0x108>)
 8001752:	6013      	str	r3, [r2, #0]
	if(scaledValuePC > 99) {
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <get_pot_params+0x108>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b63      	cmp	r3, #99	; 0x63
 800175a:	d902      	bls.n	8001762 <get_pot_params+0xe2>
		scaledValuePC = 99;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <get_pot_params+0x108>)
 800175e:	2263      	movs	r2, #99	; 0x63
 8001760:	601a      	str	r2, [r3, #0]
	}
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	941ad498 	.word	0x941ad498
 800176c:	3f99607a 	.word	0x3f99607a
 8001770:	2000011c 	.word	0x2000011c
 8001774:	20000104 	.word	0x20000104
 8001778:	20000114 	.word	0x20000114
 800177c:	200000bc 	.word	0x200000bc
 8001780:	20000118 	.word	0x20000118
 8001784:	20000164 	.word	0x20000164
 8001788:	20000110 	.word	0x20000110

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d6:	2007      	movs	r0, #7
 80017d8:	f000 fe6c 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_ADC_MspInit+0x134>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d128      	bne.n	800185c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a43      	ldr	r2, [pc, #268]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_ADC_MspInit+0x138>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <HAL_ADC_MspInit+0x138>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = PotA_Pin;
 8001842:	2301      	movs	r3, #1
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001846:	2303      	movs	r3, #3
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PotA_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4833      	ldr	r0, [pc, #204]	; (8001924 <HAL_ADC_MspInit+0x13c>)
 8001856:	f000 fe61 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800185a:	e05a      	b.n	8001912 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a31      	ldr	r2, [pc, #196]	; (8001928 <HAL_ADC_MspInit+0x140>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d128      	bne.n	80018b8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_ADC_MspInit+0x138>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_ADC_MspInit+0x138>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_ADC_MspInit+0x138>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PotB_Pin;
 800189e:	2302      	movs	r3, #2
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a2:	2303      	movs	r3, #3
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PotB_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	481c      	ldr	r0, [pc, #112]	; (8001924 <HAL_ADC_MspInit+0x13c>)
 80018b2:	f000 fe33 	bl	800251c <HAL_GPIO_Init>
}
 80018b6:	e02c      	b.n	8001912 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_ADC_MspInit+0x144>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d127      	bne.n	8001912 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_ADC_MspInit+0x138>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_ADC_MspInit+0x138>)
 80018cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_ADC_MspInit+0x138>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_ADC_MspInit+0x138>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_ADC_MspInit+0x138>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_ADC_MspInit+0x138>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018fa:	2308      	movs	r3, #8
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <HAL_ADC_MspInit+0x148>)
 800190e:	f000 fe05 	bl	800251c <HAL_GPIO_Init>
}
 8001912:	bf00      	nop
 8001914:	3738      	adds	r7, #56	; 0x38
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40012100 	.word	0x40012100
 800192c:	40012200 	.word	0x40012200
 8001930:	40020800 	.word	0x40020800

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f8c6 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f001 fca0 	bl	80032fc <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20020000 	.word	0x20020000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	200000b0 	.word	0x200000b0
 80019f0:	200001c0 	.word	0x200001c0

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd7 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f001 fc5f 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fb8b 	bl	8001164 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a5c:	08003c68 	.word	0x08003c68
  ldr r2, =_sbss
 8001a60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a64:	200001c0 	.word	0x200001c0

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 fd0d 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fe7a 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fd17 	bl	8002502 <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f000 fced 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000004 	.word	0x20000004
 8001b08:	2000000c 	.word	0x2000000c
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	200001ac 	.word	0x200001ac

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200001ac 	.word	0x200001ac

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff ffee 	bl	8001b38 <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffde 	bl	8001b38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e033      	b.n	8001c16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe16 	bl	80017e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bde:	f023 0302 	bic.w	r3, r3, #2
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fab4 	bl	8002158 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
 8001c06:	e001      	b.n	8001c0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Start+0x1a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e0b2      	b.n	8001da0 <HAL_ADC_Start+0x180>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d018      	beq.n	8001c82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_ADC_Start+0x18c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_ADC_Start+0x190>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d17a      	bne.n	8001d86 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f023 0206 	bic.w	r2, r3, #6
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_ADC_Start+0x194>)
 8001cee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12a      	bne.n	8001d5c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_ADC_Start+0x198>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d015      	beq.n	8001d3c <HAL_ADC_Start+0x11c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_ADC_Start+0x19c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_Start+0x106>
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_ADC_Start+0x194>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <HAL_ADC_Start+0x1a0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d136      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_ADC_Start+0x194>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d130      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d129      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e020      	b.n	8001d9e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <HAL_ADC_Start+0x198>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d11b      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d114      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e00b      	b.n	8001d9e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000004 	.word	0x20000004
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	40012300 	.word	0x40012300
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	40012100 	.word	0x40012100
 8001dc0:	40012200 	.word	0x40012200

08001dc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d113      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f043 0220 	orr.w	r2, r3, #32
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e063      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e0a:	f7ff fe95 	bl	8001b38 <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e10:	e021      	b.n	8001e56 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d01d      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_ADC_PollForConversion+0x6c>
 8001e20:	f7ff fe8a 	bl	8001b38 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d212      	bcs.n	8001e56 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d00b      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e03d      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d1d6      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0212 	mvn.w	r2, #18
 8001e6c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d123      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11f      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d111      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1c>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e113      	b.n	8002138 <HAL_ADC_ConfigChannel+0x244>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d925      	bls.n	8001f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68d9      	ldr	r1, [r3, #12]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	3b1e      	subs	r3, #30
 8001f36:	2207      	movs	r2, #7
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68d9      	ldr	r1, [r3, #12]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	4603      	mov	r3, r0
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4403      	add	r3, r0
 8001f5e:	3b1e      	subs	r3, #30
 8001f60:	409a      	lsls	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	e022      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	2207      	movs	r2, #7
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4403      	add	r3, r0
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d824      	bhi.n	8002004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b05      	subs	r3, #5
 8001fcc:	221f      	movs	r2, #31
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	400a      	ands	r2, r1
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b05      	subs	r3, #5
 8001ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
 8002002:	e04c      	b.n	800209e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d824      	bhi.n	8002056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	3b23      	subs	r3, #35	; 0x23
 800201e:	221f      	movs	r2, #31
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43da      	mvns	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	400a      	ands	r2, r1
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4618      	mov	r0, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b23      	subs	r3, #35	; 0x23
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	e023      	b.n	800209e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b41      	subs	r3, #65	; 0x41
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	400a      	ands	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b41      	subs	r3, #65	; 0x41
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_ADC_ConfigChannel+0x250>)
 80020a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_ADC_ConfigChannel+0x254>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10f      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1d8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d10b      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_ADC_ConfigChannel+0x254>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12b      	bne.n	800212e <HAL_ADC_ConfigChannel+0x23a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_ADC_ConfigChannel+0x258>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d003      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x1f4>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d122      	bne.n	800212e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x258>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_ADC_ConfigChannel+0x25c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_ADC_ConfigChannel+0x260>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9a      	lsrs	r2, r3, #18
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3b01      	subs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	40012000 	.word	0x40012000
 800214c:	10000012 	.word	0x10000012
 8002150:	20000004 	.word	0x20000004
 8002154:	431bde83 	.word	0x431bde83

08002158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <ADC_Init+0x1f0>)
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	431a      	orrs	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <ADC_Init+0x1f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6899      	ldr	r1, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00f      	b.n	8002256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0202 	bic.w	r2, r2, #2
 8002264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7e1b      	ldrb	r3, [r3, #24]
 8002270:	005a      	lsls	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	035a      	lsls	r2, r3, #13
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	051a      	lsls	r2, r3, #20
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230e:	025a      	lsls	r2, r3, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	029a      	lsls	r2, r3, #10
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	0f000001 	.word	0x0f000001

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff47 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff5c 	bl	8002398 <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffb0 	bl	8002470 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e165      	b.n	8002804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8154 	bne.w	80027fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80ae 	beq.w	80027fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_GPIO_Init+0x300>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_GPIO_Init+0x300>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_GPIO_Init+0x300>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_GPIO_Init+0x304>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <HAL_GPIO_Init+0x308>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d025      	beq.n	8002736 <HAL_GPIO_Init+0x21a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4e      	ldr	r2, [pc, #312]	; (8002828 <HAL_GPIO_Init+0x30c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01f      	beq.n	8002732 <HAL_GPIO_Init+0x216>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4d      	ldr	r2, [pc, #308]	; (800282c <HAL_GPIO_Init+0x310>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x212>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <HAL_GPIO_Init+0x314>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x20e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4b      	ldr	r2, [pc, #300]	; (8002834 <HAL_GPIO_Init+0x318>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x20a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <HAL_GPIO_Init+0x31c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x206>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a49      	ldr	r2, [pc, #292]	; (800283c <HAL_GPIO_Init+0x320>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x202>
 800271a:	2306      	movs	r3, #6
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 800271e:	2307      	movs	r3, #7
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x21c>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	; (8002820 <HAL_GPIO_Init+0x304>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_GPIO_Init+0x324>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277a:	4a31      	ldr	r2, [pc, #196]	; (8002840 <HAL_GPIO_Init+0x324>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_GPIO_Init+0x324>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a4:	4a26      	ldr	r2, [pc, #152]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_GPIO_Init+0x324>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f ae96 	bls.w	8002538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40021400 	.word	0x40021400
 800283c:	40021800 	.word	0x40021800
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002860:	e003      	b.n	800286a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0cc      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d90c      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b63      	ldr	r3, [pc, #396]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b59      	ldr	r3, [pc, #356]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	494d      	ldr	r1, [pc, #308]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d044      	beq.n	8002998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d119      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d003      	beq.n	8002936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002932:	2b03      	cmp	r3, #3
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e067      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4934      	ldr	r1, [pc, #208]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002968:	f7ff f8e6 	bl	8001b38 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7ff f8e2 	bl	8001b38 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e04f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 020c 	and.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d1eb      	bne.n	8002970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d20c      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e032      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4916      	ldr	r1, [pc, #88]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490e      	ldr	r1, [pc, #56]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029fe:	f000 f82d 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490a      	ldr	r1, [pc, #40]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f846 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08003c14 	.word	0x08003c14
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	20000008 	.word	0x20000008

08002a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000004 	.word	0x20000004

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a60:	b088      	sub	sp, #32
 8002a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a78:	4bce      	ldr	r3, [pc, #824]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	f200 818d 	bhi.w	8002da0 <HAL_RCC_GetSysClockFreq+0x344>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <HAL_RCC_GetSysClockFreq+0x30>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002da1 	.word	0x08002da1
 8002a94:	08002da1 	.word	0x08002da1
 8002a98:	08002da1 	.word	0x08002da1
 8002a9c:	08002ac7 	.word	0x08002ac7
 8002aa0:	08002da1 	.word	0x08002da1
 8002aa4:	08002da1 	.word	0x08002da1
 8002aa8:	08002da1 	.word	0x08002da1
 8002aac:	08002acd 	.word	0x08002acd
 8002ab0:	08002da1 	.word	0x08002da1
 8002ab4:	08002da1 	.word	0x08002da1
 8002ab8:	08002da1 	.word	0x08002da1
 8002abc:	08002c41 	.word	0x08002c41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4bbd      	ldr	r3, [pc, #756]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ac2:	61bb      	str	r3, [r7, #24]
       break;
 8002ac4:	e16f      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac6:	4bbd      	ldr	r3, [pc, #756]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x360>)
 8002ac8:	61bb      	str	r3, [r7, #24]
      break;
 8002aca:	e16c      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4bb9      	ldr	r3, [pc, #740]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad6:	4bb7      	ldr	r3, [pc, #732]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d053      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4bb4      	ldr	r3, [pc, #720]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	ea02 0400 	and.w	r4, r2, r0
 8002afa:	603c      	str	r4, [r7, #0]
 8002afc:	400b      	ands	r3, r1
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	014b      	lsls	r3, r1, #5
 8002b12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b16:	0142      	lsls	r2, r0, #5
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4623      	mov	r3, r4
 8002b1e:	1ac0      	subs	r0, r0, r3
 8002b20:	462b      	mov	r3, r5
 8002b22:	eb61 0103 	sbc.w	r1, r1, r3
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	018b      	lsls	r3, r1, #6
 8002b30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b34:	0182      	lsls	r2, r0, #6
 8002b36:	1a12      	subs	r2, r2, r0
 8002b38:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3c:	f04f 0000 	mov.w	r0, #0
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	00d9      	lsls	r1, r3, #3
 8002b46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b4a:	00d0      	lsls	r0, r2, #3
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4621      	mov	r1, r4
 8002b52:	1852      	adds	r2, r2, r1
 8002b54:	4629      	mov	r1, r5
 8002b56:	eb43 0101 	adc.w	r1, r3, r1
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	f04f 0000 	mov.w	r0, #0
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	0259      	lsls	r1, r3, #9
 8002b66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b6a:	0250      	lsls	r0, r2, #9
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	f7fd fea6 	bl	80008cc <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e04c      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	099b      	lsrs	r3, r3, #6
 8002b90:	461a      	mov	r2, r3
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	ea02 0a00 	and.w	sl, r2, r0
 8002ba2:	ea03 0b01 	and.w	fp, r3, r1
 8002ba6:	4650      	mov	r0, sl
 8002ba8:	4659      	mov	r1, fp
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	014b      	lsls	r3, r1, #5
 8002bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bb8:	0142      	lsls	r2, r0, #5
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	ebb0 000a 	subs.w	r0, r0, sl
 8002bc2:	eb61 010b 	sbc.w	r1, r1, fp
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	018b      	lsls	r3, r1, #6
 8002bd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bd4:	0182      	lsls	r2, r0, #6
 8002bd6:	1a12      	subs	r2, r2, r0
 8002bd8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bdc:	f04f 0000 	mov.w	r0, #0
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	00d9      	lsls	r1, r3, #3
 8002be6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bea:	00d0      	lsls	r0, r2, #3
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	eb12 020a 	adds.w	r2, r2, sl
 8002bf4:	eb43 030b 	adc.w	r3, r3, fp
 8002bf8:	f04f 0000 	mov.w	r0, #0
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	0299      	lsls	r1, r3, #10
 8002c02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c06:	0290      	lsls	r0, r2, #10
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	f7fd fe58 	bl	80008cc <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c24:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	61bb      	str	r3, [r7, #24]
      break;
 8002c3e:	e0b2      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c40:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c48:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4a:	4b5a      	ldr	r3, [pc, #360]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04d      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c56:	4b57      	ldr	r3, [pc, #348]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	ea02 0800 	and.w	r8, r2, r0
 8002c6e:	ea03 0901 	and.w	r9, r3, r1
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	014b      	lsls	r3, r1, #5
 8002c80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c84:	0142      	lsls	r2, r0, #5
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	ebb0 0008 	subs.w	r0, r0, r8
 8002c8e:	eb61 0109 	sbc.w	r1, r1, r9
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	018b      	lsls	r3, r1, #6
 8002c9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ca0:	0182      	lsls	r2, r0, #6
 8002ca2:	1a12      	subs	r2, r2, r0
 8002ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca8:	f04f 0000 	mov.w	r0, #0
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	00d9      	lsls	r1, r3, #3
 8002cb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cb6:	00d0      	lsls	r0, r2, #3
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	eb12 0208 	adds.w	r2, r2, r8
 8002cc0:	eb43 0309 	adc.w	r3, r3, r9
 8002cc4:	f04f 0000 	mov.w	r0, #0
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	0259      	lsls	r1, r3, #9
 8002cce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cd2:	0250      	lsls	r0, r2, #9
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f7fd fdf2 	bl	80008cc <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e04a      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	ea02 0400 	and.w	r4, r2, r0
 8002d0a:	ea03 0501 	and.w	r5, r3, r1
 8002d0e:	4620      	mov	r0, r4
 8002d10:	4629      	mov	r1, r5
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	014b      	lsls	r3, r1, #5
 8002d1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d20:	0142      	lsls	r2, r0, #5
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	1b00      	subs	r0, r0, r4
 8002d28:	eb61 0105 	sbc.w	r1, r1, r5
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	018b      	lsls	r3, r1, #6
 8002d36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d3a:	0182      	lsls	r2, r0, #6
 8002d3c:	1a12      	subs	r2, r2, r0
 8002d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	00d9      	lsls	r1, r3, #3
 8002d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d50:	00d0      	lsls	r0, r2, #3
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	1912      	adds	r2, r2, r4
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	0299      	lsls	r1, r3, #10
 8002d66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d6a:	0290      	lsls	r0, r2, #10
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	f7fd fda6 	bl	80008cc <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0f1b      	lsrs	r3, r3, #28
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	61bb      	str	r3, [r7, #24]
      break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002da2:	61bb      	str	r3, [r7, #24]
      break;
 8002da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da6:	69bb      	ldr	r3, [r7, #24]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	00f42400 	.word	0x00f42400
 8002dbc:	007a1200 	.word	0x007a1200

08002dc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e28d      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8083 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002de0:	4b94      	ldr	r3, [pc, #592]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d019      	beq.n	8002e20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dec:	4b91      	ldr	r3, [pc, #580]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002df8:	4b8e      	ldr	r3, [pc, #568]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e04:	d00c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e06:	4b8b      	ldr	r3, [pc, #556]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d112      	bne.n	8002e38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e12:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b84      	ldr	r3, [pc, #528]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05b      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x124>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d157      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e25a      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x90>
 8002e42:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7b      	ldr	r2, [pc, #492]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0xcc>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0xb4>
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a72      	ldr	r2, [pc, #456]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xcc>
 8002e74:	4b6f      	ldr	r3, [pc, #444]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b6c      	ldr	r3, [pc, #432]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6b      	ldr	r2, [pc, #428]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe fe50 	bl	8001b38 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fe4c 	bl	8001b38 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e21f      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b61      	ldr	r3, [pc, #388]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0xdc>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fe3c 	bl	8001b38 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fe38 	bl	8001b38 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e20b      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	4b57      	ldr	r3, [pc, #348]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x104>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d06f      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d017      	beq.n	8002f2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002efe:	4b4d      	ldr	r3, [pc, #308]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x186>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1d3      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4937      	ldr	r1, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x278>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fde5 	bl	8001b38 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fde1 	bl	8001b38 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1b4      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4925      	ldr	r1, [pc, #148]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x278>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fdc4 	bl	8001b38 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fdc0 	bl	8001b38 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e193      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d036      	beq.n	800304c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x27c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe fda4 	bl	8001b38 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fda0 	bl	8001b38 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e173      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x234>
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x27c>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe fd8d 	bl	8001b38 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e00e      	b.n	8003040 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003022:	f7fe fd89 	bl	8001b38 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d907      	bls.n	8003040 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e15c      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
 8003034:	40023800 	.word	0x40023800
 8003038:	42470000 	.word	0x42470000
 800303c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b8a      	ldr	r3, [pc, #552]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ea      	bne.n	8003022 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8097 	beq.w	8003188 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b83      	ldr	r3, [pc, #524]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	4b7f      	ldr	r3, [pc, #508]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a7e      	ldr	r2, [pc, #504]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b7c      	ldr	r3, [pc, #496]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b79      	ldr	r3, [pc, #484]	; (8003270 <HAL_RCC_OscConfig+0x4b0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b76      	ldr	r3, [pc, #472]	; (8003270 <HAL_RCC_OscConfig+0x4b0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a75      	ldr	r2, [pc, #468]	; (8003270 <HAL_RCC_OscConfig+0x4b0>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe fd49 	bl	8001b38 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe fd45 	bl	8001b38 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e118      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b6c      	ldr	r3, [pc, #432]	; (8003270 <HAL_RCC_OscConfig+0x4b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x31e>
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x358>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x340>
 80030e6:	4b61      	ldr	r3, [pc, #388]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a60      	ldr	r2, [pc, #384]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	4b5e      	ldr	r3, [pc, #376]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a5d      	ldr	r2, [pc, #372]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x358>
 8003100:	4b5a      	ldr	r3, [pc, #360]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a59      	ldr	r2, [pc, #356]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b57      	ldr	r3, [pc, #348]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a56      	ldr	r2, [pc, #344]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fd0a 	bl	8001b38 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe fd06 	bl	8001b38 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0d7      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RCC_OscConfig+0x368>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fcf4 	bl	8001b38 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fcf0 	bl	8001b38 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0c1      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	4b40      	ldr	r3, [pc, #256]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ee      	bne.n	8003154 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80ad 	beq.w	80032ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d060      	beq.n	8003260 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d145      	bne.n	8003232 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_RCC_OscConfig+0x4b4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fcc4 	bl	8001b38 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fcc0 	bl	8001b38 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e093      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	071b      	lsls	r3, r3, #28
 80031fe:	491b      	ldr	r1, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x4b4>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe fc95 	bl	8001b38 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fc91 	bl	8001b38 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e064      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x452>
 8003230:	e05c      	b.n	80032ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_OscConfig+0x4b4>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fc7e 	bl	8001b38 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fc7a 	bl	8001b38 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e04d      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCC_OscConfig+0x4ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x480>
 800325e:	e045      	b.n	80032ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e040      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
 800326c:	40023800 	.word	0x40023800
 8003270:	40007000 	.word	0x40007000
 8003274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_RCC_OscConfig+0x538>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d030      	beq.n	80032e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d129      	bne.n	80032e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d122      	bne.n	80032e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d119      	bne.n	80032e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	3b01      	subs	r3, #1
 80032c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d10f      	bne.n	80032e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <__errno>:
 80032fc:	4b01      	ldr	r3, [pc, #4]	; (8003304 <__errno+0x8>)
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000010 	.word	0x20000010

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	4d0d      	ldr	r5, [pc, #52]	; (8003340 <__libc_init_array+0x38>)
 800330c:	4c0d      	ldr	r4, [pc, #52]	; (8003344 <__libc_init_array+0x3c>)
 800330e:	1b64      	subs	r4, r4, r5
 8003310:	10a4      	asrs	r4, r4, #2
 8003312:	2600      	movs	r6, #0
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	4d0b      	ldr	r5, [pc, #44]	; (8003348 <__libc_init_array+0x40>)
 800331a:	4c0c      	ldr	r4, [pc, #48]	; (800334c <__libc_init_array+0x44>)
 800331c:	f000 fc4e 	bl	8003bbc <_init>
 8003320:	1b64      	subs	r4, r4, r5
 8003322:	10a4      	asrs	r4, r4, #2
 8003324:	2600      	movs	r6, #0
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	08003c60 	.word	0x08003c60
 8003344:	08003c60 	.word	0x08003c60
 8003348:	08003c60 	.word	0x08003c60
 800334c:	08003c64 	.word	0x08003c64

08003350 <memset>:
 8003350:	4402      	add	r2, r0
 8003352:	4603      	mov	r3, r0
 8003354:	4293      	cmp	r3, r2
 8003356:	d100      	bne.n	800335a <memset+0xa>
 8003358:	4770      	bx	lr
 800335a:	f803 1b01 	strb.w	r1, [r3], #1
 800335e:	e7f9      	b.n	8003354 <memset+0x4>

08003360 <_vsiprintf_r>:
 8003360:	b500      	push	{lr}
 8003362:	b09b      	sub	sp, #108	; 0x6c
 8003364:	9100      	str	r1, [sp, #0]
 8003366:	9104      	str	r1, [sp, #16]
 8003368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800336c:	9105      	str	r1, [sp, #20]
 800336e:	9102      	str	r1, [sp, #8]
 8003370:	4905      	ldr	r1, [pc, #20]	; (8003388 <_vsiprintf_r+0x28>)
 8003372:	9103      	str	r1, [sp, #12]
 8003374:	4669      	mov	r1, sp
 8003376:	f000 f86f 	bl	8003458 <_svfiprintf_r>
 800337a:	9b00      	ldr	r3, [sp, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	b01b      	add	sp, #108	; 0x6c
 8003382:	f85d fb04 	ldr.w	pc, [sp], #4
 8003386:	bf00      	nop
 8003388:	ffff0208 	.word	0xffff0208

0800338c <vsiprintf>:
 800338c:	4613      	mov	r3, r2
 800338e:	460a      	mov	r2, r1
 8003390:	4601      	mov	r1, r0
 8003392:	4802      	ldr	r0, [pc, #8]	; (800339c <vsiprintf+0x10>)
 8003394:	6800      	ldr	r0, [r0, #0]
 8003396:	f7ff bfe3 	b.w	8003360 <_vsiprintf_r>
 800339a:	bf00      	nop
 800339c:	20000010 	.word	0x20000010

080033a0 <__ssputs_r>:
 80033a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	688e      	ldr	r6, [r1, #8]
 80033a6:	429e      	cmp	r6, r3
 80033a8:	4682      	mov	sl, r0
 80033aa:	460c      	mov	r4, r1
 80033ac:	4690      	mov	r8, r2
 80033ae:	461f      	mov	r7, r3
 80033b0:	d838      	bhi.n	8003424 <__ssputs_r+0x84>
 80033b2:	898a      	ldrh	r2, [r1, #12]
 80033b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b8:	d032      	beq.n	8003420 <__ssputs_r+0x80>
 80033ba:	6825      	ldr	r5, [r4, #0]
 80033bc:	6909      	ldr	r1, [r1, #16]
 80033be:	eba5 0901 	sub.w	r9, r5, r1
 80033c2:	6965      	ldr	r5, [r4, #20]
 80033c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033cc:	3301      	adds	r3, #1
 80033ce:	444b      	add	r3, r9
 80033d0:	106d      	asrs	r5, r5, #1
 80033d2:	429d      	cmp	r5, r3
 80033d4:	bf38      	it	cc
 80033d6:	461d      	movcc	r5, r3
 80033d8:	0553      	lsls	r3, r2, #21
 80033da:	d531      	bpl.n	8003440 <__ssputs_r+0xa0>
 80033dc:	4629      	mov	r1, r5
 80033de:	f000 fb47 	bl	8003a70 <_malloc_r>
 80033e2:	4606      	mov	r6, r0
 80033e4:	b950      	cbnz	r0, 80033fc <__ssputs_r+0x5c>
 80033e6:	230c      	movs	r3, #12
 80033e8:	f8ca 3000 	str.w	r3, [sl]
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fc:	6921      	ldr	r1, [r4, #16]
 80033fe:	464a      	mov	r2, r9
 8003400:	f000 fabe 	bl	8003980 <memcpy>
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800340a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	6126      	str	r6, [r4, #16]
 8003412:	6165      	str	r5, [r4, #20]
 8003414:	444e      	add	r6, r9
 8003416:	eba5 0509 	sub.w	r5, r5, r9
 800341a:	6026      	str	r6, [r4, #0]
 800341c:	60a5      	str	r5, [r4, #8]
 800341e:	463e      	mov	r6, r7
 8003420:	42be      	cmp	r6, r7
 8003422:	d900      	bls.n	8003426 <__ssputs_r+0x86>
 8003424:	463e      	mov	r6, r7
 8003426:	4632      	mov	r2, r6
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	4641      	mov	r1, r8
 800342c:	f000 fab6 	bl	800399c <memmove>
 8003430:	68a3      	ldr	r3, [r4, #8]
 8003432:	6822      	ldr	r2, [r4, #0]
 8003434:	1b9b      	subs	r3, r3, r6
 8003436:	4432      	add	r2, r6
 8003438:	60a3      	str	r3, [r4, #8]
 800343a:	6022      	str	r2, [r4, #0]
 800343c:	2000      	movs	r0, #0
 800343e:	e7db      	b.n	80033f8 <__ssputs_r+0x58>
 8003440:	462a      	mov	r2, r5
 8003442:	f000 fb6f 	bl	8003b24 <_realloc_r>
 8003446:	4606      	mov	r6, r0
 8003448:	2800      	cmp	r0, #0
 800344a:	d1e1      	bne.n	8003410 <__ssputs_r+0x70>
 800344c:	6921      	ldr	r1, [r4, #16]
 800344e:	4650      	mov	r0, sl
 8003450:	f000 fabe 	bl	80039d0 <_free_r>
 8003454:	e7c7      	b.n	80033e6 <__ssputs_r+0x46>
	...

08003458 <_svfiprintf_r>:
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	4698      	mov	r8, r3
 800345e:	898b      	ldrh	r3, [r1, #12]
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	b09d      	sub	sp, #116	; 0x74
 8003464:	4607      	mov	r7, r0
 8003466:	460d      	mov	r5, r1
 8003468:	4614      	mov	r4, r2
 800346a:	d50e      	bpl.n	800348a <_svfiprintf_r+0x32>
 800346c:	690b      	ldr	r3, [r1, #16]
 800346e:	b963      	cbnz	r3, 800348a <_svfiprintf_r+0x32>
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	f000 fafd 	bl	8003a70 <_malloc_r>
 8003476:	6028      	str	r0, [r5, #0]
 8003478:	6128      	str	r0, [r5, #16]
 800347a:	b920      	cbnz	r0, 8003486 <_svfiprintf_r+0x2e>
 800347c:	230c      	movs	r3, #12
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	e0d1      	b.n	800362a <_svfiprintf_r+0x1d2>
 8003486:	2340      	movs	r3, #64	; 0x40
 8003488:	616b      	str	r3, [r5, #20]
 800348a:	2300      	movs	r3, #0
 800348c:	9309      	str	r3, [sp, #36]	; 0x24
 800348e:	2320      	movs	r3, #32
 8003490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003494:	f8cd 800c 	str.w	r8, [sp, #12]
 8003498:	2330      	movs	r3, #48	; 0x30
 800349a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003644 <_svfiprintf_r+0x1ec>
 800349e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034a2:	f04f 0901 	mov.w	r9, #1
 80034a6:	4623      	mov	r3, r4
 80034a8:	469a      	mov	sl, r3
 80034aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034ae:	b10a      	cbz	r2, 80034b4 <_svfiprintf_r+0x5c>
 80034b0:	2a25      	cmp	r2, #37	; 0x25
 80034b2:	d1f9      	bne.n	80034a8 <_svfiprintf_r+0x50>
 80034b4:	ebba 0b04 	subs.w	fp, sl, r4
 80034b8:	d00b      	beq.n	80034d2 <_svfiprintf_r+0x7a>
 80034ba:	465b      	mov	r3, fp
 80034bc:	4622      	mov	r2, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	4638      	mov	r0, r7
 80034c2:	f7ff ff6d 	bl	80033a0 <__ssputs_r>
 80034c6:	3001      	adds	r0, #1
 80034c8:	f000 80aa 	beq.w	8003620 <_svfiprintf_r+0x1c8>
 80034cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ce:	445a      	add	r2, fp
 80034d0:	9209      	str	r2, [sp, #36]	; 0x24
 80034d2:	f89a 3000 	ldrb.w	r3, [sl]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80a2 	beq.w	8003620 <_svfiprintf_r+0x1c8>
 80034dc:	2300      	movs	r3, #0
 80034de:	f04f 32ff 	mov.w	r2, #4294967295
 80034e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034e6:	f10a 0a01 	add.w	sl, sl, #1
 80034ea:	9304      	str	r3, [sp, #16]
 80034ec:	9307      	str	r3, [sp, #28]
 80034ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034f2:	931a      	str	r3, [sp, #104]	; 0x68
 80034f4:	4654      	mov	r4, sl
 80034f6:	2205      	movs	r2, #5
 80034f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034fc:	4851      	ldr	r0, [pc, #324]	; (8003644 <_svfiprintf_r+0x1ec>)
 80034fe:	f7fc fe8f 	bl	8000220 <memchr>
 8003502:	9a04      	ldr	r2, [sp, #16]
 8003504:	b9d8      	cbnz	r0, 800353e <_svfiprintf_r+0xe6>
 8003506:	06d0      	lsls	r0, r2, #27
 8003508:	bf44      	itt	mi
 800350a:	2320      	movmi	r3, #32
 800350c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003510:	0711      	lsls	r1, r2, #28
 8003512:	bf44      	itt	mi
 8003514:	232b      	movmi	r3, #43	; 0x2b
 8003516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800351a:	f89a 3000 	ldrb.w	r3, [sl]
 800351e:	2b2a      	cmp	r3, #42	; 0x2a
 8003520:	d015      	beq.n	800354e <_svfiprintf_r+0xf6>
 8003522:	9a07      	ldr	r2, [sp, #28]
 8003524:	4654      	mov	r4, sl
 8003526:	2000      	movs	r0, #0
 8003528:	f04f 0c0a 	mov.w	ip, #10
 800352c:	4621      	mov	r1, r4
 800352e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003532:	3b30      	subs	r3, #48	; 0x30
 8003534:	2b09      	cmp	r3, #9
 8003536:	d94e      	bls.n	80035d6 <_svfiprintf_r+0x17e>
 8003538:	b1b0      	cbz	r0, 8003568 <_svfiprintf_r+0x110>
 800353a:	9207      	str	r2, [sp, #28]
 800353c:	e014      	b.n	8003568 <_svfiprintf_r+0x110>
 800353e:	eba0 0308 	sub.w	r3, r0, r8
 8003542:	fa09 f303 	lsl.w	r3, r9, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	9304      	str	r3, [sp, #16]
 800354a:	46a2      	mov	sl, r4
 800354c:	e7d2      	b.n	80034f4 <_svfiprintf_r+0x9c>
 800354e:	9b03      	ldr	r3, [sp, #12]
 8003550:	1d19      	adds	r1, r3, #4
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	9103      	str	r1, [sp, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	bfbb      	ittet	lt
 800355a:	425b      	neglt	r3, r3
 800355c:	f042 0202 	orrlt.w	r2, r2, #2
 8003560:	9307      	strge	r3, [sp, #28]
 8003562:	9307      	strlt	r3, [sp, #28]
 8003564:	bfb8      	it	lt
 8003566:	9204      	strlt	r2, [sp, #16]
 8003568:	7823      	ldrb	r3, [r4, #0]
 800356a:	2b2e      	cmp	r3, #46	; 0x2e
 800356c:	d10c      	bne.n	8003588 <_svfiprintf_r+0x130>
 800356e:	7863      	ldrb	r3, [r4, #1]
 8003570:	2b2a      	cmp	r3, #42	; 0x2a
 8003572:	d135      	bne.n	80035e0 <_svfiprintf_r+0x188>
 8003574:	9b03      	ldr	r3, [sp, #12]
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	9203      	str	r2, [sp, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	bfb8      	it	lt
 8003580:	f04f 33ff 	movlt.w	r3, #4294967295
 8003584:	3402      	adds	r4, #2
 8003586:	9305      	str	r3, [sp, #20]
 8003588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003654 <_svfiprintf_r+0x1fc>
 800358c:	7821      	ldrb	r1, [r4, #0]
 800358e:	2203      	movs	r2, #3
 8003590:	4650      	mov	r0, sl
 8003592:	f7fc fe45 	bl	8000220 <memchr>
 8003596:	b140      	cbz	r0, 80035aa <_svfiprintf_r+0x152>
 8003598:	2340      	movs	r3, #64	; 0x40
 800359a:	eba0 000a 	sub.w	r0, r0, sl
 800359e:	fa03 f000 	lsl.w	r0, r3, r0
 80035a2:	9b04      	ldr	r3, [sp, #16]
 80035a4:	4303      	orrs	r3, r0
 80035a6:	3401      	adds	r4, #1
 80035a8:	9304      	str	r3, [sp, #16]
 80035aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ae:	4826      	ldr	r0, [pc, #152]	; (8003648 <_svfiprintf_r+0x1f0>)
 80035b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035b4:	2206      	movs	r2, #6
 80035b6:	f7fc fe33 	bl	8000220 <memchr>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d038      	beq.n	8003630 <_svfiprintf_r+0x1d8>
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <_svfiprintf_r+0x1f4>)
 80035c0:	bb1b      	cbnz	r3, 800360a <_svfiprintf_r+0x1b2>
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	3307      	adds	r3, #7
 80035c6:	f023 0307 	bic.w	r3, r3, #7
 80035ca:	3308      	adds	r3, #8
 80035cc:	9303      	str	r3, [sp, #12]
 80035ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d0:	4433      	add	r3, r6
 80035d2:	9309      	str	r3, [sp, #36]	; 0x24
 80035d4:	e767      	b.n	80034a6 <_svfiprintf_r+0x4e>
 80035d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035da:	460c      	mov	r4, r1
 80035dc:	2001      	movs	r0, #1
 80035de:	e7a5      	b.n	800352c <_svfiprintf_r+0xd4>
 80035e0:	2300      	movs	r3, #0
 80035e2:	3401      	adds	r4, #1
 80035e4:	9305      	str	r3, [sp, #20]
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 0c0a 	mov.w	ip, #10
 80035ec:	4620      	mov	r0, r4
 80035ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035f2:	3a30      	subs	r2, #48	; 0x30
 80035f4:	2a09      	cmp	r2, #9
 80035f6:	d903      	bls.n	8003600 <_svfiprintf_r+0x1a8>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0c5      	beq.n	8003588 <_svfiprintf_r+0x130>
 80035fc:	9105      	str	r1, [sp, #20]
 80035fe:	e7c3      	b.n	8003588 <_svfiprintf_r+0x130>
 8003600:	fb0c 2101 	mla	r1, ip, r1, r2
 8003604:	4604      	mov	r4, r0
 8003606:	2301      	movs	r3, #1
 8003608:	e7f0      	b.n	80035ec <_svfiprintf_r+0x194>
 800360a:	ab03      	add	r3, sp, #12
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	462a      	mov	r2, r5
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <_svfiprintf_r+0x1f8>)
 8003612:	a904      	add	r1, sp, #16
 8003614:	4638      	mov	r0, r7
 8003616:	f3af 8000 	nop.w
 800361a:	1c42      	adds	r2, r0, #1
 800361c:	4606      	mov	r6, r0
 800361e:	d1d6      	bne.n	80035ce <_svfiprintf_r+0x176>
 8003620:	89ab      	ldrh	r3, [r5, #12]
 8003622:	065b      	lsls	r3, r3, #25
 8003624:	f53f af2c 	bmi.w	8003480 <_svfiprintf_r+0x28>
 8003628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800362a:	b01d      	add	sp, #116	; 0x74
 800362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003630:	ab03      	add	r3, sp, #12
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	462a      	mov	r2, r5
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <_svfiprintf_r+0x1f8>)
 8003638:	a904      	add	r1, sp, #16
 800363a:	4638      	mov	r0, r7
 800363c:	f000 f87a 	bl	8003734 <_printf_i>
 8003640:	e7eb      	b.n	800361a <_svfiprintf_r+0x1c2>
 8003642:	bf00      	nop
 8003644:	08003c24 	.word	0x08003c24
 8003648:	08003c2e 	.word	0x08003c2e
 800364c:	00000000 	.word	0x00000000
 8003650:	080033a1 	.word	0x080033a1
 8003654:	08003c2a 	.word	0x08003c2a

08003658 <_printf_common>:
 8003658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800365c:	4616      	mov	r6, r2
 800365e:	4699      	mov	r9, r3
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	690b      	ldr	r3, [r1, #16]
 8003664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003668:	4293      	cmp	r3, r2
 800366a:	bfb8      	it	lt
 800366c:	4613      	movlt	r3, r2
 800366e:	6033      	str	r3, [r6, #0]
 8003670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003674:	4607      	mov	r7, r0
 8003676:	460c      	mov	r4, r1
 8003678:	b10a      	cbz	r2, 800367e <_printf_common+0x26>
 800367a:	3301      	adds	r3, #1
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	0699      	lsls	r1, r3, #26
 8003682:	bf42      	ittt	mi
 8003684:	6833      	ldrmi	r3, [r6, #0]
 8003686:	3302      	addmi	r3, #2
 8003688:	6033      	strmi	r3, [r6, #0]
 800368a:	6825      	ldr	r5, [r4, #0]
 800368c:	f015 0506 	ands.w	r5, r5, #6
 8003690:	d106      	bne.n	80036a0 <_printf_common+0x48>
 8003692:	f104 0a19 	add.w	sl, r4, #25
 8003696:	68e3      	ldr	r3, [r4, #12]
 8003698:	6832      	ldr	r2, [r6, #0]
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	42ab      	cmp	r3, r5
 800369e:	dc26      	bgt.n	80036ee <_printf_common+0x96>
 80036a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a4:	1e13      	subs	r3, r2, #0
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	bf18      	it	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	0692      	lsls	r2, r2, #26
 80036ae:	d42b      	bmi.n	8003708 <_printf_common+0xb0>
 80036b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b4:	4649      	mov	r1, r9
 80036b6:	4638      	mov	r0, r7
 80036b8:	47c0      	blx	r8
 80036ba:	3001      	adds	r0, #1
 80036bc:	d01e      	beq.n	80036fc <_printf_common+0xa4>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	68e5      	ldr	r5, [r4, #12]
 80036c2:	6832      	ldr	r2, [r6, #0]
 80036c4:	f003 0306 	and.w	r3, r3, #6
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	bf08      	it	eq
 80036cc:	1aad      	subeq	r5, r5, r2
 80036ce:	68a3      	ldr	r3, [r4, #8]
 80036d0:	6922      	ldr	r2, [r4, #16]
 80036d2:	bf0c      	ite	eq
 80036d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d8:	2500      	movne	r5, #0
 80036da:	4293      	cmp	r3, r2
 80036dc:	bfc4      	itt	gt
 80036de:	1a9b      	subgt	r3, r3, r2
 80036e0:	18ed      	addgt	r5, r5, r3
 80036e2:	2600      	movs	r6, #0
 80036e4:	341a      	adds	r4, #26
 80036e6:	42b5      	cmp	r5, r6
 80036e8:	d11a      	bne.n	8003720 <_printf_common+0xc8>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e008      	b.n	8003700 <_printf_common+0xa8>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4652      	mov	r2, sl
 80036f2:	4649      	mov	r1, r9
 80036f4:	4638      	mov	r0, r7
 80036f6:	47c0      	blx	r8
 80036f8:	3001      	adds	r0, #1
 80036fa:	d103      	bne.n	8003704 <_printf_common+0xac>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	3501      	adds	r5, #1
 8003706:	e7c6      	b.n	8003696 <_printf_common+0x3e>
 8003708:	18e1      	adds	r1, r4, r3
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	2030      	movs	r0, #48	; 0x30
 800370e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003712:	4422      	add	r2, r4
 8003714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800371c:	3302      	adds	r3, #2
 800371e:	e7c7      	b.n	80036b0 <_printf_common+0x58>
 8003720:	2301      	movs	r3, #1
 8003722:	4622      	mov	r2, r4
 8003724:	4649      	mov	r1, r9
 8003726:	4638      	mov	r0, r7
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0e6      	beq.n	80036fc <_printf_common+0xa4>
 800372e:	3601      	adds	r6, #1
 8003730:	e7d9      	b.n	80036e6 <_printf_common+0x8e>
	...

08003734 <_printf_i>:
 8003734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	460c      	mov	r4, r1
 800373a:	4691      	mov	r9, r2
 800373c:	7e27      	ldrb	r7, [r4, #24]
 800373e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003740:	2f78      	cmp	r7, #120	; 0x78
 8003742:	4680      	mov	r8, r0
 8003744:	469a      	mov	sl, r3
 8003746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800374a:	d807      	bhi.n	800375c <_printf_i+0x28>
 800374c:	2f62      	cmp	r7, #98	; 0x62
 800374e:	d80a      	bhi.n	8003766 <_printf_i+0x32>
 8003750:	2f00      	cmp	r7, #0
 8003752:	f000 80d8 	beq.w	8003906 <_printf_i+0x1d2>
 8003756:	2f58      	cmp	r7, #88	; 0x58
 8003758:	f000 80a3 	beq.w	80038a2 <_printf_i+0x16e>
 800375c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003764:	e03a      	b.n	80037dc <_printf_i+0xa8>
 8003766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800376a:	2b15      	cmp	r3, #21
 800376c:	d8f6      	bhi.n	800375c <_printf_i+0x28>
 800376e:	a001      	add	r0, pc, #4	; (adr r0, 8003774 <_printf_i+0x40>)
 8003770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037e1 	.word	0x080037e1
 800377c:	0800375d 	.word	0x0800375d
 8003780:	0800375d 	.word	0x0800375d
 8003784:	0800375d 	.word	0x0800375d
 8003788:	0800375d 	.word	0x0800375d
 800378c:	080037e1 	.word	0x080037e1
 8003790:	0800375d 	.word	0x0800375d
 8003794:	0800375d 	.word	0x0800375d
 8003798:	0800375d 	.word	0x0800375d
 800379c:	0800375d 	.word	0x0800375d
 80037a0:	080038ed 	.word	0x080038ed
 80037a4:	08003811 	.word	0x08003811
 80037a8:	080038cf 	.word	0x080038cf
 80037ac:	0800375d 	.word	0x0800375d
 80037b0:	0800375d 	.word	0x0800375d
 80037b4:	0800390f 	.word	0x0800390f
 80037b8:	0800375d 	.word	0x0800375d
 80037bc:	08003811 	.word	0x08003811
 80037c0:	0800375d 	.word	0x0800375d
 80037c4:	0800375d 	.word	0x0800375d
 80037c8:	080038d7 	.word	0x080038d7
 80037cc:	680b      	ldr	r3, [r1, #0]
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	600a      	str	r2, [r1, #0]
 80037d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037dc:	2301      	movs	r3, #1
 80037de:	e0a3      	b.n	8003928 <_printf_i+0x1f4>
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	6808      	ldr	r0, [r1, #0]
 80037e4:	062e      	lsls	r6, r5, #24
 80037e6:	f100 0304 	add.w	r3, r0, #4
 80037ea:	d50a      	bpl.n	8003802 <_printf_i+0xce>
 80037ec:	6805      	ldr	r5, [r0, #0]
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	da03      	bge.n	80037fc <_printf_i+0xc8>
 80037f4:	232d      	movs	r3, #45	; 0x2d
 80037f6:	426d      	negs	r5, r5
 80037f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fc:	485e      	ldr	r0, [pc, #376]	; (8003978 <_printf_i+0x244>)
 80037fe:	230a      	movs	r3, #10
 8003800:	e019      	b.n	8003836 <_printf_i+0x102>
 8003802:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003806:	6805      	ldr	r5, [r0, #0]
 8003808:	600b      	str	r3, [r1, #0]
 800380a:	bf18      	it	ne
 800380c:	b22d      	sxthne	r5, r5
 800380e:	e7ef      	b.n	80037f0 <_printf_i+0xbc>
 8003810:	680b      	ldr	r3, [r1, #0]
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	1d18      	adds	r0, r3, #4
 8003816:	6008      	str	r0, [r1, #0]
 8003818:	0628      	lsls	r0, r5, #24
 800381a:	d501      	bpl.n	8003820 <_printf_i+0xec>
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	e002      	b.n	8003826 <_printf_i+0xf2>
 8003820:	0669      	lsls	r1, r5, #25
 8003822:	d5fb      	bpl.n	800381c <_printf_i+0xe8>
 8003824:	881d      	ldrh	r5, [r3, #0]
 8003826:	4854      	ldr	r0, [pc, #336]	; (8003978 <_printf_i+0x244>)
 8003828:	2f6f      	cmp	r7, #111	; 0x6f
 800382a:	bf0c      	ite	eq
 800382c:	2308      	moveq	r3, #8
 800382e:	230a      	movne	r3, #10
 8003830:	2100      	movs	r1, #0
 8003832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003836:	6866      	ldr	r6, [r4, #4]
 8003838:	60a6      	str	r6, [r4, #8]
 800383a:	2e00      	cmp	r6, #0
 800383c:	bfa2      	ittt	ge
 800383e:	6821      	ldrge	r1, [r4, #0]
 8003840:	f021 0104 	bicge.w	r1, r1, #4
 8003844:	6021      	strge	r1, [r4, #0]
 8003846:	b90d      	cbnz	r5, 800384c <_printf_i+0x118>
 8003848:	2e00      	cmp	r6, #0
 800384a:	d04d      	beq.n	80038e8 <_printf_i+0x1b4>
 800384c:	4616      	mov	r6, r2
 800384e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003852:	fb03 5711 	mls	r7, r3, r1, r5
 8003856:	5dc7      	ldrb	r7, [r0, r7]
 8003858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800385c:	462f      	mov	r7, r5
 800385e:	42bb      	cmp	r3, r7
 8003860:	460d      	mov	r5, r1
 8003862:	d9f4      	bls.n	800384e <_printf_i+0x11a>
 8003864:	2b08      	cmp	r3, #8
 8003866:	d10b      	bne.n	8003880 <_printf_i+0x14c>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	07df      	lsls	r7, r3, #31
 800386c:	d508      	bpl.n	8003880 <_printf_i+0x14c>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	6861      	ldr	r1, [r4, #4]
 8003872:	4299      	cmp	r1, r3
 8003874:	bfde      	ittt	le
 8003876:	2330      	movle	r3, #48	; 0x30
 8003878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800387c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003880:	1b92      	subs	r2, r2, r6
 8003882:	6122      	str	r2, [r4, #16]
 8003884:	f8cd a000 	str.w	sl, [sp]
 8003888:	464b      	mov	r3, r9
 800388a:	aa03      	add	r2, sp, #12
 800388c:	4621      	mov	r1, r4
 800388e:	4640      	mov	r0, r8
 8003890:	f7ff fee2 	bl	8003658 <_printf_common>
 8003894:	3001      	adds	r0, #1
 8003896:	d14c      	bne.n	8003932 <_printf_i+0x1fe>
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	b004      	add	sp, #16
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a2:	4835      	ldr	r0, [pc, #212]	; (8003978 <_printf_i+0x244>)
 80038a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	680e      	ldr	r6, [r1, #0]
 80038ac:	061f      	lsls	r7, r3, #24
 80038ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80038b2:	600e      	str	r6, [r1, #0]
 80038b4:	d514      	bpl.n	80038e0 <_printf_i+0x1ac>
 80038b6:	07d9      	lsls	r1, r3, #31
 80038b8:	bf44      	itt	mi
 80038ba:	f043 0320 	orrmi.w	r3, r3, #32
 80038be:	6023      	strmi	r3, [r4, #0]
 80038c0:	b91d      	cbnz	r5, 80038ca <_printf_i+0x196>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	f023 0320 	bic.w	r3, r3, #32
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	2310      	movs	r3, #16
 80038cc:	e7b0      	b.n	8003830 <_printf_i+0xfc>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	f043 0320 	orr.w	r3, r3, #32
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	2378      	movs	r3, #120	; 0x78
 80038d8:	4828      	ldr	r0, [pc, #160]	; (800397c <_printf_i+0x248>)
 80038da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038de:	e7e3      	b.n	80038a8 <_printf_i+0x174>
 80038e0:	065e      	lsls	r6, r3, #25
 80038e2:	bf48      	it	mi
 80038e4:	b2ad      	uxthmi	r5, r5
 80038e6:	e7e6      	b.n	80038b6 <_printf_i+0x182>
 80038e8:	4616      	mov	r6, r2
 80038ea:	e7bb      	b.n	8003864 <_printf_i+0x130>
 80038ec:	680b      	ldr	r3, [r1, #0]
 80038ee:	6826      	ldr	r6, [r4, #0]
 80038f0:	6960      	ldr	r0, [r4, #20]
 80038f2:	1d1d      	adds	r5, r3, #4
 80038f4:	600d      	str	r5, [r1, #0]
 80038f6:	0635      	lsls	r5, r6, #24
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	d501      	bpl.n	8003900 <_printf_i+0x1cc>
 80038fc:	6018      	str	r0, [r3, #0]
 80038fe:	e002      	b.n	8003906 <_printf_i+0x1d2>
 8003900:	0671      	lsls	r1, r6, #25
 8003902:	d5fb      	bpl.n	80038fc <_printf_i+0x1c8>
 8003904:	8018      	strh	r0, [r3, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	6123      	str	r3, [r4, #16]
 800390a:	4616      	mov	r6, r2
 800390c:	e7ba      	b.n	8003884 <_printf_i+0x150>
 800390e:	680b      	ldr	r3, [r1, #0]
 8003910:	1d1a      	adds	r2, r3, #4
 8003912:	600a      	str	r2, [r1, #0]
 8003914:	681e      	ldr	r6, [r3, #0]
 8003916:	6862      	ldr	r2, [r4, #4]
 8003918:	2100      	movs	r1, #0
 800391a:	4630      	mov	r0, r6
 800391c:	f7fc fc80 	bl	8000220 <memchr>
 8003920:	b108      	cbz	r0, 8003926 <_printf_i+0x1f2>
 8003922:	1b80      	subs	r0, r0, r6
 8003924:	6060      	str	r0, [r4, #4]
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	6123      	str	r3, [r4, #16]
 800392a:	2300      	movs	r3, #0
 800392c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003930:	e7a8      	b.n	8003884 <_printf_i+0x150>
 8003932:	6923      	ldr	r3, [r4, #16]
 8003934:	4632      	mov	r2, r6
 8003936:	4649      	mov	r1, r9
 8003938:	4640      	mov	r0, r8
 800393a:	47d0      	blx	sl
 800393c:	3001      	adds	r0, #1
 800393e:	d0ab      	beq.n	8003898 <_printf_i+0x164>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	079b      	lsls	r3, r3, #30
 8003944:	d413      	bmi.n	800396e <_printf_i+0x23a>
 8003946:	68e0      	ldr	r0, [r4, #12]
 8003948:	9b03      	ldr	r3, [sp, #12]
 800394a:	4298      	cmp	r0, r3
 800394c:	bfb8      	it	lt
 800394e:	4618      	movlt	r0, r3
 8003950:	e7a4      	b.n	800389c <_printf_i+0x168>
 8003952:	2301      	movs	r3, #1
 8003954:	4632      	mov	r2, r6
 8003956:	4649      	mov	r1, r9
 8003958:	4640      	mov	r0, r8
 800395a:	47d0      	blx	sl
 800395c:	3001      	adds	r0, #1
 800395e:	d09b      	beq.n	8003898 <_printf_i+0x164>
 8003960:	3501      	adds	r5, #1
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	9903      	ldr	r1, [sp, #12]
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	42ab      	cmp	r3, r5
 800396a:	dcf2      	bgt.n	8003952 <_printf_i+0x21e>
 800396c:	e7eb      	b.n	8003946 <_printf_i+0x212>
 800396e:	2500      	movs	r5, #0
 8003970:	f104 0619 	add.w	r6, r4, #25
 8003974:	e7f5      	b.n	8003962 <_printf_i+0x22e>
 8003976:	bf00      	nop
 8003978:	08003c35 	.word	0x08003c35
 800397c:	08003c46 	.word	0x08003c46

08003980 <memcpy>:
 8003980:	440a      	add	r2, r1
 8003982:	4291      	cmp	r1, r2
 8003984:	f100 33ff 	add.w	r3, r0, #4294967295
 8003988:	d100      	bne.n	800398c <memcpy+0xc>
 800398a:	4770      	bx	lr
 800398c:	b510      	push	{r4, lr}
 800398e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003996:	4291      	cmp	r1, r2
 8003998:	d1f9      	bne.n	800398e <memcpy+0xe>
 800399a:	bd10      	pop	{r4, pc}

0800399c <memmove>:
 800399c:	4288      	cmp	r0, r1
 800399e:	b510      	push	{r4, lr}
 80039a0:	eb01 0402 	add.w	r4, r1, r2
 80039a4:	d902      	bls.n	80039ac <memmove+0x10>
 80039a6:	4284      	cmp	r4, r0
 80039a8:	4623      	mov	r3, r4
 80039aa:	d807      	bhi.n	80039bc <memmove+0x20>
 80039ac:	1e43      	subs	r3, r0, #1
 80039ae:	42a1      	cmp	r1, r4
 80039b0:	d008      	beq.n	80039c4 <memmove+0x28>
 80039b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ba:	e7f8      	b.n	80039ae <memmove+0x12>
 80039bc:	4402      	add	r2, r0
 80039be:	4601      	mov	r1, r0
 80039c0:	428a      	cmp	r2, r1
 80039c2:	d100      	bne.n	80039c6 <memmove+0x2a>
 80039c4:	bd10      	pop	{r4, pc}
 80039c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ce:	e7f7      	b.n	80039c0 <memmove+0x24>

080039d0 <_free_r>:
 80039d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039d2:	2900      	cmp	r1, #0
 80039d4:	d048      	beq.n	8003a68 <_free_r+0x98>
 80039d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039da:	9001      	str	r0, [sp, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f1a1 0404 	sub.w	r4, r1, #4
 80039e2:	bfb8      	it	lt
 80039e4:	18e4      	addlt	r4, r4, r3
 80039e6:	f000 f8d3 	bl	8003b90 <__malloc_lock>
 80039ea:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <_free_r+0x9c>)
 80039ec:	9801      	ldr	r0, [sp, #4]
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	4615      	mov	r5, r2
 80039f2:	b933      	cbnz	r3, 8003a02 <_free_r+0x32>
 80039f4:	6063      	str	r3, [r4, #4]
 80039f6:	6014      	str	r4, [r2, #0]
 80039f8:	b003      	add	sp, #12
 80039fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039fe:	f000 b8cd 	b.w	8003b9c <__malloc_unlock>
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	d90b      	bls.n	8003a1e <_free_r+0x4e>
 8003a06:	6821      	ldr	r1, [r4, #0]
 8003a08:	1862      	adds	r2, r4, r1
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	bf04      	itt	eq
 8003a0e:	681a      	ldreq	r2, [r3, #0]
 8003a10:	685b      	ldreq	r3, [r3, #4]
 8003a12:	6063      	str	r3, [r4, #4]
 8003a14:	bf04      	itt	eq
 8003a16:	1852      	addeq	r2, r2, r1
 8003a18:	6022      	streq	r2, [r4, #0]
 8003a1a:	602c      	str	r4, [r5, #0]
 8003a1c:	e7ec      	b.n	80039f8 <_free_r+0x28>
 8003a1e:	461a      	mov	r2, r3
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b10b      	cbz	r3, 8003a28 <_free_r+0x58>
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	d9fa      	bls.n	8003a1e <_free_r+0x4e>
 8003a28:	6811      	ldr	r1, [r2, #0]
 8003a2a:	1855      	adds	r5, r2, r1
 8003a2c:	42a5      	cmp	r5, r4
 8003a2e:	d10b      	bne.n	8003a48 <_free_r+0x78>
 8003a30:	6824      	ldr	r4, [r4, #0]
 8003a32:	4421      	add	r1, r4
 8003a34:	1854      	adds	r4, r2, r1
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	d1dd      	bne.n	80039f8 <_free_r+0x28>
 8003a3c:	681c      	ldr	r4, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	6053      	str	r3, [r2, #4]
 8003a42:	4421      	add	r1, r4
 8003a44:	6011      	str	r1, [r2, #0]
 8003a46:	e7d7      	b.n	80039f8 <_free_r+0x28>
 8003a48:	d902      	bls.n	8003a50 <_free_r+0x80>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6003      	str	r3, [r0, #0]
 8003a4e:	e7d3      	b.n	80039f8 <_free_r+0x28>
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1961      	adds	r1, r4, r5
 8003a54:	428b      	cmp	r3, r1
 8003a56:	bf04      	itt	eq
 8003a58:	6819      	ldreq	r1, [r3, #0]
 8003a5a:	685b      	ldreq	r3, [r3, #4]
 8003a5c:	6063      	str	r3, [r4, #4]
 8003a5e:	bf04      	itt	eq
 8003a60:	1949      	addeq	r1, r1, r5
 8003a62:	6021      	streq	r1, [r4, #0]
 8003a64:	6054      	str	r4, [r2, #4]
 8003a66:	e7c7      	b.n	80039f8 <_free_r+0x28>
 8003a68:	b003      	add	sp, #12
 8003a6a:	bd30      	pop	{r4, r5, pc}
 8003a6c:	200000b4 	.word	0x200000b4

08003a70 <_malloc_r>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	1ccd      	adds	r5, r1, #3
 8003a74:	f025 0503 	bic.w	r5, r5, #3
 8003a78:	3508      	adds	r5, #8
 8003a7a:	2d0c      	cmp	r5, #12
 8003a7c:	bf38      	it	cc
 8003a7e:	250c      	movcc	r5, #12
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	4606      	mov	r6, r0
 8003a84:	db01      	blt.n	8003a8a <_malloc_r+0x1a>
 8003a86:	42a9      	cmp	r1, r5
 8003a88:	d903      	bls.n	8003a92 <_malloc_r+0x22>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	6033      	str	r3, [r6, #0]
 8003a8e:	2000      	movs	r0, #0
 8003a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a92:	f000 f87d 	bl	8003b90 <__malloc_lock>
 8003a96:	4921      	ldr	r1, [pc, #132]	; (8003b1c <_malloc_r+0xac>)
 8003a98:	680a      	ldr	r2, [r1, #0]
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	b99c      	cbnz	r4, 8003ac6 <_malloc_r+0x56>
 8003a9e:	4f20      	ldr	r7, [pc, #128]	; (8003b20 <_malloc_r+0xb0>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	b923      	cbnz	r3, 8003aae <_malloc_r+0x3e>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f000 f862 	bl	8003b70 <_sbrk_r>
 8003aac:	6038      	str	r0, [r7, #0]
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	f000 f85d 	bl	8003b70 <_sbrk_r>
 8003ab6:	1c43      	adds	r3, r0, #1
 8003ab8:	d123      	bne.n	8003b02 <_malloc_r+0x92>
 8003aba:	230c      	movs	r3, #12
 8003abc:	6033      	str	r3, [r6, #0]
 8003abe:	4630      	mov	r0, r6
 8003ac0:	f000 f86c 	bl	8003b9c <__malloc_unlock>
 8003ac4:	e7e3      	b.n	8003a8e <_malloc_r+0x1e>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	1b5b      	subs	r3, r3, r5
 8003aca:	d417      	bmi.n	8003afc <_malloc_r+0x8c>
 8003acc:	2b0b      	cmp	r3, #11
 8003ace:	d903      	bls.n	8003ad8 <_malloc_r+0x68>
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	441c      	add	r4, r3
 8003ad4:	6025      	str	r5, [r4, #0]
 8003ad6:	e004      	b.n	8003ae2 <_malloc_r+0x72>
 8003ad8:	6863      	ldr	r3, [r4, #4]
 8003ada:	42a2      	cmp	r2, r4
 8003adc:	bf0c      	ite	eq
 8003ade:	600b      	streq	r3, [r1, #0]
 8003ae0:	6053      	strne	r3, [r2, #4]
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 f85a 	bl	8003b9c <__malloc_unlock>
 8003ae8:	f104 000b 	add.w	r0, r4, #11
 8003aec:	1d23      	adds	r3, r4, #4
 8003aee:	f020 0007 	bic.w	r0, r0, #7
 8003af2:	1ac2      	subs	r2, r0, r3
 8003af4:	d0cc      	beq.n	8003a90 <_malloc_r+0x20>
 8003af6:	1a1b      	subs	r3, r3, r0
 8003af8:	50a3      	str	r3, [r4, r2]
 8003afa:	e7c9      	b.n	8003a90 <_malloc_r+0x20>
 8003afc:	4622      	mov	r2, r4
 8003afe:	6864      	ldr	r4, [r4, #4]
 8003b00:	e7cc      	b.n	8003a9c <_malloc_r+0x2c>
 8003b02:	1cc4      	adds	r4, r0, #3
 8003b04:	f024 0403 	bic.w	r4, r4, #3
 8003b08:	42a0      	cmp	r0, r4
 8003b0a:	d0e3      	beq.n	8003ad4 <_malloc_r+0x64>
 8003b0c:	1a21      	subs	r1, r4, r0
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f000 f82e 	bl	8003b70 <_sbrk_r>
 8003b14:	3001      	adds	r0, #1
 8003b16:	d1dd      	bne.n	8003ad4 <_malloc_r+0x64>
 8003b18:	e7cf      	b.n	8003aba <_malloc_r+0x4a>
 8003b1a:	bf00      	nop
 8003b1c:	200000b4 	.word	0x200000b4
 8003b20:	200000b8 	.word	0x200000b8

08003b24 <_realloc_r>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	4607      	mov	r7, r0
 8003b28:	4614      	mov	r4, r2
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	b921      	cbnz	r1, 8003b38 <_realloc_r+0x14>
 8003b2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b32:	4611      	mov	r1, r2
 8003b34:	f7ff bf9c 	b.w	8003a70 <_malloc_r>
 8003b38:	b922      	cbnz	r2, 8003b44 <_realloc_r+0x20>
 8003b3a:	f7ff ff49 	bl	80039d0 <_free_r>
 8003b3e:	4625      	mov	r5, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b44:	f000 f830 	bl	8003ba8 <_malloc_usable_size_r>
 8003b48:	42a0      	cmp	r0, r4
 8003b4a:	d20f      	bcs.n	8003b6c <_realloc_r+0x48>
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	4638      	mov	r0, r7
 8003b50:	f7ff ff8e 	bl	8003a70 <_malloc_r>
 8003b54:	4605      	mov	r5, r0
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0f2      	beq.n	8003b40 <_realloc_r+0x1c>
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4622      	mov	r2, r4
 8003b5e:	f7ff ff0f 	bl	8003980 <memcpy>
 8003b62:	4631      	mov	r1, r6
 8003b64:	4638      	mov	r0, r7
 8003b66:	f7ff ff33 	bl	80039d0 <_free_r>
 8003b6a:	e7e9      	b.n	8003b40 <_realloc_r+0x1c>
 8003b6c:	4635      	mov	r5, r6
 8003b6e:	e7e7      	b.n	8003b40 <_realloc_r+0x1c>

08003b70 <_sbrk_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d06      	ldr	r5, [pc, #24]	; (8003b8c <_sbrk_r+0x1c>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fd ff04 	bl	8001988 <_sbrk>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_sbrk_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_sbrk_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	200001b0 	.word	0x200001b0

08003b90 <__malloc_lock>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__malloc_lock+0x8>)
 8003b92:	f000 b811 	b.w	8003bb8 <__retarget_lock_acquire_recursive>
 8003b96:	bf00      	nop
 8003b98:	200001b8 	.word	0x200001b8

08003b9c <__malloc_unlock>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__malloc_unlock+0x8>)
 8003b9e:	f000 b80c 	b.w	8003bba <__retarget_lock_release_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	200001b8 	.word	0x200001b8

08003ba8 <_malloc_usable_size_r>:
 8003ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bac:	1f18      	subs	r0, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfbc      	itt	lt
 8003bb2:	580b      	ldrlt	r3, [r1, r0]
 8003bb4:	18c0      	addlt	r0, r0, r3
 8003bb6:	4770      	bx	lr

08003bb8 <__retarget_lock_acquire_recursive>:
 8003bb8:	4770      	bx	lr

08003bba <__retarget_lock_release_recursive>:
 8003bba:	4770      	bx	lr

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
