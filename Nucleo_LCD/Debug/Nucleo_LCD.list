
Nucleo_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c3c  08004c3c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c44  08004c44  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000078  08004cc4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004cc4  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d88c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea9  00000000  00000000  0002d934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002326b  00000000  00000000  00030f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db5b  00000000  00000000  00054193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb54  00000000  00000000  00061cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013d842  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d8  00000000  00000000  0013d898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b94 	.word	0x08004b94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004b94 	.word	0x08004b94

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bd2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <DWT_Delay_Init+0x58>)
 8000bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bde:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000be6:	f023 0301 	bic.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000bfe:	bf00      	nop
  __NOP();
 8000c00:	bf00      	nop
  __NOP();
 8000c02:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <DWT_Delay_Init+0x5c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e000      	b.n	8000c12 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000c10:	2301      	movs	r3, #1
  }
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000edf0 	.word	0xe000edf0
 8000c20:	e0001000 	.word	0xe0001000

08000c24 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <DWT_Delay_us+0x40>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c32:	f002 f969 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <DWT_Delay_us+0x44>)
 8000c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3e:	0c9b      	lsrs	r3, r3, #18
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000c48:	bf00      	nop
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <DWT_Delay_us+0x40>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f8      	bcc.n	8000c4a <DWT_Delay_us+0x26>
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e0001000 	.word	0xe0001000
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <lcd16x2_enablePulse+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <lcd16x2_enablePulse+0x38>)
 8000c76:	8811      	ldrh	r1, [r2, #0]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 f82c 	bl	8002cd8 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000c80:	2014      	movs	r0, #20
 8000c82:	f7ff ffcf 	bl	8000c24 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <lcd16x2_enablePulse+0x34>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <lcd16x2_enablePulse+0x38>)
 8000c8c:	8811      	ldrh	r1, [r2, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 f821 	bl	8002cd8 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000c96:	203c      	movs	r0, #60	; 0x3c
 8000c98:	f7ff ffc4 	bl	8000c24 <DWT_Delay_us>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000094 	.word	0x20000094
 8000ca4:	2000009a 	.word	0x2000009a

08000ca8 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <lcd16x2_rs+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <lcd16x2_rs+0x28>)
 8000cb8:	8811      	ldrh	r1, [r2, #0]
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 f80b 	bl	8002cd8 <HAL_GPIO_WritePin>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000094 	.word	0x20000094
 8000cd0:	20000098 	.word	0x20000098

08000cd4 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	091b      	lsrs	r3, r3, #4
 8000cea:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <lcd16x2_write+0x198>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d05a      	beq.n	8000daa <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cf4:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <lcd16x2_write+0x19c>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <lcd16x2_write+0x1a0>)
 8000cfa:	8819      	ldrh	r1, [r3, #0]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	f001 ffe7 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000d0a:	4b59      	ldr	r3, [pc, #356]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <lcd16x2_write+0x1a4>)
 8000d10:	8819      	ldrh	r1, [r3, #0]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f001 ffdc 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d20:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <lcd16x2_write+0x1a8>)
 8000d26:	8819      	ldrh	r1, [r3, #0]
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	f001 ffd1 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <lcd16x2_write+0x19c>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <lcd16x2_write+0x1ac>)
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f001 ffc6 	bl	8002cd8 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000d52:	8819      	ldrh	r1, [r3, #0]
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f001 ffbb 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000d68:	8819      	ldrh	r1, [r3, #0]
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	f001 ffb0 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d78:	4b42      	ldr	r3, [pc, #264]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f001 ffa5 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000d94:	8819      	ldrh	r1, [r3, #0]
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f001 ff9a 	bl	8002cd8 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000da4:	f7ff ff62 	bl	8000c6c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000da8:	e05b      	b.n	8000e62 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000db0:	8819      	ldrh	r1, [r3, #0]
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f001 ff8c 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000dc0:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000dc6:	8819      	ldrh	r1, [r3, #0]
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f001 ff81 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f001 ff76 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000df2:	8819      	ldrh	r1, [r3, #0]
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f001 ff6b 	bl	8002cd8 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e02:	f7ff ff33 	bl	8000c6c <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <lcd16x2_write+0x1b4>)
 8000e0c:	8819      	ldrh	r1, [r3, #0]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	f001 ff5e 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <lcd16x2_write+0x1b8>)
 8000e22:	8819      	ldrh	r1, [r3, #0]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f001 ff53 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <lcd16x2_write+0x1bc>)
 8000e38:	8819      	ldrh	r1, [r3, #0]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	f001 ff48 	bl	8002cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <lcd16x2_write+0x1b0>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <lcd16x2_write+0x1c0>)
 8000e4e:	8819      	ldrh	r1, [r3, #0]
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	f001 ff3d 	bl	8002cd8 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000e5e:	f7ff ff05 	bl	8000c6c <lcd16x2_enablePulse>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	2000009c 	.word	0x2000009c
 8000e74:	200000a0 	.word	0x200000a0
 8000e78:	200000a2 	.word	0x200000a2
 8000e7c:	200000a4 	.word	0x200000a4
 8000e80:	200000a6 	.word	0x200000a6
 8000e84:	200000a8 	.word	0x200000a8
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	200000ae 	.word	0x200000ae
 8000e90:	200000b0 	.word	0x200000b0
 8000e94:	200000b2 	.word	0x200000b2

08000e98 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff00 	bl	8000ca8 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff12 	bl	8000cd4 <lcd16x2_write>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff fef0 	bl	8000ca8 <lcd16x2_rs>
  lcd16x2_write(data);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff02 	bl	8000cd4 <lcd16x2_write>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fedc 	bl	8000ca8 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <lcd16x2_write4+0x80>)
 8000ef6:	8819      	ldrh	r1, [r3, #0]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	f001 fee9 	bl	8002cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <lcd16x2_write4+0x84>)
 8000f0c:	8819      	ldrh	r1, [r3, #0]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f001 fede 	bl	8002cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <lcd16x2_write4+0x88>)
 8000f22:	8819      	ldrh	r1, [r3, #0]
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f001 fed3 	bl	8002cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <lcd16x2_write4+0x7c>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <lcd16x2_write4+0x8c>)
 8000f38:	8819      	ldrh	r1, [r3, #0]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f001 fec8 	bl	8002cd8 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000f48:	f7ff fe90 	bl	8000c6c <lcd16x2_enablePulse>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000a8 	.word	0x200000a8
 8000f58:	200000ac 	.word	0x200000ac
 8000f5c:	200000ae 	.word	0x200000ae
 8000f60:	200000b0 	.word	0x200000b0
 8000f64:	200000b2 	.word	0x200000b2

08000f68 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	817b      	strh	r3, [r7, #10]
 8000f76:	4613      	mov	r3, r2
 8000f78:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000f7a:	f7ff fe23 	bl	8000bc4 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <lcd16x2_init_4bits+0xa8>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <lcd16x2_init_4bits+0xac>)
 8000f86:	897b      	ldrh	r3, [r7, #10]
 8000f88:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000f8a:	4a23      	ldr	r2, [pc, #140]	; (8001018 <lcd16x2_init_4bits+0xb0>)
 8000f8c:	893b      	ldrh	r3, [r7, #8]
 8000f8e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <lcd16x2_init_4bits+0xb4>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <lcd16x2_init_4bits+0xb8>)
 8000f98:	8b3b      	ldrh	r3, [r7, #24]
 8000f9a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <lcd16x2_init_4bits+0xbc>)
 8000f9e:	8bbb      	ldrh	r3, [r7, #28]
 8000fa0:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <lcd16x2_init_4bits+0xc0>)
 8000fa4:	8c3b      	ldrh	r3, [r7, #32]
 8000fa6:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000fa8:	4a20      	ldr	r2, [pc, #128]	; (800102c <lcd16x2_init_4bits+0xc4>)
 8000faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fac:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <lcd16x2_init_4bits+0xc8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <lcd16x2_init_4bits+0xcc>)
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000fba:	2014      	movs	r0, #20
 8000fbc:	f000 ffe6 	bl	8001f8c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff ff89 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000fc6:	2005      	movs	r0, #5
 8000fc8:	f000 ffe0 	bl	8001f8c <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f7ff ff83 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 ffda 	bl	8001f8c <HAL_Delay>
  lcd16x2_write4(0x3);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f7ff ff7d 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 ffd4 	bl	8001f8c <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff ff77 	bl	8000ed8 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 ffce 	bl	8001f8c <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ff0:	2028      	movs	r0, #40	; 0x28
 8000ff2:	f7ff ff51 	bl	8000e98 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f7ff ff4e 	bl	8000e98 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ff4b 	bl	8000e98 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 ffc2 	bl	8001f8c <HAL_Delay>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000094 	.word	0x20000094
 8001014:	20000098 	.word	0x20000098
 8001018:	2000009a 	.word	0x2000009a
 800101c:	200000a8 	.word	0x200000a8
 8001020:	200000ac 	.word	0x200000ac
 8001024:	200000ae 	.word	0x200000ae
 8001028:	200000b0 	.word	0x200000b0
 800102c:	200000b2 	.word	0x200000b2
 8001030:	20000000 	.word	0x20000000
 8001034:	20000002 	.word	0x20000002

08001038 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff19 	bl	8000e98 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001066:	e007      	b.n	8001078 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800106e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff10 	bl	8000e98 <lcd16x2_writeCommand>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ffd6 	bl	8001038 <lcd16x2_setCursor>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001094:	2100      	movs	r1, #0
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ffce 	bl	8001038 <lcd16x2_setCursor>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if(state)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f043 0303 	orr.w	r3, r3, #3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010bc:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fee8 	bl	8000e98 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80010c8:	e00b      	b.n	80010e2 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010d6:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <lcd16x2_cursorShow+0x4c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fedb 	bl	8000e98 <lcd16x2_writeCommand>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000001 	.word	0x20000001

080010f0 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff fecf 	bl	8000e98 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 80010fa:	2003      	movs	r0, #3
 80010fc:	f000 ff46 	bl	8001f8c <HAL_Delay>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001104:	b40f      	push	{r0, r1, r2, r3}
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b089      	sub	sp, #36	; 0x24
 800110a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800110c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001110:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800111a:	4618      	mov	r0, r3
 800111c:	f003 f922 	bl	8004364 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	77fb      	strb	r3, [r7, #31]
 8001124:	e00b      	b.n	800113e <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	f107 0220 	add.w	r2, r7, #32
 800112c:	4413      	add	r3, r2
 800112e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fec0 	bl	8000eb8 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	3301      	adds	r3, #1
 800113c:	77fb      	strb	r3, [r7, #31]
 800113e:	7ffc      	ldrb	r4, [r7, #31]
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f863 	bl	8000210 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	429c      	cmp	r4, r3
 800114e:	d202      	bcs.n	8001156 <lcd16x2_printf+0x52>
 8001150:	7ffb      	ldrb	r3, [r7, #31]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d9e7      	bls.n	8001126 <lcd16x2_printf+0x22>
  }
}
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001160:	b004      	add	sp, #16
 8001162:	4770      	bx	lr

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fe9e 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f834 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 fa38 	bl	80015e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001174:	f000 f89e 	bl	80012b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001178:	f000 f8ee 	bl	8001358 <MX_ADC2_Init>
  MX_ADC3_Init();
 800117c:	f000 f93e 	bl	80013fc <MX_ADC3_Init>
  MX_TIM2_Init();
 8001180:	f000 f98e 	bl	80014a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001184:	f000 f9e0 	bl	8001548 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // ENCODER INTERRUPT
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001188:	213c      	movs	r1, #60	; 0x3c
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <main+0x60>)
 800118c:	f002 fc0d 	bl	80039aa <HAL_TIM_Encoder_Start_IT>

  // LCD STARTUP
  Lcd_Start_Up();
 8001190:	f000 fb3c 	bl	800180c <Lcd_Start_Up>
  // Start all 3 onboard ADCs
  HAL_ADC_Start(&hadc1);
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <main+0x64>)
 8001196:	f000 ff61 	bl	800205c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <main+0x68>)
 800119c:	f000 ff5e 	bl	800205c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <main+0x6c>)
 80011a2:	f000 ff5b 	bl	800205c <HAL_ADC_Start>
  HAL_Delay(1500);
 80011a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80011aa:	f000 feef 	bl	8001f8c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Get_Pot_Params();
 80011ae:	f000 fb6b 	bl	8001888 <Get_Pot_Params>

	  if (clear_flag)
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <main+0x70>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <main+0x5a>
		  lcd16x2_clear();
 80011ba:	f7ff ff99 	bl	80010f0 <lcd16x2_clear>

	  Update_Lcd();
 80011be:	f000 fac9 	bl	8001754 <Update_Lcd>
	  Get_Pot_Params();
 80011c2:	e7f4      	b.n	80011ae <main+0x4a>
 80011c4:	20000204 	.word	0x20000204
 80011c8:	20000174 	.word	0x20000174
 80011cc:	200000cc 	.word	0x200000cc
 80011d0:	200001bc 	.word	0x200001bc
 80011d4:	200000be 	.word	0x200000be

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2234      	movs	r2, #52	; 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f89e 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <SystemClock_Config+0xd4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a29      	ldr	r2, [pc, #164]	; (80012ac <SystemClock_Config+0xd4>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <SystemClock_Config+0xd4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <SystemClock_Config+0xd8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <SystemClock_Config+0xd8>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <SystemClock_Config+0xd8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800124c:	2310      	movs	r3, #16
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001254:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001256:	2304      	movs	r3, #4
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800125e:	2302      	movs	r3, #2
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f80c 	bl	8003284 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001272:	f000 fc27 	bl	8001ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2302      	movs	r3, #2
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2102      	movs	r1, #2
 8001292:	4618      	mov	r0, r3
 8001294:	f001 fd52 	bl	8002d3c <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800129e:	f000 fc11 	bl	8001ac4 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_ADC1_Init+0x98>)
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <MX_ADC1_Init+0x9c>)
 80012ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_ADC1_Init+0x98>)
 80012ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_ADC1_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_ADC1_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_ADC1_Init+0x98>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC1_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_ADC1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_ADC1_Init+0x98>)
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <MX_ADC1_Init+0xa0>)
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_ADC1_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_ADC1_Init+0x98>)
 8001302:	2201      	movs	r2, #1
 8001304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_ADC1_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_ADC1_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_ADC1_Init+0x98>)
 8001316:	f000 fe5d 	bl	8001fd4 <HAL_ADC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 fbd0 	bl	8001ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800132c:	2304      	movs	r3, #4
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_ADC1_Init+0x98>)
 8001336:	f000 fffb 	bl	8002330 <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001340:	f000 fbc0 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000174 	.word	0x20000174
 8001350:	40012000 	.word	0x40012000
 8001354:	0f000001 	.word	0x0f000001

08001358 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_ADC2_Init+0x98>)
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <MX_ADC2_Init+0x9c>)
 800136e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_ADC2_Init+0x98>)
 8001372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001376:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_ADC2_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_ADC2_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_ADC2_Init+0x98>)
 8001386:	2201      	movs	r2, #1
 8001388:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_ADC2_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_ADC2_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_ADC2_Init+0x98>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <MX_ADC2_Init+0xa0>)
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_ADC2_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_ADC2_Init+0x98>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_ADC2_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC2_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_ADC2_Init+0x98>)
 80013ba:	f000 fe0b 	bl	8001fd4 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 fb7e 	bl	8001ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80013d0:	2304      	movs	r3, #4
 80013d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_ADC2_Init+0x98>)
 80013da:	f000 ffa9 	bl	8002330 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80013e4:	f000 fb6e 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000cc 	.word	0x200000cc
 80013f4:	40012100 	.word	0x40012100
 80013f8:	0f000001 	.word	0x0f000001

080013fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_ADC3_Init+0x98>)
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <MX_ADC3_Init+0x9c>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_ADC3_Init+0x98>)
 8001416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_ADC3_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_ADC3_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_ADC3_Init+0x98>)
 800142a:	2201      	movs	r2, #1
 800142c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_ADC3_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_ADC3_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC3_Init+0x98>)
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <MX_ADC3_Init+0xa0>)
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_ADC3_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_ADC3_Init+0x98>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_ADC3_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_ADC3_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_ADC3_Init+0x98>)
 800145e:	f000 fdb9 	bl	8001fd4 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001468:	f000 fb2c 	bl	8001ac4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800146c:	230d      	movs	r3, #13
 800146e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001474:	2304      	movs	r3, #4
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_ADC3_Init+0x98>)
 800147e:	f000 ff57 	bl	8002330 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001488:	f000 fb1c 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001bc 	.word	0x200001bc
 8001498:	40012200 	.word	0x40012200
 800149c:	0f000001 	.word	0x0f000001

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 ff3a 	bl	8004328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_TIM2_Init+0xa4>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_TIM2_Init+0xa4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM2_Init+0xa4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_TIM2_Init+0xa4>)
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295
 80014d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM2_Init+0xa4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_TIM2_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e4:	2303      	movs	r3, #3
 80014e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_TIM2_Init+0xa4>)
 8001510:	f002 f9a5 	bl	800385e <HAL_TIM_Encoder_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800151a:	f000 fad3 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_TIM2_Init+0xa4>)
 800152c:	f002 fe42 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001536:	f000 fac5 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000204 	.word	0x20000204

08001548 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM3_Init+0x94>)
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <MX_TIM3_Init+0x98>)
 8001568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM3_Init+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM3_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM3_Init+0x94>)
 8001578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_TIM3_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_TIM3_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <MX_TIM3_Init+0x94>)
 800158c:	f002 f918 	bl	80037c0 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001596:	f000 fa95 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM3_Init+0x94>)
 80015a8:	f002 fbb5 	bl	8003d16 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 fa87 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM3_Init+0x94>)
 80015c4:	f002 fdf6 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015ce:	f000 fa79 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000012c 	.word	0x2000012c
 80015e0:	40000400 	.word	0x40000400

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <MX_GPIO_Init+0x160>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <MX_GPIO_Init+0x160>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <MX_GPIO_Init+0x160>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <MX_GPIO_Init+0x160>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a49      	ldr	r2, [pc, #292]	; (8001744 <MX_GPIO_Init+0x160>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <MX_GPIO_Init+0x160>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <MX_GPIO_Init+0x160>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a42      	ldr	r2, [pc, #264]	; (8001744 <MX_GPIO_Init+0x160>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b40      	ldr	r3, [pc, #256]	; (8001744 <MX_GPIO_Init+0x160>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <MX_GPIO_Init+0x160>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <MX_GPIO_Init+0x160>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b39      	ldr	r3, [pc, #228]	; (8001744 <MX_GPIO_Init+0x160>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|UD7_Pin|UD6_Pin|UD4_Pin
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001670:	4835      	ldr	r0, [pc, #212]	; (8001748 <MX_GPIO_Init+0x164>)
 8001672:	f001 fb31 	bl	8002cd8 <HAL_GPIO_WritePin>
                          |UD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UE_Pin|URW_Pin|URS_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800167c:	4833      	ldr	r0, [pc, #204]	; (800174c <MX_GPIO_Init+0x168>)
 800167e:	f001 fb2b 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001688:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	482d      	ldr	r0, [pc, #180]	; (8001750 <MX_GPIO_Init+0x16c>)
 800169a:	f001 f989 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Looper_Pin */
  GPIO_InitStruct.Pin = Looper_Pin;
 800169e:	2304      	movs	r3, #4
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Looper_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4827      	ldr	r0, [pc, #156]	; (8001750 <MX_GPIO_Init+0x16c>)
 80016b4:	f001 f97c 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b8:	2320      	movs	r3, #32
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	481e      	ldr	r0, [pc, #120]	; (8001748 <MX_GPIO_Init+0x164>)
 80016d0:	f001 f96e 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UD7_Pin UD6_Pin UD4_Pin UD5_Pin */
  GPIO_InitStruct.Pin = UD7_Pin|UD6_Pin|UD4_Pin|UD5_Pin;
 80016d4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016e2:	2301      	movs	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <MX_GPIO_Init+0x164>)
 80016ee:	f001 f95f 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UE_Pin URW_Pin URS_Pin */
  GPIO_InitStruct.Pin = UE_Pin|URW_Pin|URS_Pin;
 80016f2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001700:	2301      	movs	r3, #1
 8001702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4810      	ldr	r0, [pc, #64]	; (800174c <MX_GPIO_Init+0x168>)
 800170c:	f001 f950 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_C_Pin */
  GPIO_InitStruct.Pin = ENCODER_C_Pin;
 8001710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_C_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480a      	ldr	r0, [pc, #40]	; (8001750 <MX_GPIO_Init+0x16c>)
 8001726:	f001 f943 	bl	80029b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2008      	movs	r0, #8
 8001730:	f001 f907 	bl	8002942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001734:	2008      	movs	r0, #8
 8001736:	f001 f920 	bl	800297a <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020800 	.word	0x40020800

08001754 <Update_Lcd>:

/* USER CODE BEGIN 4 */

void Update_Lcd() {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	clear_flag = false;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <Update_Lcd+0x30>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
	// check for updates of user input
	switch(position) {
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <Update_Lcd+0x34>)
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <Update_Lcd+0x1a>
 8001768:	2b01      	cmp	r3, #1
 800176a:	d004      	beq.n	8001776 <Update_Lcd+0x22>
//  lcd16x2_printf("%02d", scaledValuePA);
//  lcd16x2_printf(" B:");
//  lcd16x2_printf("%02d", scaledValuePB);
//  lcd16x2_printf(" C:");
//  lcd16x2_printf("%02d", scaledValuePC);
}
 800176c:	e007      	b.n	800177e <Update_Lcd+0x2a>
		Display_Effect("Distortion");
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <Update_Lcd+0x38>)
 8001770:	f000 f810 	bl	8001794 <Display_Effect>
		break;
 8001774:	e003      	b.n	800177e <Update_Lcd+0x2a>
		Display_Effect("Delay");
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <Update_Lcd+0x3c>)
 8001778:	f000 f80c 	bl	8001794 <Display_Effect>
		break;
 800177c:	bf00      	nop
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000be 	.word	0x200000be
 8001788:	200000bc 	.word	0x200000bc
 800178c:	08004bac 	.word	0x08004bac
 8001790:	08004bb8 	.word	0x08004bb8

08001794 <Display_Effect>:

void Display_Effect(char * name)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	lcd16x2_1stLine();
 800179c:	f7ff fc70 	bl	8001080 <lcd16x2_1stLine>
	lcd16x2_printf("  %s", name);
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <Display_Effect+0x58>)
 80017a4:	f7ff fcae 	bl	8001104 <lcd16x2_printf>
	lcd16x2_2ndLine();
 80017a8:	f7ff fc72 	bl	8001090 <lcd16x2_2ndLine>
	lcd16x2_printf(" A:");
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <Display_Effect+0x5c>)
 80017ae:	f7ff fca9 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf("%02d", scaledValuePA);
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <Display_Effect+0x60>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	480f      	ldr	r0, [pc, #60]	; (80017f8 <Display_Effect+0x64>)
 80017ba:	f7ff fca3 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf(" B:");
 80017be:	480f      	ldr	r0, [pc, #60]	; (80017fc <Display_Effect+0x68>)
 80017c0:	f7ff fca0 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf("%02d", scaledValuePB);
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <Display_Effect+0x6c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	480b      	ldr	r0, [pc, #44]	; (80017f8 <Display_Effect+0x64>)
 80017cc:	f7ff fc9a 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf(" C:");
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <Display_Effect+0x70>)
 80017d2:	f7ff fc97 	bl	8001104 <lcd16x2_printf>
	lcd16x2_printf("%02d", scaledValuePC);
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <Display_Effect+0x74>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <Display_Effect+0x64>)
 80017de:	f7ff fc91 	bl	8001104 <lcd16x2_printf>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08004bc0 	.word	0x08004bc0
 80017f0:	08004bc8 	.word	0x08004bc8
 80017f4:	20000124 	.word	0x20000124
 80017f8:	08004bcc 	.word	0x08004bcc
 80017fc:	08004bd4 	.word	0x08004bd4
 8001800:	20000128 	.word	0x20000128
 8001804:	08004bd8 	.word	0x08004bd8
 8001808:	20000120 	.word	0x20000120

0800180c <Lcd_Start_Up>:

void Lcd_Start_Up() {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af04      	add	r7, sp, #16

	lcd16x2_init_4bits(URS_GPIO_Port, URS_Pin, UE_Pin, UD4_GPIO_Port, UD4_Pin, UD5_Pin, UD6_Pin, UD7_Pin);
 8001812:	2340      	movs	r3, #64	; 0x40
 8001814:	9303      	str	r3, [sp, #12]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	9302      	str	r3, [sp, #8]
 800181a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <Lcd_Start_Up+0x68>)
 8001828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182c:	2120      	movs	r1, #32
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <Lcd_Start_Up+0x6c>)
 8001830:	f7ff fb9a 	bl	8000f68 <lcd16x2_init_4bits>
	lcd16x2_setCursor(0, 0);
 8001834:	2100      	movs	r1, #0
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fbfe 	bl	8001038 <lcd16x2_setCursor>
	lcd16x2_cursorShow(0);
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff fc2f 	bl	80010a0 <lcd16x2_cursorShow>
	HAL_Delay(500);
 8001842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001846:	f000 fba1 	bl	8001f8c <HAL_Delay>
	lcd16x2_clear();
 800184a:	f7ff fc51 	bl	80010f0 <lcd16x2_clear>
	lcd16x2_printf("     ADEPT");
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <Lcd_Start_Up+0x70>)
 8001850:	f7ff fc58 	bl	8001104 <lcd16x2_printf>
	HAL_Delay(1500);
 8001854:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001858:	f000 fb98 	bl	8001f8c <HAL_Delay>
	lcd16x2_clear();
 800185c:	f7ff fc48 	bl	80010f0 <lcd16x2_clear>
	lcd16x2_setCursor(1, 0);
 8001860:	2100      	movs	r1, #0
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fbe8 	bl	8001038 <lcd16x2_setCursor>
	lcd16x2_printf("    FX System");
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <Lcd_Start_Up+0x74>)
 800186a:	f7ff fc4b 	bl	8001104 <lcd16x2_printf>
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	08004bdc 	.word	0x08004bdc
 8001880:	08004be8 	.word	0x08004be8
 8001884:	00000000 	.word	0x00000000

08001888 <Get_Pot_Params>:

void Get_Pot_Params() {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

	// Poll ADC1 for PotA
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800188c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001890:	4839      	ldr	r0, [pc, #228]	; (8001978 <Get_Pot_Params+0xf0>)
 8001892:	f000 fcb5 	bl	8002200 <HAL_ADC_PollForConversion>
	// Store value reading for PotA
	potValues[0] = HAL_ADC_GetValue(&hadc1);
 8001896:	4838      	ldr	r0, [pc, #224]	; (8001978 <Get_Pot_Params+0xf0>)
 8001898:	f000 fd3d 	bl	8002316 <HAL_ADC_GetValue>
 800189c:	4603      	mov	r3, r0
 800189e:	4a37      	ldr	r2, [pc, #220]	; (800197c <Get_Pot_Params+0xf4>)
 80018a0:	6013      	str	r3, [r2, #0]
	// scale value between 0 and 99
	scaledValuePA = potValues[0] * 0.0247821;
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <Get_Pot_Params+0xf4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe ff76 	bl	8000798 <__aeabi_ui2d>
 80018ac:	a330      	add	r3, pc, #192	; (adr r3, 8001970 <Get_Pot_Params+0xe8>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fd05 	bl	80002c0 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7fe ffe5 	bl	800088c <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a2e      	ldr	r2, [pc, #184]	; (8001980 <Get_Pot_Params+0xf8>)
 80018c6:	6013      	str	r3, [r2, #0]
	if(scaledValuePA > 99) {
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <Get_Pot_Params+0xf8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b63      	cmp	r3, #99	; 0x63
 80018ce:	d902      	bls.n	80018d6 <Get_Pot_Params+0x4e>
		scaledValuePA = 99;
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <Get_Pot_Params+0xf8>)
 80018d2:	2263      	movs	r2, #99	; 0x63
 80018d4:	601a      	str	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc2, 1000);
 80018d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018da:	482a      	ldr	r0, [pc, #168]	; (8001984 <Get_Pot_Params+0xfc>)
 80018dc:	f000 fc90 	bl	8002200 <HAL_ADC_PollForConversion>
	potValues[1] = HAL_ADC_GetValue(&hadc2);
 80018e0:	4828      	ldr	r0, [pc, #160]	; (8001984 <Get_Pot_Params+0xfc>)
 80018e2:	f000 fd18 	bl	8002316 <HAL_ADC_GetValue>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a24      	ldr	r2, [pc, #144]	; (800197c <Get_Pot_Params+0xf4>)
 80018ea:	6053      	str	r3, [r2, #4]
	scaledValuePB = potValues[1] * 0.0247821;
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <Get_Pot_Params+0xf4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe ff51 	bl	8000798 <__aeabi_ui2d>
 80018f6:	a31e      	add	r3, pc, #120	; (adr r3, 8001970 <Get_Pot_Params+0xe8>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f7fe fce0 	bl	80002c0 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7fe ffc0 	bl	800088c <__aeabi_d2uiz>
 800190c:	4603      	mov	r3, r0
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <Get_Pot_Params+0x100>)
 8001910:	6013      	str	r3, [r2, #0]
	if(scaledValuePB > 99) {
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <Get_Pot_Params+0x100>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b63      	cmp	r3, #99	; 0x63
 8001918:	d902      	bls.n	8001920 <Get_Pot_Params+0x98>
		scaledValuePB = 99;
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <Get_Pot_Params+0x100>)
 800191c:	2263      	movs	r2, #99	; 0x63
 800191e:	601a      	str	r2, [r3, #0]
	}

	HAL_ADC_PollForConversion(&hadc3, 1000);
 8001920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001924:	4819      	ldr	r0, [pc, #100]	; (800198c <Get_Pot_Params+0x104>)
 8001926:	f000 fc6b 	bl	8002200 <HAL_ADC_PollForConversion>
	potValues[2] = HAL_ADC_GetValue(&hadc3);
 800192a:	4818      	ldr	r0, [pc, #96]	; (800198c <Get_Pot_Params+0x104>)
 800192c:	f000 fcf3 	bl	8002316 <HAL_ADC_GetValue>
 8001930:	4603      	mov	r3, r0
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <Get_Pot_Params+0xf4>)
 8001934:	6093      	str	r3, [r2, #8]
	scaledValuePC = potValues[2] * 0.0247821;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <Get_Pot_Params+0xf4>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe ff2c 	bl	8000798 <__aeabi_ui2d>
 8001940:	a30b      	add	r3, pc, #44	; (adr r3, 8001970 <Get_Pot_Params+0xe8>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fcbb 	bl	80002c0 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7fe ff9b 	bl	800088c <__aeabi_d2uiz>
 8001956:	4603      	mov	r3, r0
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <Get_Pot_Params+0x108>)
 800195a:	6013      	str	r3, [r2, #0]
	if(scaledValuePC > 99) {
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <Get_Pot_Params+0x108>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b63      	cmp	r3, #99	; 0x63
 8001962:	d902      	bls.n	800196a <Get_Pot_Params+0xe2>
		scaledValuePC = 99;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <Get_Pot_Params+0x108>)
 8001966:	2263      	movs	r2, #99	; 0x63
 8001968:	601a      	str	r2, [r3, #0]
	}
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	941ad498 	.word	0x941ad498
 8001974:	3f99607a 	.word	0x3f99607a
 8001978:	20000174 	.word	0x20000174
 800197c:	20000114 	.word	0x20000114
 8001980:	20000124 	.word	0x20000124
 8001984:	200000cc 	.word	0x200000cc
 8001988:	20000128 	.word	0x20000128
 800198c:	200001bc 	.word	0x200001bc
 8001990:	20000120 	.word	0x20000120

08001994 <HAL_TIM_IC_CaptureCallback>:

// * ENCODER INTERRUPT SERVICE ROUTINE *
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80019a4:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x48>)
 80019ae:	801a      	strh	r2, [r3, #0]
	count /= 4;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x48>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da00      	bge.n	80019bc <HAL_TIM_IC_CaptureCallback+0x28>
 80019ba:	3303      	adds	r3, #3
 80019bc:	109b      	asrs	r3, r3, #2
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x48>)
 80019c2:	801a      	strh	r2, [r3, #0]
	Update_Encoder_State(count);
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x48>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f808 	bl	80019e0 <Update_Encoder_State>

}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200000b4 	.word	0x200000b4
 80019dc:	200000b8 	.word	0x200000b8

080019e0 <Update_Encoder_State>:

void Update_Encoder_State(int16_t currentState)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
	// Case 1: currentState > lastState, we moved one to right (down)
	if (currentState > state)
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <Update_Encoder_State+0x74>)
 80019ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dd11      	ble.n	8001a1c <Update_Encoder_State+0x3c>
	{
		// Update position
		position++;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <Update_Encoder_State+0x78>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <Update_Encoder_State+0x78>)
 8001a08:	801a      	strh	r2, [r3, #0]
		Update_Position();
 8001a0a:	f000 f829 	bl	8001a60 <Update_Position>
		clear_flag = true;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <Update_Encoder_State+0x7c>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
		// Update state
		state = currentState;
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <Update_Encoder_State+0x74>)
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	8013      	strh	r3, [r2, #0]
		Update_Position();
		clear_flag = true;
		// Update state
		state = currentState;
	}
}
 8001a1a:	e017      	b.n	8001a4c <Update_Encoder_State+0x6c>
	else if (currentState < state)
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <Update_Encoder_State+0x74>)
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	da10      	bge.n	8001a4c <Update_Encoder_State+0x6c>
		position--;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <Update_Encoder_State+0x78>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <Update_Encoder_State+0x78>)
 8001a3a:	801a      	strh	r2, [r3, #0]
		Update_Position();
 8001a3c:	f000 f810 	bl	8001a60 <Update_Position>
		clear_flag = true;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <Update_Encoder_State+0x7c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
		state = currentState;
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <Update_Encoder_State+0x74>)
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	8013      	strh	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200000ba 	.word	0x200000ba
 8001a58:	200000bc 	.word	0x200000bc
 8001a5c:	200000be 	.word	0x200000be

08001a60 <Update_Position>:

void Update_Position()
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	if (position < 0)
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <Update_Position+0x3c>)
 8001a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da02      	bge.n	8001a74 <Update_Position+0x14>
		position = 0;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <Update_Position+0x3c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]

	position %= NUM_EFFECTS;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <Update_Position+0x3c>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <Update_Position+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fb92 f1f3 	sdiv	r1, r2, r3
 8001a84:	fb03 f301 	mul.w	r3, r3, r1
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <Update_Position+0x3c>)
 8001a8e:	801a      	strh	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200000bc 	.word	0x200000bc
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
	loop_on = true;
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	200000bf 	.word	0x200000bf

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x8>
	...

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b0e:	2007      	movs	r0, #7
 8001b10:	f000 ff0c 	bl	800292c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_ADC_MspInit+0x134>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d128      	bne.n	8001b94 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a43      	ldr	r2, [pc, #268]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a3c      	ldr	r2, [pc, #240]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = PotA_Pin;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PotA_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4833      	ldr	r0, [pc, #204]	; (8001c5c <HAL_ADC_MspInit+0x13c>)
 8001b8e:	f000 ff0f 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b92:	e05a      	b.n	8001c4a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <HAL_ADC_MspInit+0x140>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d128      	bne.n	8001bf0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a2c      	ldr	r2, [pc, #176]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PotB_Pin;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PotB_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4619      	mov	r1, r3
 8001be8:	481c      	ldr	r0, [pc, #112]	; (8001c5c <HAL_ADC_MspInit+0x13c>)
 8001bea:	f000 fee1 	bl	80029b0 <HAL_GPIO_Init>
}
 8001bee:	e02c      	b.n	8001c4a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_ADC_MspInit+0x144>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d127      	bne.n	8001c4a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_ADC_MspInit+0x138>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c32:	2308      	movs	r3, #8
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <HAL_ADC_MspInit+0x148>)
 8001c46:	f000 feb3 	bl	80029b0 <HAL_GPIO_Init>
}
 8001c4a:	bf00      	nop
 8001c4c:	3738      	adds	r7, #56	; 0x38
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40012000 	.word	0x40012000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40012100 	.word	0x40012100
 8001c64:	40012200 	.word	0x40012200
 8001c68:	40020800 	.word	0x40020800

08001c6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8c:	d134      	bne.n	8001cf8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a1a      	ldr	r2, [pc, #104]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 8001cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4808      	ldr	r0, [pc, #32]	; (8001d04 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ce4:	f000 fe64 	bl	80029b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	201c      	movs	r0, #28
 8001cee:	f000 fe28 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf2:	201c      	movs	r0, #28
 8001cf4:	f000 fe41 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020400 	.word	0x40020400

08001d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_TIM_Base_MspInit+0x3c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10d      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_TIM_Base_MspInit+0x40>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_TIM_Base_MspInit+0x40>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_TIM_Base_MspInit+0x40>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40023800 	.word	0x40023800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <NMI_Handler+0x4>

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 f8d8 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001da4:	2004      	movs	r0, #4
 8001da6:	f000 ffb1 	bl	8002d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <TIM2_IRQHandler+0x10>)
 8001db6:	f001 fea6 	bl	8003b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000204 	.word	0x20000204

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f002 fa6e 	bl	80042d4 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20020000 	.word	0x20020000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	200000c0 	.word	0x200000c0
 8001e2c:	20000260 	.word	0x20000260

08001e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <SystemInit+0x20>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SystemInit+0x20>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f7ff ffd7 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f002 fa2d 	bl	80042e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7ff f96d 	bl	8001164 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e98:	08004c4c 	.word	0x08004c4c
  ldr r2, =_sbss
 8001e9c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ea0:	20000260 	.word	0x20000260

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 fd2b 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff fdf8 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fd43 	bl	8002996 <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f000 fd0b 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000010 	.word	0x20000010
 8001f48:	2000000c 	.word	0x2000000c

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000010 	.word	0x20000010
 8001f70:	2000024c 	.word	0x2000024c

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2000024c 	.word	0x2000024c

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000010 	.word	0x20000010

08001fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e033      	b.n	8002052 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fd94 	bl	8001b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800201a:	f023 0302 	bic.w	r3, r3, #2
 800201e:	f043 0202 	orr.w	r2, r3, #2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fab4 	bl	8002594 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
 8002042:	e001      	b.n	8002048 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start+0x1a>
 8002072:	2302      	movs	r3, #2
 8002074:	e0b2      	b.n	80021dc <HAL_ADC_Start+0x180>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d018      	beq.n	80020be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800209c:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_ADC_Start+0x18c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_ADC_Start+0x190>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9a      	lsrs	r2, r3, #18
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d17a      	bne.n	80021c2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210a:	d106      	bne.n	800211a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f023 0206 	bic.w	r2, r3, #6
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
 8002118:	e002      	b.n	8002120 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_ADC_Start+0x194>)
 800212a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002134:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b00      	cmp	r3, #0
 8002140:	d12a      	bne.n	8002198 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_ADC_Start+0x198>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d015      	beq.n	8002178 <HAL_ADC_Start+0x11c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_ADC_Start+0x19c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d105      	bne.n	8002162 <HAL_ADC_Start+0x106>
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_ADC_Start+0x194>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_ADC_Start+0x1a0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d136      	bne.n	80021da <HAL_ADC_Start+0x17e>
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_ADC_Start+0x194>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d130      	bne.n	80021da <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d129      	bne.n	80021da <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	e020      	b.n	80021da <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_ADC_Start+0x198>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d11b      	bne.n	80021da <HAL_ADC_Start+0x17e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d114      	bne.n	80021da <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e00b      	b.n	80021da <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	20000008 	.word	0x20000008
 80021ec:	431bde83 	.word	0x431bde83
 80021f0:	40012300 	.word	0x40012300
 80021f4:	40012000 	.word	0x40012000
 80021f8:	40012100 	.word	0x40012100
 80021fc:	40012200 	.word	0x40012200

08002200 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221c:	d113      	bne.n	8002246 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222c:	d10b      	bne.n	8002246 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f043 0220 	orr.w	r2, r3, #32
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e063      	b.n	800230e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002246:	f7ff fe95 	bl	8001f74 <HAL_GetTick>
 800224a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800224c:	e021      	b.n	8002292 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d01d      	beq.n	8002292 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_ADC_PollForConversion+0x6c>
 800225c:	f7ff fe8a 	bl	8001f74 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d212      	bcs.n	8002292 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d00b      	beq.n	8002292 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0204 	orr.w	r2, r3, #4
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e03d      	b.n	800230e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b02      	cmp	r3, #2
 800229e:	d1d6      	bne.n	800224e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0212 	mvn.w	r2, #18
 80022a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d123      	bne.n	800230c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11f      	bne.n	800230c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1c>
 8002348:	2302      	movs	r3, #2
 800234a:	e113      	b.n	8002574 <HAL_ADC_ConfigChannel+0x244>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b09      	cmp	r3, #9
 800235a:	d925      	bls.n	80023a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68d9      	ldr	r1, [r3, #12]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	2207      	movs	r2, #7
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43da      	mvns	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68d9      	ldr	r1, [r3, #12]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	4618      	mov	r0, r3
 8002394:	4603      	mov	r3, r0
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4403      	add	r3, r0
 800239a:	3b1e      	subs	r3, #30
 800239c:	409a      	lsls	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	e022      	b.n	80023ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	2207      	movs	r2, #7
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6919      	ldr	r1, [r3, #16]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	4603      	mov	r3, r0
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4403      	add	r3, r0
 80023e4:	409a      	lsls	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d824      	bhi.n	8002440 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b05      	subs	r3, #5
 8002408:	221f      	movs	r2, #31
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	400a      	ands	r2, r1
 8002416:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	3b05      	subs	r3, #5
 8002432:	fa00 f203 	lsl.w	r2, r0, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
 800243e:	e04c      	b.n	80024da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d824      	bhi.n	8002492 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	3b23      	subs	r3, #35	; 0x23
 800245a:	221f      	movs	r2, #31
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43da      	mvns	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	400a      	ands	r2, r1
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b23      	subs	r3, #35	; 0x23
 8002484:	fa00 f203 	lsl.w	r2, r0, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
 8002490:	e023      	b.n	80024da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b41      	subs	r3, #65	; 0x41
 80024a4:	221f      	movs	r2, #31
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	400a      	ands	r2, r1
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3b41      	subs	r3, #65	; 0x41
 80024ce:	fa00 f203 	lsl.w	r2, r0, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_ADC_ConfigChannel+0x250>)
 80024dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_ADC_ConfigChannel+0x254>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d8>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b12      	cmp	r3, #18
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_ADC_ConfigChannel+0x254>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12b      	bne.n	800256a <HAL_ADC_ConfigChannel+0x23a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_ADC_ConfigChannel+0x258>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d003      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x1f4>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b11      	cmp	r3, #17
 8002522:	d122      	bne.n	800256a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_ADC_ConfigChannel+0x258>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d111      	bne.n	800256a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_ADC_ConfigChannel+0x25c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_ADC_ConfigChannel+0x260>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	0c9a      	lsrs	r2, r3, #18
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800255c:	e002      	b.n	8002564 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3b01      	subs	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f9      	bne.n	800255e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40012300 	.word	0x40012300
 8002584:	40012000 	.word	0x40012000
 8002588:	10000012 	.word	0x10000012
 800258c:	20000008 	.word	0x20000008
 8002590:	431bde83 	.word	0x431bde83

08002594 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259c:	4b79      	ldr	r3, [pc, #484]	; (8002784 <ADC_Init+0x1f0>)
 800259e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	021a      	lsls	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <ADC_Init+0x1f4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800263a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800265c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e00f      	b.n	8002692 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002680:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002690:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0202 	bic.w	r2, r2, #2
 80026a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7e1b      	ldrb	r3, [r3, #24]
 80026ac:	005a      	lsls	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	3b01      	subs	r3, #1
 80026ec:	035a      	lsls	r2, r3, #13
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e007      	b.n	8002708 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002706:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	3b01      	subs	r3, #1
 8002724:	051a      	lsls	r2, r3, #20
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800273c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800274a:	025a      	lsls	r2, r3, #9
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	029a      	lsls	r2, r3, #10
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40012300 	.word	0x40012300
 8002788:	0f000001 	.word	0x0f000001

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff29 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff3e 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff31 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffa2 	bl	80028e8 <SysTick_Config>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e165      	b.n	8002c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8154 	bne.w	8002c92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80ae 	beq.w	8002c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a5c      	ldr	r2, [pc, #368]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_GPIO_Init+0x308>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d025      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4d      	ldr	r2, [pc, #308]	; (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x20a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_GPIO_Init+0x31c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x206>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <HAL_GPIO_Init+0x320>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002bae:	2306      	movs	r3, #6
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x21c>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bea:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0e:	4a31      	ldr	r2, [pc, #196]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c38:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae96 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe feba 	bl	8001aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0cc      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d90c      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b8      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d044      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d119      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e06f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e067      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4934      	ldr	r1, [pc, #208]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7ff f8a2 	bl	8001f74 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7ff f89e 	bl	8001f74 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e04f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 020c 	and.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1eb      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d20c      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e032      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ec2:	f000 f82d 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490a      	ldr	r1, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f802 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08004bf8 	.word	0x08004bf8
 8002f00:	20000008 	.word	0x20000008
 8002f04:	2000000c 	.word	0x2000000c

08002f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000008 	.word	0x20000008

08002f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b088      	sub	sp, #32
 8002f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4bce      	ldr	r3, [pc, #824]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	f200 818d 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x344>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <HAL_RCC_GetSysClockFreq+0x30>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08003265 	.word	0x08003265
 8002f58:	08003265 	.word	0x08003265
 8002f5c:	08003265 	.word	0x08003265
 8002f60:	08002f8b 	.word	0x08002f8b
 8002f64:	08003265 	.word	0x08003265
 8002f68:	08003265 	.word	0x08003265
 8002f6c:	08003265 	.word	0x08003265
 8002f70:	08002f91 	.word	0x08002f91
 8002f74:	08003265 	.word	0x08003265
 8002f78:	08003265 	.word	0x08003265
 8002f7c:	08003265 	.word	0x08003265
 8002f80:	08003105 	.word	0x08003105
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4bbd      	ldr	r3, [pc, #756]	; (800327c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f86:	61bb      	str	r3, [r7, #24]
       break;
 8002f88:	e16f      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8a:	4bbd      	ldr	r3, [pc, #756]	; (8003280 <HAL_RCC_GetSysClockFreq+0x360>)
 8002f8c:	61bb      	str	r3, [r7, #24]
      break;
 8002f8e:	e16c      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4bb9      	ldr	r3, [pc, #740]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	4bb7      	ldr	r3, [pc, #732]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d053      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4bb4      	ldr	r3, [pc, #720]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	461a      	mov	r2, r3
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	ea02 0400 	and.w	r4, r2, r0
 8002fbe:	603c      	str	r4, [r7, #0]
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	014b      	lsls	r3, r1, #5
 8002fd6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fda:	0142      	lsls	r2, r0, #5
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4623      	mov	r3, r4
 8002fe2:	1ac0      	subs	r0, r0, r3
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	eb61 0103 	sbc.w	r1, r1, r3
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	018b      	lsls	r3, r1, #6
 8002ff4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff8:	0182      	lsls	r2, r0, #6
 8002ffa:	1a12      	subs	r2, r2, r0
 8002ffc:	eb63 0301 	sbc.w	r3, r3, r1
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	00d9      	lsls	r1, r3, #3
 800300a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800300e:	00d0      	lsls	r0, r2, #3
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4621      	mov	r1, r4
 8003016:	1852      	adds	r2, r2, r1
 8003018:	4629      	mov	r1, r5
 800301a:	eb43 0101 	adc.w	r1, r3, r1
 800301e:	460b      	mov	r3, r1
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0259      	lsls	r1, r3, #9
 800302a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800302e:	0250      	lsls	r0, r2, #9
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f7fd fc44 	bl	80008cc <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	e04c      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b8a      	ldr	r3, [pc, #552]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	461a      	mov	r2, r3
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	ea02 0a00 	and.w	sl, r2, r0
 8003066:	ea03 0b01 	and.w	fp, r3, r1
 800306a:	4650      	mov	r0, sl
 800306c:	4659      	mov	r1, fp
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	014b      	lsls	r3, r1, #5
 8003078:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800307c:	0142      	lsls	r2, r0, #5
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	ebb0 000a 	subs.w	r0, r0, sl
 8003086:	eb61 010b 	sbc.w	r1, r1, fp
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	018b      	lsls	r3, r1, #6
 8003094:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003098:	0182      	lsls	r2, r0, #6
 800309a:	1a12      	subs	r2, r2, r0
 800309c:	eb63 0301 	sbc.w	r3, r3, r1
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	00d9      	lsls	r1, r3, #3
 80030aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ae:	00d0      	lsls	r0, r2, #3
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	eb12 020a 	adds.w	r2, r2, sl
 80030b8:	eb43 030b 	adc.w	r3, r3, fp
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0299      	lsls	r1, r3, #10
 80030c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ca:	0290      	lsls	r0, r2, #10
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f7fd fbf6 	bl	80008cc <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4613      	mov	r3, r2
 80030e6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e8:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	3301      	adds	r3, #1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	61bb      	str	r3, [r7, #24]
      break;
 8003102:	e0b2      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003104:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800310c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310e:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d04d      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b57      	ldr	r3, [pc, #348]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	461a      	mov	r2, r3
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	ea02 0800 	and.w	r8, r2, r0
 8003132:	ea03 0901 	and.w	r9, r3, r1
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	014b      	lsls	r3, r1, #5
 8003144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003148:	0142      	lsls	r2, r0, #5
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	ebb0 0008 	subs.w	r0, r0, r8
 8003152:	eb61 0109 	sbc.w	r1, r1, r9
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	018b      	lsls	r3, r1, #6
 8003160:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003164:	0182      	lsls	r2, r0, #6
 8003166:	1a12      	subs	r2, r2, r0
 8003168:	eb63 0301 	sbc.w	r3, r3, r1
 800316c:	f04f 0000 	mov.w	r0, #0
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	00d9      	lsls	r1, r3, #3
 8003176:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800317a:	00d0      	lsls	r0, r2, #3
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	eb12 0208 	adds.w	r2, r2, r8
 8003184:	eb43 0309 	adc.w	r3, r3, r9
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0259      	lsls	r1, r3, #9
 8003192:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003196:	0250      	lsls	r0, r2, #9
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	f7fd fb90 	bl	80008cc <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4613      	mov	r3, r2
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e04a      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	461a      	mov	r2, r3
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	ea02 0400 	and.w	r4, r2, r0
 80031ce:	ea03 0501 	and.w	r5, r3, r1
 80031d2:	4620      	mov	r0, r4
 80031d4:	4629      	mov	r1, r5
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	014b      	lsls	r3, r1, #5
 80031e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031e4:	0142      	lsls	r2, r0, #5
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	1b00      	subs	r0, r0, r4
 80031ec:	eb61 0105 	sbc.w	r1, r1, r5
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	018b      	lsls	r3, r1, #6
 80031fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031fe:	0182      	lsls	r2, r0, #6
 8003200:	1a12      	subs	r2, r2, r0
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	00d9      	lsls	r1, r3, #3
 8003210:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003214:	00d0      	lsls	r0, r2, #3
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	1912      	adds	r2, r2, r4
 800321c:	eb45 0303 	adc.w	r3, r5, r3
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0299      	lsls	r1, r3, #10
 800322a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800322e:	0290      	lsls	r0, r2, #10
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	461a      	mov	r2, r3
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	f7fd fb44 	bl	80008cc <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_GetSysClockFreq+0x358>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0f1b      	lsrs	r3, r3, #28
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	61bb      	str	r3, [r7, #24]
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003266:	61bb      	str	r3, [r7, #24]
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	69bb      	ldr	r3, [r7, #24]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e28d      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8083 	beq.w	80033aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032a4:	4b94      	ldr	r3, [pc, #592]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d019      	beq.n	80032e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032b0:	4b91      	ldr	r3, [pc, #580]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032bc:	4b8e      	ldr	r3, [pc, #568]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b8b      	ldr	r3, [pc, #556]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b84      	ldr	r3, [pc, #528]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x124>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d157      	bne.n	80033a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e25a      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x90>
 8003306:	4b7c      	ldr	r3, [pc, #496]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7b      	ldr	r2, [pc, #492]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xcc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xb4>
 800331e:	4b76      	ldr	r3, [pc, #472]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a75      	ldr	r2, [pc, #468]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b73      	ldr	r3, [pc, #460]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a72      	ldr	r2, [pc, #456]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xcc>
 8003338:	4b6f      	ldr	r3, [pc, #444]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6e      	ldr	r2, [pc, #440]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6b      	ldr	r2, [pc, #428]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fe0c 	bl	8001f74 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fe08 	bl	8001f74 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e21f      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xdc>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fdf8 	bl	8001f74 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe fdf4 	bl	8001f74 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e20b      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x104>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d06f      	beq.n	8003496 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033b6:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d017      	beq.n	80033f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033c2:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d105      	bne.n	80033da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d11c      	bne.n	8003420 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x186>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1d3      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4937      	ldr	r1, [pc, #220]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	e03a      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003428:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_RCC_OscConfig+0x278>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fe fda1 	bl	8001f74 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003436:	f7fe fd9d 	bl	8001f74 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e1b4      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4925      	ldr	r1, [pc, #148]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_OscConfig+0x278>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fd80 	bl	8001f74 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003478:	f7fe fd7c 	bl	8001f74 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e193      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d036      	beq.n	8003510 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fd60 	bl	8001f74 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b8:	f7fe fd5c 	bl	8001f74 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e173      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80034cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x234>
 80034d6:	e01b      	b.n	8003510 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fd49 	bl	8001f74 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	e00e      	b.n	8003504 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fd45 	bl	8001f74 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d907      	bls.n	8003504 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e15c      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	42470000 	.word	0x42470000
 8003500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b8a      	ldr	r3, [pc, #552]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ea      	bne.n	80034e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8097 	beq.w	800364c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b83      	ldr	r3, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	4b7f      	ldr	r3, [pc, #508]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a7e      	ldr	r2, [pc, #504]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b7c      	ldr	r3, [pc, #496]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354e:	4b79      	ldr	r3, [pc, #484]	; (8003734 <HAL_RCC_OscConfig+0x4b0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d118      	bne.n	800358c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x4b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x4b0>)
 8003560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003566:	f7fe fd05 	bl	8001f74 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356e:	f7fe fd01 	bl	8001f74 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e118      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	4b6c      	ldr	r3, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x4b0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x31e>
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	e01c      	b.n	80035dc <HAL_RCC_OscConfig+0x358>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x340>
 80035aa:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a60      	ldr	r2, [pc, #384]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	4b5e      	ldr	r3, [pc, #376]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0x358>
 80035c4:	4b5a      	ldr	r3, [pc, #360]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a59      	ldr	r2, [pc, #356]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	4b57      	ldr	r3, [pc, #348]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a56      	ldr	r2, [pc, #344]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 0304 	bic.w	r3, r3, #4
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fcc6 	bl	8001f74 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fcc2 	bl	8001f74 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0d7      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RCC_OscConfig+0x368>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe fcb0 	bl	8001f74 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fcac 	bl	8001f74 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0c1      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	4b40      	ldr	r3, [pc, #256]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ee      	bne.n	8003618 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80ad 	beq.w	80037b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d060      	beq.n	8003724 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d145      	bne.n	80036f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_RCC_OscConfig+0x4b4>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fc80 	bl	8001f74 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fc7c 	bl	8001f74 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e093      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	071b      	lsls	r3, r3, #28
 80036c2:	491b      	ldr	r1, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x4b4>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fc51 	bl	8001f74 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe fc4d 	bl	8001f74 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e064      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x452>
 80036f4:	e05c      	b.n	80037b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_OscConfig+0x4b4>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fc3a 	bl	8001f74 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe fc36 	bl	8001f74 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e04d      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x4ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x480>
 8003722:	e045      	b.n	80037b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d107      	bne.n	800373c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e040      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
 8003730:	40023800 	.word	0x40023800
 8003734:	40007000 	.word	0x40007000
 8003738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_OscConfig+0x538>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d030      	beq.n	80037ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d129      	bne.n	80037ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d122      	bne.n	80037ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800376c:	4013      	ands	r3, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	4293      	cmp	r3, r2
 8003776:	d119      	bne.n	80037ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d10f      	bne.n	80037ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800

080037c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e041      	b.n	8003856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe fa8e 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f000 fb78 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e097      	b.n	80039a2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe f9f0 	bl	8001c6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fb1e 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	f023 0303 	bic.w	r3, r3, #3
 80038e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	4313      	orrs	r3, r2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038fe:	f023 030c 	bic.w	r3, r3, #12
 8003902:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800390a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	4313      	orrs	r3, r2
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	011a      	lsls	r2, r3, #4
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	031b      	lsls	r3, r3, #12
 800392e:	4313      	orrs	r3, r2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800393c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003944:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4313      	orrs	r3, r2
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ca:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039d2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d110      	bne.n	80039fc <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d102      	bne.n	80039e6 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039e0:	7b7b      	ldrb	r3, [r7, #13]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e089      	b.n	8003afe <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fa:	e031      	b.n	8003a60 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d110      	bne.n	8003a24 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	7bbb      	ldrb	r3, [r7, #14]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a08:	7b3b      	ldrb	r3, [r7, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e075      	b.n	8003afe <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a22:	e01d      	b.n	8003a60 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d108      	bne.n	8003a3c <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a2a:	7bbb      	ldrb	r3, [r7, #14]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a30:	7b7b      	ldrb	r3, [r7, #13]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a36:	7b3b      	ldrb	r3, [r7, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d001      	beq.n	8003a40 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e05e      	b.n	8003afe <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_Encoder_Start_IT+0xc4>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d010      	beq.n	8003a8e <HAL_TIM_Encoder_Start_IT+0xe4>
 8003a6c:	e01f      	b.n	8003aae <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fb76 	bl	8004168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0202 	orr.w	r2, r2, #2
 8003a8a:	60da      	str	r2, [r3, #12]
      break;
 8003a8c:	e02e      	b.n	8003aec <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	2104      	movs	r1, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fb66 	bl	8004168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0204 	orr.w	r2, r2, #4
 8003aaa:	60da      	str	r2, [r3, #12]
      break;
 8003aac:	e01e      	b.n	8003aec <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb56 	bl	8004168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fb4f 	bl	8004168 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0202 	orr.w	r2, r2, #2
 8003ad8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0204 	orr.w	r2, r2, #4
 8003ae8:	60da      	str	r2, [r3, #12]
      break;
 8003aea:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d122      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d11b      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0202 	mvn.w	r2, #2
 8003b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd ff23 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8003b4e:	e005      	b.n	8003b5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9b1 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9b8 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d122      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d11b      	bne.n	8003bb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f06f 0204 	mvn.w	r2, #4
 8003b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd fef9 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8003ba2:	e005      	b.n	8003bb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f987 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f98e 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d122      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11b      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f06f 0208 	mvn.w	r2, #8
 8003bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2204      	movs	r2, #4
 8003be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd fecf 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8003bf6:	e005      	b.n	8003c04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f95d 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f964 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d122      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d11b      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0210 	mvn.w	r2, #16
 8003c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2208      	movs	r2, #8
 8003c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fd fea5 	bl	8001994 <HAL_TIM_IC_CaptureCallback>
 8003c4a:	e005      	b.n	8003c58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f933 	bl	8003eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f93a 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0201 	mvn.w	r2, #1
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f90d 	bl	8003ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b80      	cmp	r3, #128	; 0x80
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fb05 	bl	80042c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8ff 	bl	8003ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d10e      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0220 	mvn.w	r2, #32
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 facf 	bl	80042ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_ConfigClockSource+0x1c>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0b4      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x186>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d03e      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0xd4>
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d70:	f200 8087 	bhi.w	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d78:	f000 8086 	beq.w	8003e88 <HAL_TIM_ConfigClockSource+0x172>
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d87f      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003d82:	2b70      	cmp	r3, #112	; 0x70
 8003d84:	d01a      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0xa6>
 8003d86:	2b70      	cmp	r3, #112	; 0x70
 8003d88:	d87b      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8a:	2b60      	cmp	r3, #96	; 0x60
 8003d8c:	d050      	beq.n	8003e30 <HAL_TIM_ConfigClockSource+0x11a>
 8003d8e:	2b60      	cmp	r3, #96	; 0x60
 8003d90:	d877      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003d92:	2b50      	cmp	r3, #80	; 0x50
 8003d94:	d03c      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xfa>
 8003d96:	2b50      	cmp	r3, #80	; 0x50
 8003d98:	d873      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d058      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x13a>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d86f      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003da2:	2b30      	cmp	r3, #48	; 0x30
 8003da4:	d064      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15a>
 8003da6:	2b30      	cmp	r3, #48	; 0x30
 8003da8:	d86b      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d060      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15a>
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d867      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d05c      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15a>
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d05a      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0x15a>
 8003dba:	e062      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f000 f9ac 	bl	8004128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
      break;
 8003de8:	e04f      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f000 f995 	bl	8004128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e0c:	609a      	str	r2, [r3, #8]
      break;
 8003e0e:	e03c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f000 f909 	bl	8004034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2150      	movs	r1, #80	; 0x50
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f962 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003e2e:	e02c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f000 f928 	bl	8004092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2160      	movs	r1, #96	; 0x60
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f952 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e01c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f000 f8e9 	bl	8004034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2140      	movs	r1, #64	; 0x40
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f942 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e00c      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 f939 	bl	80040f2 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e003      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
      break;
 8003e86:	e000      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a40      	ldr	r2, [pc, #256]	; (8004008 <TIM_Base_SetConfig+0x114>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d00f      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3d      	ldr	r2, [pc, #244]	; (800400c <TIM_Base_SetConfig+0x118>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3c      	ldr	r2, [pc, #240]	; (8004010 <TIM_Base_SetConfig+0x11c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3b      	ldr	r2, [pc, #236]	; (8004014 <TIM_Base_SetConfig+0x120>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3a      	ldr	r2, [pc, #232]	; (8004018 <TIM_Base_SetConfig+0x124>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d108      	bne.n	8003f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0x114>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02b      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d027      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2c      	ldr	r2, [pc, #176]	; (800400c <TIM_Base_SetConfig+0x118>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d023      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <TIM_Base_SetConfig+0x11c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01f      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <TIM_Base_SetConfig+0x120>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01b      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a29      	ldr	r2, [pc, #164]	; (8004018 <TIM_Base_SetConfig+0x124>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d017      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a28      	ldr	r2, [pc, #160]	; (800401c <TIM_Base_SetConfig+0x128>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a27      	ldr	r2, [pc, #156]	; (8004020 <TIM_Base_SetConfig+0x12c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00f      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <TIM_Base_SetConfig+0x130>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a25      	ldr	r2, [pc, #148]	; (8004028 <TIM_Base_SetConfig+0x134>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a24      	ldr	r2, [pc, #144]	; (800402c <TIM_Base_SetConfig+0x138>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a23      	ldr	r2, [pc, #140]	; (8004030 <TIM_Base_SetConfig+0x13c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0xf8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0c      	ldr	r2, [pc, #48]	; (8004018 <TIM_Base_SetConfig+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d103      	bne.n	8003ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	615a      	str	r2, [r3, #20]
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40000c00 	.word	0x40000c00
 8004018:	40010400 	.word	0x40010400
 800401c:	40014000 	.word	0x40014000
 8004020:	40014400 	.word	0x40014400
 8004024:	40014800 	.word	0x40014800
 8004028:	40001800 	.word	0x40001800
 800402c:	40001c00 	.word	0x40001c00
 8004030:	40002000 	.word	0x40002000

08004034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f023 030a 	bic.w	r3, r3, #10
 8004070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0210 	bic.w	r2, r3, #16
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	031b      	lsls	r3, r3, #12
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	f043 0307 	orr.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	021a      	lsls	r2, r3, #8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e05a      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d01d      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40010400 	.word	0x40010400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40001800 	.word	0x40001800

080042ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <__errno>:
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <__errno+0x8>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000014 	.word	0x20000014

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4d0d      	ldr	r5, [pc, #52]	; (8004318 <__libc_init_array+0x38>)
 80042e4:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	2600      	movs	r6, #0
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	4d0b      	ldr	r5, [pc, #44]	; (8004320 <__libc_init_array+0x40>)
 80042f2:	4c0c      	ldr	r4, [pc, #48]	; (8004324 <__libc_init_array+0x44>)
 80042f4:	f000 fc4e 	bl	8004b94 <_init>
 80042f8:	1b64      	subs	r4, r4, r5
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	2600      	movs	r6, #0
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f855 3b04 	ldr.w	r3, [r5], #4
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	08004c44 	.word	0x08004c44
 800431c:	08004c44 	.word	0x08004c44
 8004320:	08004c44 	.word	0x08004c44
 8004324:	08004c48 	.word	0x08004c48

08004328 <memset>:
 8004328:	4402      	add	r2, r0
 800432a:	4603      	mov	r3, r0
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	f803 1b01 	strb.w	r1, [r3], #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <_vsiprintf_r>:
 8004338:	b500      	push	{lr}
 800433a:	b09b      	sub	sp, #108	; 0x6c
 800433c:	9100      	str	r1, [sp, #0]
 800433e:	9104      	str	r1, [sp, #16]
 8004340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004344:	9105      	str	r1, [sp, #20]
 8004346:	9102      	str	r1, [sp, #8]
 8004348:	4905      	ldr	r1, [pc, #20]	; (8004360 <_vsiprintf_r+0x28>)
 800434a:	9103      	str	r1, [sp, #12]
 800434c:	4669      	mov	r1, sp
 800434e:	f000 f86f 	bl	8004430 <_svfiprintf_r>
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	b01b      	add	sp, #108	; 0x6c
 800435a:	f85d fb04 	ldr.w	pc, [sp], #4
 800435e:	bf00      	nop
 8004360:	ffff0208 	.word	0xffff0208

08004364 <vsiprintf>:
 8004364:	4613      	mov	r3, r2
 8004366:	460a      	mov	r2, r1
 8004368:	4601      	mov	r1, r0
 800436a:	4802      	ldr	r0, [pc, #8]	; (8004374 <vsiprintf+0x10>)
 800436c:	6800      	ldr	r0, [r0, #0]
 800436e:	f7ff bfe3 	b.w	8004338 <_vsiprintf_r>
 8004372:	bf00      	nop
 8004374:	20000014 	.word	0x20000014

08004378 <__ssputs_r>:
 8004378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	688e      	ldr	r6, [r1, #8]
 800437e:	429e      	cmp	r6, r3
 8004380:	4682      	mov	sl, r0
 8004382:	460c      	mov	r4, r1
 8004384:	4690      	mov	r8, r2
 8004386:	461f      	mov	r7, r3
 8004388:	d838      	bhi.n	80043fc <__ssputs_r+0x84>
 800438a:	898a      	ldrh	r2, [r1, #12]
 800438c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004390:	d032      	beq.n	80043f8 <__ssputs_r+0x80>
 8004392:	6825      	ldr	r5, [r4, #0]
 8004394:	6909      	ldr	r1, [r1, #16]
 8004396:	eba5 0901 	sub.w	r9, r5, r1
 800439a:	6965      	ldr	r5, [r4, #20]
 800439c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043a4:	3301      	adds	r3, #1
 80043a6:	444b      	add	r3, r9
 80043a8:	106d      	asrs	r5, r5, #1
 80043aa:	429d      	cmp	r5, r3
 80043ac:	bf38      	it	cc
 80043ae:	461d      	movcc	r5, r3
 80043b0:	0553      	lsls	r3, r2, #21
 80043b2:	d531      	bpl.n	8004418 <__ssputs_r+0xa0>
 80043b4:	4629      	mov	r1, r5
 80043b6:	f000 fb47 	bl	8004a48 <_malloc_r>
 80043ba:	4606      	mov	r6, r0
 80043bc:	b950      	cbnz	r0, 80043d4 <__ssputs_r+0x5c>
 80043be:	230c      	movs	r3, #12
 80043c0:	f8ca 3000 	str.w	r3, [sl]
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	6921      	ldr	r1, [r4, #16]
 80043d6:	464a      	mov	r2, r9
 80043d8:	f000 fabe 	bl	8004958 <memcpy>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	6126      	str	r6, [r4, #16]
 80043ea:	6165      	str	r5, [r4, #20]
 80043ec:	444e      	add	r6, r9
 80043ee:	eba5 0509 	sub.w	r5, r5, r9
 80043f2:	6026      	str	r6, [r4, #0]
 80043f4:	60a5      	str	r5, [r4, #8]
 80043f6:	463e      	mov	r6, r7
 80043f8:	42be      	cmp	r6, r7
 80043fa:	d900      	bls.n	80043fe <__ssputs_r+0x86>
 80043fc:	463e      	mov	r6, r7
 80043fe:	4632      	mov	r2, r6
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	4641      	mov	r1, r8
 8004404:	f000 fab6 	bl	8004974 <memmove>
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	1b9b      	subs	r3, r3, r6
 800440e:	4432      	add	r2, r6
 8004410:	60a3      	str	r3, [r4, #8]
 8004412:	6022      	str	r2, [r4, #0]
 8004414:	2000      	movs	r0, #0
 8004416:	e7db      	b.n	80043d0 <__ssputs_r+0x58>
 8004418:	462a      	mov	r2, r5
 800441a:	f000 fb6f 	bl	8004afc <_realloc_r>
 800441e:	4606      	mov	r6, r0
 8004420:	2800      	cmp	r0, #0
 8004422:	d1e1      	bne.n	80043e8 <__ssputs_r+0x70>
 8004424:	6921      	ldr	r1, [r4, #16]
 8004426:	4650      	mov	r0, sl
 8004428:	f000 fabe 	bl	80049a8 <_free_r>
 800442c:	e7c7      	b.n	80043be <__ssputs_r+0x46>
	...

08004430 <_svfiprintf_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	4698      	mov	r8, r3
 8004436:	898b      	ldrh	r3, [r1, #12]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	b09d      	sub	sp, #116	; 0x74
 800443c:	4607      	mov	r7, r0
 800443e:	460d      	mov	r5, r1
 8004440:	4614      	mov	r4, r2
 8004442:	d50e      	bpl.n	8004462 <_svfiprintf_r+0x32>
 8004444:	690b      	ldr	r3, [r1, #16]
 8004446:	b963      	cbnz	r3, 8004462 <_svfiprintf_r+0x32>
 8004448:	2140      	movs	r1, #64	; 0x40
 800444a:	f000 fafd 	bl	8004a48 <_malloc_r>
 800444e:	6028      	str	r0, [r5, #0]
 8004450:	6128      	str	r0, [r5, #16]
 8004452:	b920      	cbnz	r0, 800445e <_svfiprintf_r+0x2e>
 8004454:	230c      	movs	r3, #12
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e0d1      	b.n	8004602 <_svfiprintf_r+0x1d2>
 800445e:	2340      	movs	r3, #64	; 0x40
 8004460:	616b      	str	r3, [r5, #20]
 8004462:	2300      	movs	r3, #0
 8004464:	9309      	str	r3, [sp, #36]	; 0x24
 8004466:	2320      	movs	r3, #32
 8004468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800446c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004470:	2330      	movs	r3, #48	; 0x30
 8004472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800461c <_svfiprintf_r+0x1ec>
 8004476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800447a:	f04f 0901 	mov.w	r9, #1
 800447e:	4623      	mov	r3, r4
 8004480:	469a      	mov	sl, r3
 8004482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004486:	b10a      	cbz	r2, 800448c <_svfiprintf_r+0x5c>
 8004488:	2a25      	cmp	r2, #37	; 0x25
 800448a:	d1f9      	bne.n	8004480 <_svfiprintf_r+0x50>
 800448c:	ebba 0b04 	subs.w	fp, sl, r4
 8004490:	d00b      	beq.n	80044aa <_svfiprintf_r+0x7a>
 8004492:	465b      	mov	r3, fp
 8004494:	4622      	mov	r2, r4
 8004496:	4629      	mov	r1, r5
 8004498:	4638      	mov	r0, r7
 800449a:	f7ff ff6d 	bl	8004378 <__ssputs_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	f000 80aa 	beq.w	80045f8 <_svfiprintf_r+0x1c8>
 80044a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044a6:	445a      	add	r2, fp
 80044a8:	9209      	str	r2, [sp, #36]	; 0x24
 80044aa:	f89a 3000 	ldrb.w	r3, [sl]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80a2 	beq.w	80045f8 <_svfiprintf_r+0x1c8>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044be:	f10a 0a01 	add.w	sl, sl, #1
 80044c2:	9304      	str	r3, [sp, #16]
 80044c4:	9307      	str	r3, [sp, #28]
 80044c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ca:	931a      	str	r3, [sp, #104]	; 0x68
 80044cc:	4654      	mov	r4, sl
 80044ce:	2205      	movs	r2, #5
 80044d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d4:	4851      	ldr	r0, [pc, #324]	; (800461c <_svfiprintf_r+0x1ec>)
 80044d6:	f7fb fea3 	bl	8000220 <memchr>
 80044da:	9a04      	ldr	r2, [sp, #16]
 80044dc:	b9d8      	cbnz	r0, 8004516 <_svfiprintf_r+0xe6>
 80044de:	06d0      	lsls	r0, r2, #27
 80044e0:	bf44      	itt	mi
 80044e2:	2320      	movmi	r3, #32
 80044e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e8:	0711      	lsls	r1, r2, #28
 80044ea:	bf44      	itt	mi
 80044ec:	232b      	movmi	r3, #43	; 0x2b
 80044ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f2:	f89a 3000 	ldrb.w	r3, [sl]
 80044f6:	2b2a      	cmp	r3, #42	; 0x2a
 80044f8:	d015      	beq.n	8004526 <_svfiprintf_r+0xf6>
 80044fa:	9a07      	ldr	r2, [sp, #28]
 80044fc:	4654      	mov	r4, sl
 80044fe:	2000      	movs	r0, #0
 8004500:	f04f 0c0a 	mov.w	ip, #10
 8004504:	4621      	mov	r1, r4
 8004506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800450a:	3b30      	subs	r3, #48	; 0x30
 800450c:	2b09      	cmp	r3, #9
 800450e:	d94e      	bls.n	80045ae <_svfiprintf_r+0x17e>
 8004510:	b1b0      	cbz	r0, 8004540 <_svfiprintf_r+0x110>
 8004512:	9207      	str	r2, [sp, #28]
 8004514:	e014      	b.n	8004540 <_svfiprintf_r+0x110>
 8004516:	eba0 0308 	sub.w	r3, r0, r8
 800451a:	fa09 f303 	lsl.w	r3, r9, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	46a2      	mov	sl, r4
 8004524:	e7d2      	b.n	80044cc <_svfiprintf_r+0x9c>
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	9103      	str	r1, [sp, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	bfbb      	ittet	lt
 8004532:	425b      	neglt	r3, r3
 8004534:	f042 0202 	orrlt.w	r2, r2, #2
 8004538:	9307      	strge	r3, [sp, #28]
 800453a:	9307      	strlt	r3, [sp, #28]
 800453c:	bfb8      	it	lt
 800453e:	9204      	strlt	r2, [sp, #16]
 8004540:	7823      	ldrb	r3, [r4, #0]
 8004542:	2b2e      	cmp	r3, #46	; 0x2e
 8004544:	d10c      	bne.n	8004560 <_svfiprintf_r+0x130>
 8004546:	7863      	ldrb	r3, [r4, #1]
 8004548:	2b2a      	cmp	r3, #42	; 0x2a
 800454a:	d135      	bne.n	80045b8 <_svfiprintf_r+0x188>
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	9203      	str	r2, [sp, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	bfb8      	it	lt
 8004558:	f04f 33ff 	movlt.w	r3, #4294967295
 800455c:	3402      	adds	r4, #2
 800455e:	9305      	str	r3, [sp, #20]
 8004560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800462c <_svfiprintf_r+0x1fc>
 8004564:	7821      	ldrb	r1, [r4, #0]
 8004566:	2203      	movs	r2, #3
 8004568:	4650      	mov	r0, sl
 800456a:	f7fb fe59 	bl	8000220 <memchr>
 800456e:	b140      	cbz	r0, 8004582 <_svfiprintf_r+0x152>
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	eba0 000a 	sub.w	r0, r0, sl
 8004576:	fa03 f000 	lsl.w	r0, r3, r0
 800457a:	9b04      	ldr	r3, [sp, #16]
 800457c:	4303      	orrs	r3, r0
 800457e:	3401      	adds	r4, #1
 8004580:	9304      	str	r3, [sp, #16]
 8004582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004586:	4826      	ldr	r0, [pc, #152]	; (8004620 <_svfiprintf_r+0x1f0>)
 8004588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800458c:	2206      	movs	r2, #6
 800458e:	f7fb fe47 	bl	8000220 <memchr>
 8004592:	2800      	cmp	r0, #0
 8004594:	d038      	beq.n	8004608 <_svfiprintf_r+0x1d8>
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <_svfiprintf_r+0x1f4>)
 8004598:	bb1b      	cbnz	r3, 80045e2 <_svfiprintf_r+0x1b2>
 800459a:	9b03      	ldr	r3, [sp, #12]
 800459c:	3307      	adds	r3, #7
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	3308      	adds	r3, #8
 80045a4:	9303      	str	r3, [sp, #12]
 80045a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a8:	4433      	add	r3, r6
 80045aa:	9309      	str	r3, [sp, #36]	; 0x24
 80045ac:	e767      	b.n	800447e <_svfiprintf_r+0x4e>
 80045ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80045b2:	460c      	mov	r4, r1
 80045b4:	2001      	movs	r0, #1
 80045b6:	e7a5      	b.n	8004504 <_svfiprintf_r+0xd4>
 80045b8:	2300      	movs	r3, #0
 80045ba:	3401      	adds	r4, #1
 80045bc:	9305      	str	r3, [sp, #20]
 80045be:	4619      	mov	r1, r3
 80045c0:	f04f 0c0a 	mov.w	ip, #10
 80045c4:	4620      	mov	r0, r4
 80045c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ca:	3a30      	subs	r2, #48	; 0x30
 80045cc:	2a09      	cmp	r2, #9
 80045ce:	d903      	bls.n	80045d8 <_svfiprintf_r+0x1a8>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0c5      	beq.n	8004560 <_svfiprintf_r+0x130>
 80045d4:	9105      	str	r1, [sp, #20]
 80045d6:	e7c3      	b.n	8004560 <_svfiprintf_r+0x130>
 80045d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045dc:	4604      	mov	r4, r0
 80045de:	2301      	movs	r3, #1
 80045e0:	e7f0      	b.n	80045c4 <_svfiprintf_r+0x194>
 80045e2:	ab03      	add	r3, sp, #12
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	462a      	mov	r2, r5
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <_svfiprintf_r+0x1f8>)
 80045ea:	a904      	add	r1, sp, #16
 80045ec:	4638      	mov	r0, r7
 80045ee:	f3af 8000 	nop.w
 80045f2:	1c42      	adds	r2, r0, #1
 80045f4:	4606      	mov	r6, r0
 80045f6:	d1d6      	bne.n	80045a6 <_svfiprintf_r+0x176>
 80045f8:	89ab      	ldrh	r3, [r5, #12]
 80045fa:	065b      	lsls	r3, r3, #25
 80045fc:	f53f af2c 	bmi.w	8004458 <_svfiprintf_r+0x28>
 8004600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004602:	b01d      	add	sp, #116	; 0x74
 8004604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004608:	ab03      	add	r3, sp, #12
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	462a      	mov	r2, r5
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <_svfiprintf_r+0x1f8>)
 8004610:	a904      	add	r1, sp, #16
 8004612:	4638      	mov	r0, r7
 8004614:	f000 f87a 	bl	800470c <_printf_i>
 8004618:	e7eb      	b.n	80045f2 <_svfiprintf_r+0x1c2>
 800461a:	bf00      	nop
 800461c:	08004c08 	.word	0x08004c08
 8004620:	08004c12 	.word	0x08004c12
 8004624:	00000000 	.word	0x00000000
 8004628:	08004379 	.word	0x08004379
 800462c:	08004c0e 	.word	0x08004c0e

08004630 <_printf_common>:
 8004630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004634:	4616      	mov	r6, r2
 8004636:	4699      	mov	r9, r3
 8004638:	688a      	ldr	r2, [r1, #8]
 800463a:	690b      	ldr	r3, [r1, #16]
 800463c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004640:	4293      	cmp	r3, r2
 8004642:	bfb8      	it	lt
 8004644:	4613      	movlt	r3, r2
 8004646:	6033      	str	r3, [r6, #0]
 8004648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800464c:	4607      	mov	r7, r0
 800464e:	460c      	mov	r4, r1
 8004650:	b10a      	cbz	r2, 8004656 <_printf_common+0x26>
 8004652:	3301      	adds	r3, #1
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	0699      	lsls	r1, r3, #26
 800465a:	bf42      	ittt	mi
 800465c:	6833      	ldrmi	r3, [r6, #0]
 800465e:	3302      	addmi	r3, #2
 8004660:	6033      	strmi	r3, [r6, #0]
 8004662:	6825      	ldr	r5, [r4, #0]
 8004664:	f015 0506 	ands.w	r5, r5, #6
 8004668:	d106      	bne.n	8004678 <_printf_common+0x48>
 800466a:	f104 0a19 	add.w	sl, r4, #25
 800466e:	68e3      	ldr	r3, [r4, #12]
 8004670:	6832      	ldr	r2, [r6, #0]
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	42ab      	cmp	r3, r5
 8004676:	dc26      	bgt.n	80046c6 <_printf_common+0x96>
 8004678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800467c:	1e13      	subs	r3, r2, #0
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	bf18      	it	ne
 8004682:	2301      	movne	r3, #1
 8004684:	0692      	lsls	r2, r2, #26
 8004686:	d42b      	bmi.n	80046e0 <_printf_common+0xb0>
 8004688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800468c:	4649      	mov	r1, r9
 800468e:	4638      	mov	r0, r7
 8004690:	47c0      	blx	r8
 8004692:	3001      	adds	r0, #1
 8004694:	d01e      	beq.n	80046d4 <_printf_common+0xa4>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	68e5      	ldr	r5, [r4, #12]
 800469a:	6832      	ldr	r2, [r6, #0]
 800469c:	f003 0306 	and.w	r3, r3, #6
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	bf08      	it	eq
 80046a4:	1aad      	subeq	r5, r5, r2
 80046a6:	68a3      	ldr	r3, [r4, #8]
 80046a8:	6922      	ldr	r2, [r4, #16]
 80046aa:	bf0c      	ite	eq
 80046ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b0:	2500      	movne	r5, #0
 80046b2:	4293      	cmp	r3, r2
 80046b4:	bfc4      	itt	gt
 80046b6:	1a9b      	subgt	r3, r3, r2
 80046b8:	18ed      	addgt	r5, r5, r3
 80046ba:	2600      	movs	r6, #0
 80046bc:	341a      	adds	r4, #26
 80046be:	42b5      	cmp	r5, r6
 80046c0:	d11a      	bne.n	80046f8 <_printf_common+0xc8>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e008      	b.n	80046d8 <_printf_common+0xa8>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4652      	mov	r2, sl
 80046ca:	4649      	mov	r1, r9
 80046cc:	4638      	mov	r0, r7
 80046ce:	47c0      	blx	r8
 80046d0:	3001      	adds	r0, #1
 80046d2:	d103      	bne.n	80046dc <_printf_common+0xac>
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046dc:	3501      	adds	r5, #1
 80046de:	e7c6      	b.n	800466e <_printf_common+0x3e>
 80046e0:	18e1      	adds	r1, r4, r3
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	2030      	movs	r0, #48	; 0x30
 80046e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ea:	4422      	add	r2, r4
 80046ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046f4:	3302      	adds	r3, #2
 80046f6:	e7c7      	b.n	8004688 <_printf_common+0x58>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4622      	mov	r2, r4
 80046fc:	4649      	mov	r1, r9
 80046fe:	4638      	mov	r0, r7
 8004700:	47c0      	blx	r8
 8004702:	3001      	adds	r0, #1
 8004704:	d0e6      	beq.n	80046d4 <_printf_common+0xa4>
 8004706:	3601      	adds	r6, #1
 8004708:	e7d9      	b.n	80046be <_printf_common+0x8e>
	...

0800470c <_printf_i>:
 800470c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	460c      	mov	r4, r1
 8004712:	4691      	mov	r9, r2
 8004714:	7e27      	ldrb	r7, [r4, #24]
 8004716:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004718:	2f78      	cmp	r7, #120	; 0x78
 800471a:	4680      	mov	r8, r0
 800471c:	469a      	mov	sl, r3
 800471e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004722:	d807      	bhi.n	8004734 <_printf_i+0x28>
 8004724:	2f62      	cmp	r7, #98	; 0x62
 8004726:	d80a      	bhi.n	800473e <_printf_i+0x32>
 8004728:	2f00      	cmp	r7, #0
 800472a:	f000 80d8 	beq.w	80048de <_printf_i+0x1d2>
 800472e:	2f58      	cmp	r7, #88	; 0x58
 8004730:	f000 80a3 	beq.w	800487a <_printf_i+0x16e>
 8004734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800473c:	e03a      	b.n	80047b4 <_printf_i+0xa8>
 800473e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004742:	2b15      	cmp	r3, #21
 8004744:	d8f6      	bhi.n	8004734 <_printf_i+0x28>
 8004746:	a001      	add	r0, pc, #4	; (adr r0, 800474c <_printf_i+0x40>)
 8004748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047b9 	.word	0x080047b9
 8004754:	08004735 	.word	0x08004735
 8004758:	08004735 	.word	0x08004735
 800475c:	08004735 	.word	0x08004735
 8004760:	08004735 	.word	0x08004735
 8004764:	080047b9 	.word	0x080047b9
 8004768:	08004735 	.word	0x08004735
 800476c:	08004735 	.word	0x08004735
 8004770:	08004735 	.word	0x08004735
 8004774:	08004735 	.word	0x08004735
 8004778:	080048c5 	.word	0x080048c5
 800477c:	080047e9 	.word	0x080047e9
 8004780:	080048a7 	.word	0x080048a7
 8004784:	08004735 	.word	0x08004735
 8004788:	08004735 	.word	0x08004735
 800478c:	080048e7 	.word	0x080048e7
 8004790:	08004735 	.word	0x08004735
 8004794:	080047e9 	.word	0x080047e9
 8004798:	08004735 	.word	0x08004735
 800479c:	08004735 	.word	0x08004735
 80047a0:	080048af 	.word	0x080048af
 80047a4:	680b      	ldr	r3, [r1, #0]
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	600a      	str	r2, [r1, #0]
 80047ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0a3      	b.n	8004900 <_printf_i+0x1f4>
 80047b8:	6825      	ldr	r5, [r4, #0]
 80047ba:	6808      	ldr	r0, [r1, #0]
 80047bc:	062e      	lsls	r6, r5, #24
 80047be:	f100 0304 	add.w	r3, r0, #4
 80047c2:	d50a      	bpl.n	80047da <_printf_i+0xce>
 80047c4:	6805      	ldr	r5, [r0, #0]
 80047c6:	600b      	str	r3, [r1, #0]
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	da03      	bge.n	80047d4 <_printf_i+0xc8>
 80047cc:	232d      	movs	r3, #45	; 0x2d
 80047ce:	426d      	negs	r5, r5
 80047d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d4:	485e      	ldr	r0, [pc, #376]	; (8004950 <_printf_i+0x244>)
 80047d6:	230a      	movs	r3, #10
 80047d8:	e019      	b.n	800480e <_printf_i+0x102>
 80047da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047de:	6805      	ldr	r5, [r0, #0]
 80047e0:	600b      	str	r3, [r1, #0]
 80047e2:	bf18      	it	ne
 80047e4:	b22d      	sxthne	r5, r5
 80047e6:	e7ef      	b.n	80047c8 <_printf_i+0xbc>
 80047e8:	680b      	ldr	r3, [r1, #0]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	1d18      	adds	r0, r3, #4
 80047ee:	6008      	str	r0, [r1, #0]
 80047f0:	0628      	lsls	r0, r5, #24
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0xec>
 80047f4:	681d      	ldr	r5, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0xf2>
 80047f8:	0669      	lsls	r1, r5, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0xe8>
 80047fc:	881d      	ldrh	r5, [r3, #0]
 80047fe:	4854      	ldr	r0, [pc, #336]	; (8004950 <_printf_i+0x244>)
 8004800:	2f6f      	cmp	r7, #111	; 0x6f
 8004802:	bf0c      	ite	eq
 8004804:	2308      	moveq	r3, #8
 8004806:	230a      	movne	r3, #10
 8004808:	2100      	movs	r1, #0
 800480a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800480e:	6866      	ldr	r6, [r4, #4]
 8004810:	60a6      	str	r6, [r4, #8]
 8004812:	2e00      	cmp	r6, #0
 8004814:	bfa2      	ittt	ge
 8004816:	6821      	ldrge	r1, [r4, #0]
 8004818:	f021 0104 	bicge.w	r1, r1, #4
 800481c:	6021      	strge	r1, [r4, #0]
 800481e:	b90d      	cbnz	r5, 8004824 <_printf_i+0x118>
 8004820:	2e00      	cmp	r6, #0
 8004822:	d04d      	beq.n	80048c0 <_printf_i+0x1b4>
 8004824:	4616      	mov	r6, r2
 8004826:	fbb5 f1f3 	udiv	r1, r5, r3
 800482a:	fb03 5711 	mls	r7, r3, r1, r5
 800482e:	5dc7      	ldrb	r7, [r0, r7]
 8004830:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004834:	462f      	mov	r7, r5
 8004836:	42bb      	cmp	r3, r7
 8004838:	460d      	mov	r5, r1
 800483a:	d9f4      	bls.n	8004826 <_printf_i+0x11a>
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <_printf_i+0x14c>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07df      	lsls	r7, r3, #31
 8004844:	d508      	bpl.n	8004858 <_printf_i+0x14c>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	6861      	ldr	r1, [r4, #4]
 800484a:	4299      	cmp	r1, r3
 800484c:	bfde      	ittt	le
 800484e:	2330      	movle	r3, #48	; 0x30
 8004850:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004854:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004858:	1b92      	subs	r2, r2, r6
 800485a:	6122      	str	r2, [r4, #16]
 800485c:	f8cd a000 	str.w	sl, [sp]
 8004860:	464b      	mov	r3, r9
 8004862:	aa03      	add	r2, sp, #12
 8004864:	4621      	mov	r1, r4
 8004866:	4640      	mov	r0, r8
 8004868:	f7ff fee2 	bl	8004630 <_printf_common>
 800486c:	3001      	adds	r0, #1
 800486e:	d14c      	bne.n	800490a <_printf_i+0x1fe>
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	b004      	add	sp, #16
 8004876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487a:	4835      	ldr	r0, [pc, #212]	; (8004950 <_printf_i+0x244>)
 800487c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	680e      	ldr	r6, [r1, #0]
 8004884:	061f      	lsls	r7, r3, #24
 8004886:	f856 5b04 	ldr.w	r5, [r6], #4
 800488a:	600e      	str	r6, [r1, #0]
 800488c:	d514      	bpl.n	80048b8 <_printf_i+0x1ac>
 800488e:	07d9      	lsls	r1, r3, #31
 8004890:	bf44      	itt	mi
 8004892:	f043 0320 	orrmi.w	r3, r3, #32
 8004896:	6023      	strmi	r3, [r4, #0]
 8004898:	b91d      	cbnz	r5, 80048a2 <_printf_i+0x196>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	f023 0320 	bic.w	r3, r3, #32
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	2310      	movs	r3, #16
 80048a4:	e7b0      	b.n	8004808 <_printf_i+0xfc>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	f043 0320 	orr.w	r3, r3, #32
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	2378      	movs	r3, #120	; 0x78
 80048b0:	4828      	ldr	r0, [pc, #160]	; (8004954 <_printf_i+0x248>)
 80048b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048b6:	e7e3      	b.n	8004880 <_printf_i+0x174>
 80048b8:	065e      	lsls	r6, r3, #25
 80048ba:	bf48      	it	mi
 80048bc:	b2ad      	uxthmi	r5, r5
 80048be:	e7e6      	b.n	800488e <_printf_i+0x182>
 80048c0:	4616      	mov	r6, r2
 80048c2:	e7bb      	b.n	800483c <_printf_i+0x130>
 80048c4:	680b      	ldr	r3, [r1, #0]
 80048c6:	6826      	ldr	r6, [r4, #0]
 80048c8:	6960      	ldr	r0, [r4, #20]
 80048ca:	1d1d      	adds	r5, r3, #4
 80048cc:	600d      	str	r5, [r1, #0]
 80048ce:	0635      	lsls	r5, r6, #24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	d501      	bpl.n	80048d8 <_printf_i+0x1cc>
 80048d4:	6018      	str	r0, [r3, #0]
 80048d6:	e002      	b.n	80048de <_printf_i+0x1d2>
 80048d8:	0671      	lsls	r1, r6, #25
 80048da:	d5fb      	bpl.n	80048d4 <_printf_i+0x1c8>
 80048dc:	8018      	strh	r0, [r3, #0]
 80048de:	2300      	movs	r3, #0
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	4616      	mov	r6, r2
 80048e4:	e7ba      	b.n	800485c <_printf_i+0x150>
 80048e6:	680b      	ldr	r3, [r1, #0]
 80048e8:	1d1a      	adds	r2, r3, #4
 80048ea:	600a      	str	r2, [r1, #0]
 80048ec:	681e      	ldr	r6, [r3, #0]
 80048ee:	6862      	ldr	r2, [r4, #4]
 80048f0:	2100      	movs	r1, #0
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7fb fc94 	bl	8000220 <memchr>
 80048f8:	b108      	cbz	r0, 80048fe <_printf_i+0x1f2>
 80048fa:	1b80      	subs	r0, r0, r6
 80048fc:	6060      	str	r0, [r4, #4]
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	2300      	movs	r3, #0
 8004904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004908:	e7a8      	b.n	800485c <_printf_i+0x150>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	4632      	mov	r2, r6
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	47d0      	blx	sl
 8004914:	3001      	adds	r0, #1
 8004916:	d0ab      	beq.n	8004870 <_printf_i+0x164>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	079b      	lsls	r3, r3, #30
 800491c:	d413      	bmi.n	8004946 <_printf_i+0x23a>
 800491e:	68e0      	ldr	r0, [r4, #12]
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	4298      	cmp	r0, r3
 8004924:	bfb8      	it	lt
 8004926:	4618      	movlt	r0, r3
 8004928:	e7a4      	b.n	8004874 <_printf_i+0x168>
 800492a:	2301      	movs	r3, #1
 800492c:	4632      	mov	r2, r6
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	47d0      	blx	sl
 8004934:	3001      	adds	r0, #1
 8004936:	d09b      	beq.n	8004870 <_printf_i+0x164>
 8004938:	3501      	adds	r5, #1
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	9903      	ldr	r1, [sp, #12]
 800493e:	1a5b      	subs	r3, r3, r1
 8004940:	42ab      	cmp	r3, r5
 8004942:	dcf2      	bgt.n	800492a <_printf_i+0x21e>
 8004944:	e7eb      	b.n	800491e <_printf_i+0x212>
 8004946:	2500      	movs	r5, #0
 8004948:	f104 0619 	add.w	r6, r4, #25
 800494c:	e7f5      	b.n	800493a <_printf_i+0x22e>
 800494e:	bf00      	nop
 8004950:	08004c19 	.word	0x08004c19
 8004954:	08004c2a 	.word	0x08004c2a

08004958 <memcpy>:
 8004958:	440a      	add	r2, r1
 800495a:	4291      	cmp	r1, r2
 800495c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004960:	d100      	bne.n	8004964 <memcpy+0xc>
 8004962:	4770      	bx	lr
 8004964:	b510      	push	{r4, lr}
 8004966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800496e:	4291      	cmp	r1, r2
 8004970:	d1f9      	bne.n	8004966 <memcpy+0xe>
 8004972:	bd10      	pop	{r4, pc}

08004974 <memmove>:
 8004974:	4288      	cmp	r0, r1
 8004976:	b510      	push	{r4, lr}
 8004978:	eb01 0402 	add.w	r4, r1, r2
 800497c:	d902      	bls.n	8004984 <memmove+0x10>
 800497e:	4284      	cmp	r4, r0
 8004980:	4623      	mov	r3, r4
 8004982:	d807      	bhi.n	8004994 <memmove+0x20>
 8004984:	1e43      	subs	r3, r0, #1
 8004986:	42a1      	cmp	r1, r4
 8004988:	d008      	beq.n	800499c <memmove+0x28>
 800498a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800498e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004992:	e7f8      	b.n	8004986 <memmove+0x12>
 8004994:	4402      	add	r2, r0
 8004996:	4601      	mov	r1, r0
 8004998:	428a      	cmp	r2, r1
 800499a:	d100      	bne.n	800499e <memmove+0x2a>
 800499c:	bd10      	pop	{r4, pc}
 800499e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049a6:	e7f7      	b.n	8004998 <memmove+0x24>

080049a8 <_free_r>:
 80049a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049aa:	2900      	cmp	r1, #0
 80049ac:	d048      	beq.n	8004a40 <_free_r+0x98>
 80049ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b2:	9001      	str	r0, [sp, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f1a1 0404 	sub.w	r4, r1, #4
 80049ba:	bfb8      	it	lt
 80049bc:	18e4      	addlt	r4, r4, r3
 80049be:	f000 f8d3 	bl	8004b68 <__malloc_lock>
 80049c2:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <_free_r+0x9c>)
 80049c4:	9801      	ldr	r0, [sp, #4]
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	4615      	mov	r5, r2
 80049ca:	b933      	cbnz	r3, 80049da <_free_r+0x32>
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	6014      	str	r4, [r2, #0]
 80049d0:	b003      	add	sp, #12
 80049d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d6:	f000 b8cd 	b.w	8004b74 <__malloc_unlock>
 80049da:	42a3      	cmp	r3, r4
 80049dc:	d90b      	bls.n	80049f6 <_free_r+0x4e>
 80049de:	6821      	ldr	r1, [r4, #0]
 80049e0:	1862      	adds	r2, r4, r1
 80049e2:	4293      	cmp	r3, r2
 80049e4:	bf04      	itt	eq
 80049e6:	681a      	ldreq	r2, [r3, #0]
 80049e8:	685b      	ldreq	r3, [r3, #4]
 80049ea:	6063      	str	r3, [r4, #4]
 80049ec:	bf04      	itt	eq
 80049ee:	1852      	addeq	r2, r2, r1
 80049f0:	6022      	streq	r2, [r4, #0]
 80049f2:	602c      	str	r4, [r5, #0]
 80049f4:	e7ec      	b.n	80049d0 <_free_r+0x28>
 80049f6:	461a      	mov	r2, r3
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b10b      	cbz	r3, 8004a00 <_free_r+0x58>
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	d9fa      	bls.n	80049f6 <_free_r+0x4e>
 8004a00:	6811      	ldr	r1, [r2, #0]
 8004a02:	1855      	adds	r5, r2, r1
 8004a04:	42a5      	cmp	r5, r4
 8004a06:	d10b      	bne.n	8004a20 <_free_r+0x78>
 8004a08:	6824      	ldr	r4, [r4, #0]
 8004a0a:	4421      	add	r1, r4
 8004a0c:	1854      	adds	r4, r2, r1
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	d1dd      	bne.n	80049d0 <_free_r+0x28>
 8004a14:	681c      	ldr	r4, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	6053      	str	r3, [r2, #4]
 8004a1a:	4421      	add	r1, r4
 8004a1c:	6011      	str	r1, [r2, #0]
 8004a1e:	e7d7      	b.n	80049d0 <_free_r+0x28>
 8004a20:	d902      	bls.n	8004a28 <_free_r+0x80>
 8004a22:	230c      	movs	r3, #12
 8004a24:	6003      	str	r3, [r0, #0]
 8004a26:	e7d3      	b.n	80049d0 <_free_r+0x28>
 8004a28:	6825      	ldr	r5, [r4, #0]
 8004a2a:	1961      	adds	r1, r4, r5
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	bf04      	itt	eq
 8004a30:	6819      	ldreq	r1, [r3, #0]
 8004a32:	685b      	ldreq	r3, [r3, #4]
 8004a34:	6063      	str	r3, [r4, #4]
 8004a36:	bf04      	itt	eq
 8004a38:	1949      	addeq	r1, r1, r5
 8004a3a:	6021      	streq	r1, [r4, #0]
 8004a3c:	6054      	str	r4, [r2, #4]
 8004a3e:	e7c7      	b.n	80049d0 <_free_r+0x28>
 8004a40:	b003      	add	sp, #12
 8004a42:	bd30      	pop	{r4, r5, pc}
 8004a44:	200000c4 	.word	0x200000c4

08004a48 <_malloc_r>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	1ccd      	adds	r5, r1, #3
 8004a4c:	f025 0503 	bic.w	r5, r5, #3
 8004a50:	3508      	adds	r5, #8
 8004a52:	2d0c      	cmp	r5, #12
 8004a54:	bf38      	it	cc
 8004a56:	250c      	movcc	r5, #12
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	db01      	blt.n	8004a62 <_malloc_r+0x1a>
 8004a5e:	42a9      	cmp	r1, r5
 8004a60:	d903      	bls.n	8004a6a <_malloc_r+0x22>
 8004a62:	230c      	movs	r3, #12
 8004a64:	6033      	str	r3, [r6, #0]
 8004a66:	2000      	movs	r0, #0
 8004a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a6a:	f000 f87d 	bl	8004b68 <__malloc_lock>
 8004a6e:	4921      	ldr	r1, [pc, #132]	; (8004af4 <_malloc_r+0xac>)
 8004a70:	680a      	ldr	r2, [r1, #0]
 8004a72:	4614      	mov	r4, r2
 8004a74:	b99c      	cbnz	r4, 8004a9e <_malloc_r+0x56>
 8004a76:	4f20      	ldr	r7, [pc, #128]	; (8004af8 <_malloc_r+0xb0>)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	b923      	cbnz	r3, 8004a86 <_malloc_r+0x3e>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f000 f862 	bl	8004b48 <_sbrk_r>
 8004a84:	6038      	str	r0, [r7, #0]
 8004a86:	4629      	mov	r1, r5
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f000 f85d 	bl	8004b48 <_sbrk_r>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	d123      	bne.n	8004ada <_malloc_r+0x92>
 8004a92:	230c      	movs	r3, #12
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	4630      	mov	r0, r6
 8004a98:	f000 f86c 	bl	8004b74 <__malloc_unlock>
 8004a9c:	e7e3      	b.n	8004a66 <_malloc_r+0x1e>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	1b5b      	subs	r3, r3, r5
 8004aa2:	d417      	bmi.n	8004ad4 <_malloc_r+0x8c>
 8004aa4:	2b0b      	cmp	r3, #11
 8004aa6:	d903      	bls.n	8004ab0 <_malloc_r+0x68>
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	441c      	add	r4, r3
 8004aac:	6025      	str	r5, [r4, #0]
 8004aae:	e004      	b.n	8004aba <_malloc_r+0x72>
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	42a2      	cmp	r2, r4
 8004ab4:	bf0c      	ite	eq
 8004ab6:	600b      	streq	r3, [r1, #0]
 8004ab8:	6053      	strne	r3, [r2, #4]
 8004aba:	4630      	mov	r0, r6
 8004abc:	f000 f85a 	bl	8004b74 <__malloc_unlock>
 8004ac0:	f104 000b 	add.w	r0, r4, #11
 8004ac4:	1d23      	adds	r3, r4, #4
 8004ac6:	f020 0007 	bic.w	r0, r0, #7
 8004aca:	1ac2      	subs	r2, r0, r3
 8004acc:	d0cc      	beq.n	8004a68 <_malloc_r+0x20>
 8004ace:	1a1b      	subs	r3, r3, r0
 8004ad0:	50a3      	str	r3, [r4, r2]
 8004ad2:	e7c9      	b.n	8004a68 <_malloc_r+0x20>
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	6864      	ldr	r4, [r4, #4]
 8004ad8:	e7cc      	b.n	8004a74 <_malloc_r+0x2c>
 8004ada:	1cc4      	adds	r4, r0, #3
 8004adc:	f024 0403 	bic.w	r4, r4, #3
 8004ae0:	42a0      	cmp	r0, r4
 8004ae2:	d0e3      	beq.n	8004aac <_malloc_r+0x64>
 8004ae4:	1a21      	subs	r1, r4, r0
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f000 f82e 	bl	8004b48 <_sbrk_r>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d1dd      	bne.n	8004aac <_malloc_r+0x64>
 8004af0:	e7cf      	b.n	8004a92 <_malloc_r+0x4a>
 8004af2:	bf00      	nop
 8004af4:	200000c4 	.word	0x200000c4
 8004af8:	200000c8 	.word	0x200000c8

08004afc <_realloc_r>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	4607      	mov	r7, r0
 8004b00:	4614      	mov	r4, r2
 8004b02:	460e      	mov	r6, r1
 8004b04:	b921      	cbnz	r1, 8004b10 <_realloc_r+0x14>
 8004b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	f7ff bf9c 	b.w	8004a48 <_malloc_r>
 8004b10:	b922      	cbnz	r2, 8004b1c <_realloc_r+0x20>
 8004b12:	f7ff ff49 	bl	80049a8 <_free_r>
 8004b16:	4625      	mov	r5, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1c:	f000 f830 	bl	8004b80 <_malloc_usable_size_r>
 8004b20:	42a0      	cmp	r0, r4
 8004b22:	d20f      	bcs.n	8004b44 <_realloc_r+0x48>
 8004b24:	4621      	mov	r1, r4
 8004b26:	4638      	mov	r0, r7
 8004b28:	f7ff ff8e 	bl	8004a48 <_malloc_r>
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0f2      	beq.n	8004b18 <_realloc_r+0x1c>
 8004b32:	4631      	mov	r1, r6
 8004b34:	4622      	mov	r2, r4
 8004b36:	f7ff ff0f 	bl	8004958 <memcpy>
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	f7ff ff33 	bl	80049a8 <_free_r>
 8004b42:	e7e9      	b.n	8004b18 <_realloc_r+0x1c>
 8004b44:	4635      	mov	r5, r6
 8004b46:	e7e7      	b.n	8004b18 <_realloc_r+0x1c>

08004b48 <_sbrk_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d06      	ldr	r5, [pc, #24]	; (8004b64 <_sbrk_r+0x1c>)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fd f936 	bl	8001dc4 <_sbrk>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_sbrk_r+0x1a>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_sbrk_r+0x1a>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	20000250 	.word	0x20000250

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f000 b811 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	20000258 	.word	0x20000258

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f000 b80c 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	20000258 	.word	0x20000258

08004b80 <_malloc_usable_size_r>:
 8004b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b84:	1f18      	subs	r0, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bfbc      	itt	lt
 8004b8a:	580b      	ldrlt	r3, [r1, r0]
 8004b8c:	18c0      	addlt	r0, r0, r3
 8004b8e:	4770      	bx	lr

08004b90 <__retarget_lock_acquire_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_release_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
